{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sampa\\\\Downloads\\\\myapp\\\\myapp\\\\myapp\\\\frontend\\\\src\\\\frontend\\\\components\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SpeechToText({\n  onChange,\n  onSend\n}) {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  const silenceTimer = useRef(null);\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"Speech recognition is not supported in this browser.\");\n      return;\n    }\n    const recog = new SpeechRecognition();\n    recog.continuous = true;\n    recog.interimResults = true;\n    recog.lang = \"en-IN\";\n    recog.onresult = event => {\n      let transcript = \"\";\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        transcript += event.results[i][0].transcript;\n      }\n      onChange(transcript);\n      if (silenceTimer.current) clearTimeout(silenceTimer.current);\n      silenceTimer.current = setTimeout(() => {\n        recog.stop();\n      }, 2000);\n    };\n    recog.onend = () => {\n      setIsListening(false);\n      if (silenceTimer.current) clearTimeout(silenceTimer.current);\n      onSend === null || onSend === void 0 ? void 0 : onSend();\n    };\n    setRecognition(recog);\n  }, [onChange, onSend]);\n  const toggleListening = () => {\n    if (!recognition) return;\n    if (isListening) {\n      recognition.stop();\n      setIsListening(false);\n    } else {\n      recognition.start();\n      setIsListening(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `btn ${isListening ? \"btn-danger\" : \"btn-outline-secondary\"} p-2`,\n    style: {\n      backgroundColor: \"white\",\n      borderRadius: \"10px\",\n      width: \"40px\",\n      height: \"40px\"\n    },\n    onClick: toggleListening,\n    title: \"Start/Stop Mic\",\n    children: \"\\uD83C\\uDFA4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechToText, \"wT+1RjRVVmM6Qs8Tcv7kHKjhWsU=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","SpeechToText","onChange","onSend","_s","isListening","setIsListening","recognition","setRecognition","silenceTimer","SpeechRecognition","window","webkitSpeechRecognition","alert","recog","continuous","interimResults","lang","onresult","event","transcript","i","resultIndex","results","length","current","clearTimeout","setTimeout","stop","onend","toggleListening","start","className","style","backgroundColor","borderRadius","width","height","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sampa/Downloads/myapp/myapp/myapp/frontend/src/frontend/components/SpeechToText.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nfunction SpeechToText({ onChange, onSend }) {\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  const silenceTimer = useRef(null);\n\n  useEffect(() => {\n    const SpeechRecognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"Speech recognition is not supported in this browser.\");\n      return;\n    }\n\n    const recog = new SpeechRecognition();\n    recog.continuous = true;\n    recog.interimResults = true;\n    recog.lang = \"en-IN\";\n\n    recog.onresult = (event) => {\n      let transcript = \"\";\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        transcript += event.results[i][0].transcript;\n      }\n      onChange(transcript);\n\n      if (silenceTimer.current) clearTimeout(silenceTimer.current);\n      silenceTimer.current = setTimeout(() => {\n        recog.stop();\n      }, 2000);\n    };\n\n    recog.onend = () => {\n      setIsListening(false);\n      if (silenceTimer.current) clearTimeout(silenceTimer.current);\n      onSend?.();\n    };\n\n    setRecognition(recog);\n  }, [onChange, onSend]);\n\n  const toggleListening = () => {\n    if (!recognition) return;\n    if (isListening) {\n      recognition.stop();\n      setIsListening(false);\n    } else {\n      recognition.start();\n      setIsListening(true);\n    }\n  };\n\n  return (\n    <button\n      className={`btn ${isListening ? \"btn-danger\" : \"btn-outline-secondary\"} p-2`}\n      style={{\n        backgroundColor: \"white\",\n        borderRadius: \"10px\",\n        width: \"40px\",\n        height: \"40px\",\n      }}\n      onClick={toggleListening}\n      title=\"Start/Stop Mic\"\n    >\n      ðŸŽ¤\n    </button>\n  );\n}\n\nexport default SpeechToText;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}