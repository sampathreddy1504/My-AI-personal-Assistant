{"ast":null,"code":"import ENTimeUnitWithinFormatParser from \"./parsers/ITTimeUnitWithinFormatParser.js\";\nimport ENMonthNameLittleEndianParser from \"./parsers/ITMonthNameLittleEndianParser.js\";\nimport ENMonthNameMiddleEndianParser from \"./parsers/ITMonthNameMiddleEndianParser.js\";\nimport ENMonthNameParser from \"./parsers/ITMonthNameParser.js\";\nimport ENCasualYearMonthDayParser from \"./parsers/ITCasualYearMonthDayParser.js\";\nimport ENSlashMonthFormatParser from \"./parsers/ITSlashMonthFormatParser.js\";\nimport ENTimeExpressionParser from \"./parsers/ITTimeExpressionParser.js\";\nimport ENTimeUnitAgoFormatParser from \"./parsers/ITTimeUnitAgoFormatParser.js\";\nimport ENTimeUnitLaterFormatParser from \"./parsers/ITTimeUnitLaterFormatParser.js\";\nimport ENMergeDateRangeRefiner from \"./refiners/ITMergeDateRangeRefiner.js\";\nimport ENMergeDateTimeRefiner from \"./refiners/ITMergeDateTimeRefiner.js\";\nimport { includeCommonConfiguration } from \"../../configurations.js\";\nimport ENCasualDateParser from \"./parsers/ITCasualDateParser.js\";\nimport ENCasualTimeParser from \"./parsers/ITCasualTimeParser.js\";\nimport ENWeekdayParser from \"./parsers/ITWeekdayParser.js\";\nimport ITRelativeDateFormatParser from \"./parsers/ITRelativeDateFormatParser.js\";\nimport { Chrono } from \"../../chrono.js\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser.js\";\nimport ENTimeUnitCasualRelativeFormatParser from \"./parsers/ITTimeUnitCasualRelativeFormatParser.js\";\nimport ENMergeRelativeDateRefiner from \"./refiners/ITMergeRelativeDateRefiner.js\";\nexport const casual = new Chrono(createCasualConfiguration(false));\nexport const strict = new Chrono(createConfiguration(true, false));\nexport const GB = new Chrono(createConfiguration(false, true));\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration(littleEndian = false) {\n  const option = createConfiguration(false, littleEndian);\n  option.parsers.unshift(new ENCasualDateParser());\n  option.parsers.unshift(new ENCasualTimeParser());\n  option.parsers.unshift(new ENMonthNameParser());\n  option.parsers.unshift(new ITRelativeDateFormatParser());\n  option.parsers.unshift(new ENTimeUnitCasualRelativeFormatParser());\n  return option;\n}\nexport function createConfiguration(strictMode = true, littleEndian = false) {\n  return includeCommonConfiguration({\n    parsers: [new SlashDateFormatParser(littleEndian), new ENTimeUnitWithinFormatParser(), new ENMonthNameLittleEndianParser(), new ENMonthNameMiddleEndianParser(), new ENWeekdayParser(), new ENCasualYearMonthDayParser(), new ENSlashMonthFormatParser(), new ENTimeExpressionParser(strictMode), new ENTimeUnitAgoFormatParser(strictMode), new ENTimeUnitLaterFormatParser(strictMode)],\n    refiners: [new ENMergeRelativeDateRefiner(), new ENMergeDateTimeRefiner(), new ENMergeDateRangeRefiner()]\n  }, strictMode);\n}","map":{"version":3,"names":["ENTimeUnitWithinFormatParser","ENMonthNameLittleEndianParser","ENMonthNameMiddleEndianParser","ENMonthNameParser","ENCasualYearMonthDayParser","ENSlashMonthFormatParser","ENTimeExpressionParser","ENTimeUnitAgoFormatParser","ENTimeUnitLaterFormatParser","ENMergeDateRangeRefiner","ENMergeDateTimeRefiner","includeCommonConfiguration","ENCasualDateParser","ENCasualTimeParser","ENWeekdayParser","ITRelativeDateFormatParser","Chrono","SlashDateFormatParser","ENTimeUnitCasualRelativeFormatParser","ENMergeRelativeDateRefiner","casual","createCasualConfiguration","strict","createConfiguration","GB","parse","text","ref","option","parseDate","littleEndian","parsers","unshift","strictMode","refiners"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\it\\index.ts"],"sourcesContent":["/**\n * Chrono components for Italian support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport ENTimeUnitWithinFormatParser from \"./parsers/ITTimeUnitWithinFormatParser\";\nimport ENMonthNameLittleEndianParser from \"./parsers/ITMonthNameLittleEndianParser\";\nimport ENMonthNameMiddleEndianParser from \"./parsers/ITMonthNameMiddleEndianParser\";\nimport ENMonthNameParser from \"./parsers/ITMonthNameParser\";\nimport ENCasualYearMonthDayParser from \"./parsers/ITCasualYearMonthDayParser\";\nimport ENSlashMonthFormatParser from \"./parsers/ITSlashMonthFormatParser\";\nimport ENTimeExpressionParser from \"./parsers/ITTimeExpressionParser\";\nimport ENTimeUnitAgoFormatParser from \"./parsers/ITTimeUnitAgoFormatParser\";\nimport ENTimeUnitLaterFormatParser from \"./parsers/ITTimeUnitLaterFormatParser\";\nimport ENMergeDateRangeRefiner from \"./refiners/ITMergeDateRangeRefiner\";\nimport ENMergeDateTimeRefiner from \"./refiners/ITMergeDateTimeRefiner\";\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport ENCasualDateParser from \"./parsers/ITCasualDateParser\";\nimport ENCasualTimeParser from \"./parsers/ITCasualTimeParser\";\nimport ENWeekdayParser from \"./parsers/ITWeekdayParser\";\nimport ITRelativeDateFormatParser from \"./parsers/ITRelativeDateFormatParser\";\n\nimport { ParsedResult, ParsingOption } from \"../../index\";\nimport { Chrono, Configuration } from \"../../chrono\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ENTimeUnitCasualRelativeFormatParser from \"./parsers/ITTimeUnitCasualRelativeFormatParser\";\nimport ENMergeRelativeDateRefiner from \"./refiners/ITMergeRelativeDateRefiner\";\n\n/**\n * Chrono object configured for parsing *casual* Italian\n */\nexport const casual = new Chrono(createCasualConfiguration(false));\n\n/**\n * Chrono object configured for parsing *strict* Italian\n */\nexport const strict = new Chrono(createConfiguration(true, false));\n\n/**\n * Chrono object configured for parsing Italian\n */\nexport const GB = new Chrono(createConfiguration(false, true));\n\n/**\n * A shortcut for en.casual.parse()\n */\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for en.casual.parseDate()\n */\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * Create a default *casual* {@Link Configuration} for Italian chrono.\n * It calls {@Link createConfiguration} and includes additional parsers.\n */\nexport function createCasualConfiguration(littleEndian = false): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new ENCasualDateParser());\n    option.parsers.unshift(new ENCasualTimeParser());\n    option.parsers.unshift(new ENMonthNameParser());\n    option.parsers.unshift(new ITRelativeDateFormatParser());\n    option.parsers.unshift(new ENTimeUnitCasualRelativeFormatParser());\n    return option;\n}\n\n/**\n * Create a default {@Link Configuration} for Italian chrono\n *\n * @param strictMode If the timeunit mentioning should be strict, not casual\n * @param littleEndian If format should be date-first/littleEndian (e.g. en_UK), not month-first/middleEndian (e.g. en_US)\n */\nexport function createConfiguration(strictMode = true, littleEndian = false): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(littleEndian),\n                new ENTimeUnitWithinFormatParser(),\n                new ENMonthNameLittleEndianParser(),\n                new ENMonthNameMiddleEndianParser(),\n                new ENWeekdayParser(),\n                new ENCasualYearMonthDayParser(),\n                new ENSlashMonthFormatParser(),\n                new ENTimeExpressionParser(strictMode),\n                new ENTimeUnitAgoFormatParser(strictMode),\n                new ENTimeUnitLaterFormatParser(strictMode),\n            ],\n            refiners: [new ENMergeRelativeDateRefiner(), new ENMergeDateTimeRefiner(), new ENMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}