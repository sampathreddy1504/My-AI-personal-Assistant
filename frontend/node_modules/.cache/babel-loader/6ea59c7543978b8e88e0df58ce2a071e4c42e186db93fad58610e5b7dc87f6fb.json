{"ast":null,"code":"import JPStandardParser from \"./parsers/JPStandardParser.js\";\nimport JPMergeDateRangeRefiner from \"./refiners/JPMergeDateRangeRefiner.js\";\nimport JPCasualDateParser from \"./parsers/JPCasualDateParser.js\";\nimport JPWeekdayParser from \"./parsers/JPWeekdayParser.js\";\nimport JPSlashDateFormatParser from \"./parsers/JPSlashDateFormatParser.js\";\nimport JPTimeExpressionParser from \"./parsers/JPTimeExpressionParser.js\";\nimport JPMergeDateTimeRefiner from \"./refiners/JPMergeDateTimeRefiner.js\";\nimport { Chrono } from \"../../chrono.js\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results.js\";\nimport { Meridiem, Weekday } from \"../../types.js\";\nimport JPMergeWeekdayComponentRefiner from \"./refiners/JPMergeWeekdayComponentRefiner.js\";\nimport JPWeekdayWithParenthesesParser from \"./parsers/JPWeekdayWithParenthesesParser.js\";\nimport { includeCommonConfiguration } from \"../../configurations.js\";\nimport MergeWeekdayComponentRefiner from \"../../common/refiners/MergeWeekdayComponentRefiner.js\";\nexport { Chrono, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Meridiem, Weekday };\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration() {\n  const option = createConfiguration(false);\n  option.parsers.unshift(new JPCasualDateParser());\n  return option;\n}\nexport function createConfiguration(strictMode = true) {\n  const configuration = includeCommonConfiguration({\n    parsers: [new JPStandardParser(), new JPWeekdayParser(), new JPWeekdayWithParenthesesParser(), new JPSlashDateFormatParser(), new JPTimeExpressionParser()],\n    refiners: [new JPMergeWeekdayComponentRefiner(), new JPMergeDateTimeRefiner(), new JPMergeDateRangeRefiner()]\n  }, strictMode);\n  configuration.refiners = configuration.refiners.filter(refiner => !(refiner instanceof MergeWeekdayComponentRefiner));\n  return configuration;\n}","map":{"version":3,"names":["JPStandardParser","JPMergeDateRangeRefiner","JPCasualDateParser","JPWeekdayParser","JPSlashDateFormatParser","JPTimeExpressionParser","JPMergeDateTimeRefiner","Chrono","ParsingResult","ParsingComponents","ReferenceWithTimezone","Meridiem","Weekday","JPMergeWeekdayComponentRefiner","JPWeekdayWithParenthesesParser","includeCommonConfiguration","MergeWeekdayComponentRefiner","casual","createCasualConfiguration","strict","createConfiguration","parse","text","ref","option","parseDate","parsers","unshift","strictMode","configuration","refiners","filter","refiner"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\ja\\index.ts"],"sourcesContent":["/**\n * Chrono components for Japanese support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport JPStandardParser from \"./parsers/JPStandardParser\";\nimport JPMergeDateRangeRefiner from \"./refiners/JPMergeDateRangeRefiner\";\nimport JPCasualDateParser from \"./parsers/JPCasualDateParser\";\nimport JPWeekdayParser from \"./parsers/JPWeekdayParser\";\nimport JPSlashDateFormatParser from \"./parsers/JPSlashDateFormatParser\";\nimport JPTimeExpressionParser from \"./parsers/JPTimeExpressionParser\";\nimport JPMergeDateTimeRefiner from \"./refiners/JPMergeDateTimeRefiner\";\n\nimport { Chrono, Configuration, Parser, Refiner } from \"../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../types\";\nimport JPMergeWeekdayComponentRefiner from \"./refiners/JPMergeWeekdayComponentRefiner\";\nimport JPWeekdayWithParenthesesParser from \"./parsers/JPWeekdayWithParenthesesParser\";\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport MergeWeekdayComponentRefiner from \"../../common/refiners/MergeWeekdayComponentRefiner\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createCasualConfiguration(): Configuration {\n    const option = createConfiguration(false);\n    option.parsers.unshift(new JPCasualDateParser());\n    return option;\n}\n\n/**\n * @ignore (to be documented later)\n */\nexport function createConfiguration(strictMode = true): Configuration {\n    const configuration = includeCommonConfiguration(\n        {\n            parsers: [\n                new JPStandardParser(),\n                new JPWeekdayParser(),\n                new JPWeekdayWithParenthesesParser(),\n                new JPSlashDateFormatParser(),\n                new JPTimeExpressionParser(),\n            ],\n            refiners: [\n                new JPMergeWeekdayComponentRefiner(), // Note: should be before JPMergeDateTimeRefiner and JPMergeDateRangeRefiner\n                new JPMergeDateTimeRefiner(),\n                new JPMergeDateRangeRefiner(),\n            ],\n        },\n        strictMode\n    );\n\n    // Note: Remove because it is not used in Japanese grammar\n    configuration.refiners = configuration.refiners.filter(\n        (refiner) => !(refiner instanceof MergeWeekdayComponentRefiner)\n    );\n\n    return configuration;\n}\n"],"mappings":"AAMA,OAAOA,gBAAgB,MAAM,+BAA6B;AAC1D,OAAOC,uBAAuB,MAAM,uCAAqC;AACzE,OAAOC,kBAAkB,MAAM,iCAA+B;AAC9D,OAAOC,eAAe,MAAM,8BAA4B;AACxD,OAAOC,uBAAuB,MAAM,sCAAoC;AACxE,OAAOC,sBAAsB,MAAM,qCAAmC;AACtE,OAAOC,sBAAsB,MAAM,sCAAoC;AAEvE,SAASC,MAAM,QAAwC,iBAAe;AACtE,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB,QAAQ,kBAAgB;AACxF,SAAmEC,QAAQ,EAAEC,OAAO,QAAQ,gBAAc;AAC1G,OAAOC,8BAA8B,MAAM,8CAA4C;AACvF,OAAOC,8BAA8B,MAAM,6CAA2C;AACtF,SAASC,0BAA0B,QAAQ,yBAAuB;AAClE,OAAOC,4BAA4B,MAAM,uDAAqD;AAE9F,SAAST,MAAM,EAAmBC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB;AACzF,SAAmEC,QAAQ,EAAEC,OAAO;AAGpF,OAAO,MAAMK,MAAM,GAAG,IAAIV,MAAM,CAACW,yBAAyB,EAAE,CAAC;AAC7D,OAAO,MAAMC,MAAM,GAAG,IAAIZ,MAAM,CAACa,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAE3D,OAAM,SAAUC,KAAKA,CAACC,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACrF,OAAOP,MAAM,CAACI,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC1C;AAEA,OAAM,SAAUC,SAASA,CAACH,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACzF,OAAOP,MAAM,CAACQ,SAAS,CAACH,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC9C;AAKA,OAAM,SAAUN,yBAAyBA,CAAA;EACrC,MAAMM,MAAM,GAAGJ,mBAAmB,CAAC,KAAK,CAAC;EACzCI,MAAM,CAACE,OAAO,CAACC,OAAO,CAAC,IAAIzB,kBAAkB,EAAE,CAAC;EAChD,OAAOsB,MAAM;AACjB;AAKA,OAAM,SAAUJ,mBAAmBA,CAACQ,UAAU,GAAG,IAAI;EACjD,MAAMC,aAAa,GAAGd,0BAA0B,CAC5C;IACIW,OAAO,EAAE,CACL,IAAI1B,gBAAgB,EAAE,EACtB,IAAIG,eAAe,EAAE,EACrB,IAAIW,8BAA8B,EAAE,EACpC,IAAIV,uBAAuB,EAAE,EAC7B,IAAIC,sBAAsB,EAAE,CAC/B;IACDyB,QAAQ,EAAE,CACN,IAAIjB,8BAA8B,EAAE,EACpC,IAAIP,sBAAsB,EAAE,EAC5B,IAAIL,uBAAuB,EAAE;GAEpC,EACD2B,UAAU,CACb;EAGDC,aAAa,CAACC,QAAQ,GAAGD,aAAa,CAACC,QAAQ,CAACC,MAAM,CACjDC,OAAO,IAAK,EAAEA,OAAO,YAAYhB,4BAA4B,CAAC,CAClE;EAED,OAAOa,aAAa;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}