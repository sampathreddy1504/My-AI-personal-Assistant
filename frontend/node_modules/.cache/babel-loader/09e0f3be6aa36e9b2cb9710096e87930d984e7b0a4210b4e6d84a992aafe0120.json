{"ast":null,"code":"import { MergingRefiner } from \"../../../common/abstractRefiners.js\";\nexport default class JPMergeWeekdayComponentRefiner extends MergingRefiner {\n  mergeResults(textBetween, currentResult, nextResult) {\n    const newResult = currentResult.clone();\n    newResult.text = currentResult.text + textBetween + nextResult.text;\n    newResult.start.assign(\"weekday\", nextResult.start.get(\"weekday\"));\n    if (newResult.end) {\n      newResult.end.assign(\"weekday\", nextResult.start.get(\"weekday\"));\n    }\n    return newResult;\n  }\n  shouldMergeResults(textBetween, currentResult, nextResult) {\n    const normalDateThenWeekday = currentResult.start.isCertain(\"day\") && nextResult.start.isOnlyWeekdayComponent() && !nextResult.start.isCertain(\"hour\");\n    return normalDateThenWeekday && textBetween.match(/^[,、の]?\\s*$/) !== null;\n  }\n}","map":{"version":3,"names":["MergingRefiner","JPMergeWeekdayComponentRefiner","mergeResults","textBetween","currentResult","nextResult","newResult","clone","text","start","assign","get","end","shouldMergeResults","normalDateThenWeekday","isCertain","isOnlyWeekdayComponent","match"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\ja\\refiners\\JPMergeWeekdayComponentRefiner.ts"],"sourcesContent":["import { MergingRefiner } from \"../../../common/abstractRefiners\";\nimport { ParsingResult } from \"../../../results\";\n\n/**\n * Merge weekday component into more completed data\n * - [2014/7/12], [(土)] => [2014/7/12 (土)]\n * - [7月12日], [土曜日] => [7月12日 土曜日]\n * The difference between the original MergeWeekdayComponentRefiner and the JP one is the order of date and weekday.\n */\nexport default class JPMergeWeekdayComponentRefiner extends MergingRefiner {\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const newResult = currentResult.clone();\n        newResult.text = currentResult.text + textBetween + nextResult.text;\n\n        newResult.start.assign(\"weekday\", nextResult.start.get(\"weekday\"));\n        if (newResult.end) {\n            newResult.end.assign(\"weekday\", nextResult.start.get(\"weekday\"));\n        }\n\n        return newResult;\n    }\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        const normalDateThenWeekday =\n            currentResult.start.isCertain(\"day\") &&\n            nextResult.start.isOnlyWeekdayComponent() &&\n            !nextResult.start.isCertain(\"hour\");\n        return normalDateThenWeekday && textBetween.match(/^[,、の]?\\s*$/) !== null;\n    }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,qCAAmC;AASlE,eAAc,MAAOC,8BAA+B,SAAQD,cAAc;EACtEE,YAAYA,CAACC,WAAmB,EAAEC,aAA4B,EAAEC,UAAyB;IACrF,MAAMC,SAAS,GAAGF,aAAa,CAACG,KAAK,EAAE;IACvCD,SAAS,CAACE,IAAI,GAAGJ,aAAa,CAACI,IAAI,GAAGL,WAAW,GAAGE,UAAU,CAACG,IAAI;IAEnEF,SAAS,CAACG,KAAK,CAACC,MAAM,CAAC,SAAS,EAAEL,UAAU,CAACI,KAAK,CAACE,GAAG,CAAC,SAAS,CAAC,CAAC;IAClE,IAAIL,SAAS,CAACM,GAAG,EAAE;MACfN,SAAS,CAACM,GAAG,CAACF,MAAM,CAAC,SAAS,EAAEL,UAAU,CAACI,KAAK,CAACE,GAAG,CAAC,SAAS,CAAC,CAAC;IACpE;IAEA,OAAOL,SAAS;EACpB;EAEAO,kBAAkBA,CAACV,WAAmB,EAAEC,aAA4B,EAAEC,UAAyB;IAC3F,MAAMS,qBAAqB,GACvBV,aAAa,CAACK,KAAK,CAACM,SAAS,CAAC,KAAK,CAAC,IACpCV,UAAU,CAACI,KAAK,CAACO,sBAAsB,EAAE,IACzC,CAACX,UAAU,CAACI,KAAK,CAACM,SAAS,CAAC,MAAM,CAAC;IACvC,OAAOD,qBAAqB,IAAIX,WAAW,CAACc,KAAK,CAAC,aAAa,CAAC,KAAK,IAAI;EAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}