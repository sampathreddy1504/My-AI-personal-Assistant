{"ast":null,"code":"import { Meridiem } from \"../../../index.js\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser.js\";\nexport default class ENTimeExpressionParser extends AbstractTimeExpressionParser {\n  constructor(strictMode) {\n    super(strictMode);\n  }\n  followingPhase() {\n    return \"\\\\s*(?:\\\\-|\\\\–|\\\\~|\\\\〜|to|\\\\?)\\\\s*\";\n  }\n  primaryPrefix() {\n    return \"(?:(?:alle|dalle)\\\\s*)??\";\n  }\n  primarySuffix() {\n    return \"(?:\\\\s*(?:o\\\\W*in punto|alle\\\\s*sera|in\\\\s*del\\\\s*(?:mattina|pomeriggio)))?(?!/)(?=\\\\W|$)\";\n  }\n  extractPrimaryTimeComponents(context, match) {\n    const components = super.extractPrimaryTimeComponents(context, match);\n    if (components) {\n      if (match[0].endsWith(\"sera\")) {\n        const hour = components.get(\"hour\");\n        if (hour >= 6 && hour < 12) {\n          components.assign(\"hour\", components.get(\"hour\") + 12);\n          components.assign(\"meridiem\", Meridiem.PM);\n        } else if (hour < 6) {\n          components.assign(\"meridiem\", Meridiem.AM);\n        }\n      }\n      if (match[0].endsWith(\"pomeriggio\")) {\n        components.assign(\"meridiem\", Meridiem.PM);\n        const hour = components.get(\"hour\");\n        if (hour >= 0 && hour <= 6) {\n          components.assign(\"hour\", components.get(\"hour\") + 12);\n        }\n      }\n      if (match[0].endsWith(\"mattina\")) {\n        components.assign(\"meridiem\", Meridiem.AM);\n        const hour = components.get(\"hour\");\n        if (hour < 12) {\n          components.assign(\"hour\", components.get(\"hour\"));\n        }\n      }\n    }\n    return components;\n  }\n}","map":{"version":3,"names":["Meridiem","AbstractTimeExpressionParser","ENTimeExpressionParser","constructor","strictMode","followingPhase","primaryPrefix","primarySuffix","extractPrimaryTimeComponents","context","match","components","endsWith","hour","get","assign","PM","AM"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\it\\parsers\\ITTimeExpressionParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\n\nexport default class ENTimeExpressionParser extends AbstractTimeExpressionParser {\n    constructor(strictMode) {\n        super(strictMode);\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\–|\\\\~|\\\\〜|to|\\\\?)\\\\s*\";\n    }\n\n    primaryPrefix(): string {\n        return \"(?:(?:alle|dalle)\\\\s*)??\";\n    }\n\n    primarySuffix(): string {\n        return \"(?:\\\\s*(?:o\\\\W*in punto|alle\\\\s*sera|in\\\\s*del\\\\s*(?:mattina|pomeriggio)))?(?!/)(?=\\\\W|$)\";\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): null | ParsingComponents {\n        const components = super.extractPrimaryTimeComponents(context, match);\n        if (components) {\n            if (match[0].endsWith(\"sera\")) {\n                const hour = components.get(\"hour\");\n                if (hour >= 6 && hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                    components.assign(\"meridiem\", Meridiem.PM);\n                } else if (hour < 6) {\n                    components.assign(\"meridiem\", Meridiem.AM);\n                }\n            }\n\n            if (match[0].endsWith(\"pomeriggio\")) {\n                components.assign(\"meridiem\", Meridiem.PM);\n                const hour = components.get(\"hour\");\n                if (hour >= 0 && hour <= 6) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                }\n            }\n\n            if (match[0].endsWith(\"mattina\")) {\n                components.assign(\"meridiem\", Meridiem.AM);\n                const hour = components.get(\"hour\");\n                if (hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\"));\n                }\n            }\n        }\n\n        return components;\n    }\n}\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,4BAA4B,QAAQ,yDAAuD;AAEpG,eAAc,MAAOC,sBAAuB,SAAQD,4BAA4B;EAC5EE,YAAYC,UAAU;IAClB,KAAK,CAACA,UAAU,CAAC;EACrB;EAEAC,cAAcA,CAAA;IACV,OAAO,oCAAoC;EAC/C;EAEAC,aAAaA,CAAA;IACT,OAAO,0BAA0B;EACrC;EAEAC,aAAaA,CAAA;IACT,OAAO,2FAA2F;EACtG;EAEAC,4BAA4BA,CAACC,OAAuB,EAAEC,KAAuB;IACzE,MAAMC,UAAU,GAAG,KAAK,CAACH,4BAA4B,CAACC,OAAO,EAAEC,KAAK,CAAC;IACrE,IAAIC,UAAU,EAAE;MACZ,IAAID,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC3B,MAAMC,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;QACnC,IAAID,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,EAAE,EAAE;UACxBF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;UACtDH,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEf,QAAQ,CAACgB,EAAE,CAAC;QAC9C,CAAC,MAAM,IAAIH,IAAI,GAAG,CAAC,EAAE;UACjBF,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEf,QAAQ,CAACiB,EAAE,CAAC;QAC9C;MACJ;MAEA,IAAIP,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,YAAY,CAAC,EAAE;QACjCD,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEf,QAAQ,CAACgB,EAAE,CAAC;QAC1C,MAAMH,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;QACnC,IAAID,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,EAAE;UACxBF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QAC1D;MACJ;MAEA,IAAIJ,KAAK,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC9BD,UAAU,CAACI,MAAM,CAAC,UAAU,EAAEf,QAAQ,CAACiB,EAAE,CAAC;QAC1C,MAAMJ,IAAI,GAAGF,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC;QACnC,IAAID,IAAI,GAAG,EAAE,EAAE;UACXF,UAAU,CAACI,MAAM,CAAC,MAAM,EAAEJ,UAAU,CAACG,GAAG,CAAC,MAAM,CAAC,CAAC;QACrD;MACJ;IACJ;IAEA,OAAOH,UAAU;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}