{"ast":null,"code":"export const EmptyDuration = {\n  day: 0,\n  second: 0,\n  millisecond: 0\n};\nexport function addDuration(ref, duration) {\n  let date = new Date(ref);\n  if (duration[\"y\"]) {\n    duration[\"year\"] = duration[\"y\"];\n    delete duration[\"y\"];\n  }\n  if (duration[\"mo\"]) {\n    duration[\"month\"] = duration[\"mo\"];\n    delete duration[\"mo\"];\n  }\n  if (duration[\"M\"]) {\n    duration[\"month\"] = duration[\"M\"];\n    delete duration[\"M\"];\n  }\n  if (duration[\"w\"]) {\n    duration[\"week\"] = duration[\"w\"];\n    delete duration[\"w\"];\n  }\n  if (duration[\"d\"]) {\n    duration[\"day\"] = duration[\"d\"];\n    delete duration[\"d\"];\n  }\n  if (duration[\"h\"]) {\n    duration[\"hour\"] = duration[\"h\"];\n    delete duration[\"h\"];\n  }\n  if (duration[\"m\"]) {\n    duration[\"minute\"] = duration[\"m\"];\n    delete duration[\"m\"];\n  }\n  if (duration[\"s\"]) {\n    duration[\"second\"] = duration[\"s\"];\n    delete duration[\"s\"];\n  }\n  if (duration[\"ms\"]) {\n    duration[\"millisecond\"] = duration[\"ms\"];\n    delete duration[\"ms\"];\n  }\n  if (\"year\" in duration) {\n    const floor = Math.floor(duration[\"year\"]);\n    date.setFullYear(date.getFullYear() + floor);\n    const remainingFraction = duration[\"year\"] - floor;\n    if (remainingFraction > 0) {\n      duration.month = duration?.month ?? 0;\n      duration.month += remainingFraction * 12;\n    }\n  }\n  if (\"quarter\" in duration) {\n    const floor = Math.floor(duration[\"quarter\"]);\n    date.setMonth(date.getMonth() + floor * 3);\n  }\n  if (\"month\" in duration) {\n    const floor = Math.floor(duration[\"month\"]);\n    date.setMonth(date.getMonth() + floor);\n    const remainingFraction = duration[\"month\"] - floor;\n    if (remainingFraction > 0) {\n      duration.week = duration?.week ?? 0;\n      duration.week += remainingFraction * 4;\n    }\n  }\n  if (\"week\" in duration) {\n    const floor = Math.floor(duration[\"week\"]);\n    date.setDate(date.getDate() + floor * 7);\n    const remainingFraction = duration[\"week\"] - floor;\n    if (remainingFraction > 0) {\n      duration.day = duration?.day ?? 0;\n      duration.day += Math.round(remainingFraction * 7);\n    }\n  }\n  if (\"day\" in duration) {\n    const floor = Math.floor(duration[\"day\"]);\n    date.setDate(date.getDate() + floor);\n    const remainingFraction = duration[\"day\"] - floor;\n    if (remainingFraction > 0) {\n      duration.hour = duration?.hour ?? 0;\n      duration.hour += Math.round(remainingFraction * 24);\n    }\n  }\n  if (\"hour\" in duration) {\n    const floor = Math.floor(duration[\"hour\"]);\n    date.setHours(date.getHours() + floor);\n    const remainingFraction = duration[\"hour\"] - floor;\n    if (remainingFraction > 0) {\n      duration.minute = duration?.minute ?? 0;\n      duration.minute += Math.round(remainingFraction * 60);\n    }\n  }\n  if (\"minute\" in duration) {\n    const floor = Math.floor(duration[\"minute\"]);\n    date.setMinutes(date.getMinutes() + floor);\n    const remainingFraction = duration[\"minute\"] - floor;\n    if (remainingFraction > 0) {\n      duration.second = duration?.second ?? 0;\n      duration.second += Math.round(remainingFraction * 60);\n    }\n  }\n  if (\"second\" in duration) {\n    const floor = Math.floor(duration[\"second\"]);\n    date.setSeconds(date.getSeconds() + floor);\n    const remainingFraction = duration[\"second\"] - floor;\n    if (remainingFraction > 0) {\n      duration.millisecond = duration?.millisecond ?? 0;\n      duration.millisecond += Math.round(remainingFraction * 1000);\n    }\n  }\n  if (\"millisecond\" in duration) {\n    const floor = Math.floor(duration[\"millisecond\"]);\n    date.setMilliseconds(date.getMilliseconds() + floor);\n  }\n  return date;\n}\nexport function reverseDuration(duration) {\n  const reversed = {};\n  for (const key in duration) {\n    reversed[key] = -duration[key];\n  }\n  return reversed;\n}","map":{"version":3,"names":["EmptyDuration","day","second","millisecond","addDuration","ref","duration","date","Date","floor","Math","setFullYear","getFullYear","remainingFraction","month","setMonth","getMonth","week","setDate","getDate","round","hour","setHours","getHours","minute","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","reverseDuration","reversed","key"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\calculation\\duration.ts"],"sourcesContent":["import { Timeunit } from \"../types\";\n\nexport type TimeunitShorten = \"y\" | \"mo\" | \"M\" | \"w\" | \"d\" | \"h\" | \"m\" | \"s\" | \"ms\";\nexport type TimeunitSpecial = \"quarter\";\n\n/**\n * A type represent a directed time duration as a set of values by timeunits.\n * The positive values mean the time duration into the future.\n */\nexport type Duration = { [c in Timeunit | TimeunitSpecial | TimeunitShorten]?: number };\n\n/**\n * An explicit empty duration (not just empty duration object).\n * This is defined as zero day and second.\n */\nexport const EmptyDuration = {\n    day: 0,\n    second: 0,\n    millisecond: 0,\n};\n\n/**\n * Returns the date after adding the given `duration` to `ref`.\n * @param ref\n * @param duration\n */\nexport function addDuration(ref: Date, duration: Duration): Date {\n    let date = new Date(ref);\n\n    // Replace short timeunit keys with full timeunit keys\n    if (duration[\"y\"]) {\n        duration[\"year\"] = duration[\"y\"];\n        delete duration[\"y\"];\n    }\n    if (duration[\"mo\"]) {\n        duration[\"month\"] = duration[\"mo\"];\n        delete duration[\"mo\"];\n    }\n    if (duration[\"M\"]) {\n        duration[\"month\"] = duration[\"M\"];\n        delete duration[\"M\"];\n    }\n    if (duration[\"w\"]) {\n        duration[\"week\"] = duration[\"w\"];\n        delete duration[\"w\"];\n    }\n    if (duration[\"d\"]) {\n        duration[\"day\"] = duration[\"d\"];\n        delete duration[\"d\"];\n    }\n    if (duration[\"h\"]) {\n        duration[\"hour\"] = duration[\"h\"];\n        delete duration[\"h\"];\n    }\n    if (duration[\"m\"]) {\n        duration[\"minute\"] = duration[\"m\"];\n        delete duration[\"m\"];\n    }\n    if (duration[\"s\"]) {\n        duration[\"second\"] = duration[\"s\"];\n        delete duration[\"s\"];\n    }\n    if (duration[\"ms\"]) {\n        duration[\"millisecond\"] = duration[\"ms\"];\n        delete duration[\"ms\"];\n    }\n\n    if (\"year\" in duration) {\n        const floor = Math.floor(duration[\"year\"]);\n        date.setFullYear(date.getFullYear() + floor);\n        const remainingFraction = duration[\"year\"] - floor;\n        if (remainingFraction > 0) {\n            duration.month = duration?.month ?? 0;\n            duration.month += remainingFraction * 12;\n        }\n    }\n    if (\"quarter\" in duration) {\n        const floor = Math.floor(duration[\"quarter\"]);\n        date.setMonth(date.getMonth() + floor * 3);\n    }\n    if (\"month\" in duration) {\n        const floor = Math.floor(duration[\"month\"]);\n        date.setMonth(date.getMonth() + floor);\n        const remainingFraction = duration[\"month\"] - floor;\n        if (remainingFraction > 0) {\n            duration.week = duration?.week ?? 0;\n            duration.week += remainingFraction * 4;\n        }\n    }\n    if (\"week\" in duration) {\n        const floor = Math.floor(duration[\"week\"]);\n        date.setDate(date.getDate() + floor * 7);\n        const remainingFraction = duration[\"week\"] - floor;\n        if (remainingFraction > 0) {\n            duration.day = duration?.day ?? 0;\n            duration.day += Math.round(remainingFraction * 7);\n        }\n    }\n    if (\"day\" in duration) {\n        const floor = Math.floor(duration[\"day\"]);\n        date.setDate(date.getDate() + floor);\n        const remainingFraction = duration[\"day\"] - floor;\n        if (remainingFraction > 0) {\n            duration.hour = duration?.hour ?? 0;\n            duration.hour += Math.round(remainingFraction * 24);\n        }\n    }\n    if (\"hour\" in duration) {\n        const floor = Math.floor(duration[\"hour\"]);\n        date.setHours(date.getHours() + floor);\n        const remainingFraction = duration[\"hour\"] - floor;\n        if (remainingFraction > 0) {\n            duration.minute = duration?.minute ?? 0;\n            duration.minute += Math.round(remainingFraction * 60);\n        }\n    }\n    if (\"minute\" in duration) {\n        const floor = Math.floor(duration[\"minute\"]);\n        date.setMinutes(date.getMinutes() + floor);\n        const remainingFraction = duration[\"minute\"] - floor;\n        if (remainingFraction > 0) {\n            duration.second = duration?.second ?? 0;\n            duration.second += Math.round(remainingFraction * 60);\n        }\n    }\n    if (\"second\" in duration) {\n        const floor = Math.floor(duration[\"second\"]);\n        date.setSeconds(date.getSeconds() + floor);\n        const remainingFraction = duration[\"second\"] - floor;\n        if (remainingFraction > 0) {\n            duration.millisecond = duration?.millisecond ?? 0;\n            duration.millisecond += Math.round(remainingFraction * 1000);\n        }\n    }\n    if (\"millisecond\" in duration) {\n        const floor = Math.floor(duration[\"millisecond\"]);\n        date.setMilliseconds(date.getMilliseconds() + floor);\n    }\n    return date;\n}\n\n/**\n * Return the reversed duration (e.g. back into the past, instead of future)\n * @param duration\n */\nexport function reverseDuration(duration: Duration): Duration {\n    const reversed = {};\n    for (const key in duration) {\n        // noinspection JSUnfilteredForInLoop\n        reversed[key] = -duration[key];\n    }\n    return reversed as Duration;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}