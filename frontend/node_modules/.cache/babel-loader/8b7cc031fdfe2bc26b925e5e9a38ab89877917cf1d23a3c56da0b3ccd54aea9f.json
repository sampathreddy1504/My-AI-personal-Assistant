{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates.js\";\nimport * as references from \"../../../common/casualReferences.js\";\nconst PATTERN = new RegExp(`(nu|idag|imorgon|övermorgon|igår|förrgår|i\\\\s*förrgår)` + `(?:\\\\s*(?:på\\\\s*)?(morgonen?|förmiddagen?|middagen?|eftermiddagen?|kvällen?|natten?|midnatt))?` + `(?=\\\\W|$)`, \"i\");\nconst DATE_GROUP = 1;\nconst TIME_GROUP = 2;\nexport default class SVCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern(context) {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const targetDate = context.refDate;\n    const dateKeyword = (match[DATE_GROUP] || \"\").toLowerCase();\n    const timeKeyword = (match[TIME_GROUP] || \"\").toLowerCase();\n    let component = context.createParsingComponents();\n    switch (dateKeyword) {\n      case \"nu\":\n        component = references.now(context.reference);\n        break;\n      case \"idag\":\n        component = references.today(context.reference);\n        break;\n      case \"imorgon\":\n      case \"imorn\":\n        const nextDay = new Date(targetDate.getTime());\n        nextDay.setDate(nextDay.getDate() + 1);\n        assignSimilarDate(component, nextDay);\n        implySimilarTime(component, nextDay);\n        break;\n      case \"igår\":\n        const previousDay = new Date(targetDate.getTime());\n        previousDay.setDate(previousDay.getDate() - 1);\n        assignSimilarDate(component, previousDay);\n        implySimilarTime(component, previousDay);\n        break;\n      case \"förrgår\":\n      case \"i förrgår\":\n        const twoDaysAgo = new Date(targetDate.getTime());\n        twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\n        assignSimilarDate(component, twoDaysAgo);\n        implySimilarTime(component, twoDaysAgo);\n        break;\n    }\n    switch (timeKeyword) {\n      case \"morgon\":\n      case \"morgonen\":\n        component.imply(\"hour\", 6);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"millisecond\", 0);\n        break;\n      case \"förmiddag\":\n      case \"förmiddagen\":\n        component.imply(\"hour\", 9);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"millisecond\", 0);\n        break;\n      case \"middag\":\n      case \"middagen\":\n        component.imply(\"hour\", 12);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"millisecond\", 0);\n        break;\n      case \"eftermiddag\":\n      case \"eftermiddagen\":\n        component.imply(\"hour\", 15);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"millisecond\", 0);\n        break;\n      case \"kväll\":\n      case \"kvällen\":\n        component.imply(\"hour\", 20);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"millisecond\", 0);\n        break;\n      case \"natt\":\n      case \"natten\":\n      case \"midnatt\":\n        if (timeKeyword === \"midnatt\") {\n          component.imply(\"hour\", 0);\n        } else {\n          component.imply(\"hour\", 2);\n        }\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"millisecond\", 0);\n        break;\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","assignSimilarDate","implySimilarTime","references","PATTERN","RegExp","DATE_GROUP","TIME_GROUP","SVCasualDateParser","innerPattern","context","innerExtract","match","targetDate","refDate","dateKeyword","toLowerCase","timeKeyword","component","createParsingComponents","now","reference","today","nextDay","Date","getTime","setDate","getDate","previousDay","twoDaysAgo","imply"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\sv\\parsers\\SVCasualDateParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates\";\nimport * as references from \"../../../common/casualReferences\";\n\nconst PATTERN = new RegExp(\n    `(nu|idag|imorgon|övermorgon|igår|förrgår|i\\\\s*förrgår)` +\n        `(?:\\\\s*(?:på\\\\s*)?(morgonen?|förmiddagen?|middagen?|eftermiddagen?|kvällen?|natten?|midnatt))?` +\n        `(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst TIME_GROUP = 2;\n\nexport default class SVCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const targetDate = context.refDate;\n        const dateKeyword = (match[DATE_GROUP] || \"\").toLowerCase();\n        const timeKeyword = (match[TIME_GROUP] || \"\").toLowerCase();\n\n        let component = context.createParsingComponents();\n        switch (dateKeyword) {\n            case \"nu\":\n                component = references.now(context.reference);\n                break;\n\n            case \"idag\":\n                component = references.today(context.reference);\n                break;\n\n            case \"imorgon\":\n            case \"imorn\":\n                const nextDay = new Date(targetDate.getTime());\n                nextDay.setDate(nextDay.getDate() + 1);\n                assignSimilarDate(component, nextDay);\n                implySimilarTime(component, nextDay);\n                break;\n\n            case \"igår\":\n                const previousDay = new Date(targetDate.getTime());\n                previousDay.setDate(previousDay.getDate() - 1);\n                assignSimilarDate(component, previousDay);\n                implySimilarTime(component, previousDay);\n                break;\n\n            case \"förrgår\":\n            case \"i förrgår\":\n                const twoDaysAgo = new Date(targetDate.getTime());\n                twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\n                assignSimilarDate(component, twoDaysAgo);\n                implySimilarTime(component, twoDaysAgo);\n                break;\n        }\n\n        switch (timeKeyword) {\n            case \"morgon\":\n            case \"morgonen\":\n                component.imply(\"hour\", 6);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"millisecond\", 0);\n                break;\n\n            case \"förmiddag\":\n            case \"förmiddagen\":\n                component.imply(\"hour\", 9);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"millisecond\", 0);\n                break;\n\n            case \"middag\":\n            case \"middagen\":\n                component.imply(\"hour\", 12);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"millisecond\", 0);\n                break;\n\n            case \"eftermiddag\":\n            case \"eftermiddagen\":\n                component.imply(\"hour\", 15);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"millisecond\", 0);\n                break;\n\n            case \"kväll\":\n            case \"kvällen\":\n                component.imply(\"hour\", 20);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"millisecond\", 0);\n                break;\n\n            case \"natt\":\n            case \"natten\":\n            case \"midnatt\":\n                if (timeKeyword === \"midnatt\") {\n                    component.imply(\"hour\", 0);\n                } else {\n                    component.imply(\"hour\", 2);\n                }\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"millisecond\", 0);\n                break;\n        }\n\n        return component;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}