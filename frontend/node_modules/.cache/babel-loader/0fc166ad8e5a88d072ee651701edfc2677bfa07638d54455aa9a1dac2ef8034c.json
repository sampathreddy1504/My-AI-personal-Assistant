{"ast":null,"code":"import { Meridiem } from \"../../../index.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates.js\";\nconst PATTERN = /(?:questo|questa)?\\s{0,3}(mattina|pomeriggio|sera|notte|mezzanotte|mezzogiorno)(?=\\W|$)/i;\nexport default class ITCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const targetDate = context.refDate;\n    const component = context.createParsingComponents();\n    switch (match[1].toLowerCase()) {\n      case \"pomeriggio\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 15);\n        break;\n      case \"sera\":\n      case \"notte\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 20);\n        break;\n      case \"mezzanotte\":\n        const nextDay = new Date(targetDate.getTime());\n        nextDay.setDate(nextDay.getDate() + 1);\n        assignSimilarDate(component, nextDay);\n        implySimilarTime(component, nextDay);\n        component.imply(\"hour\", 0);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        break;\n      case \"mattina\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 6);\n        break;\n      case \"mezzogiorno\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 12);\n        break;\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["Meridiem","AbstractParserWithWordBoundaryChecking","assignSimilarDate","implySimilarTime","PATTERN","ITCasualTimeParser","innerPattern","innerExtract","context","match","targetDate","refDate","component","createParsingComponents","toLowerCase","imply","PM","nextDay","Date","getTime","setDate","getDate","AM"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\it\\parsers\\ITCasualTimeParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates\";\n\nconst PATTERN = /(?:questo|questa)?\\s{0,3}(mattina|pomeriggio|sera|notte|mezzanotte|mezzogiorno)(?=\\W|$)/i;\n\nexport default class ITCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const targetDate = context.refDate;\n        const component = context.createParsingComponents();\n\n        switch (match[1].toLowerCase()) {\n            case \"pomeriggio\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"sera\":\n            case \"notte\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 20);\n                break;\n\n            case \"mezzanotte\":\n                const nextDay = new Date(targetDate.getTime());\n                nextDay.setDate(nextDay.getDate() + 1);\n                assignSimilarDate(component, nextDay);\n                implySimilarTime(component, nextDay);\n                component.imply(\"hour\", 0);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                break;\n\n            case \"mattina\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n\n            case \"mezzogiorno\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n        }\n\n        return component;\n    }\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,yBAAuB;AAE3E,MAAMC,OAAO,GAAG,0FAA0F;AAE1G,eAAc,MAAOC,kBAAmB,SAAQJ,sCAAsC;EAClFK,YAAYA,CAAA;IACR,OAAOF,OAAO;EAClB;EAEAG,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,UAAU,GAAGF,OAAO,CAACG,OAAO;IAClC,MAAMC,SAAS,GAAGJ,OAAO,CAACK,uBAAuB,EAAE;IAEnD,QAAQJ,KAAK,CAAC,CAAC,CAAC,CAACK,WAAW,EAAE;MAC1B,KAAK,YAAY;QACbF,SAAS,CAACG,KAAK,CAAC,UAAU,EAAEf,QAAQ,CAACgB,EAAE,CAAC;QACxCJ,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MAEJ,KAAK,MAAM;MACX,KAAK,OAAO;QACRH,SAAS,CAACG,KAAK,CAAC,UAAU,EAAEf,QAAQ,CAACgB,EAAE,CAAC;QACxCJ,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MAEJ,KAAK,YAAY;QACb,MAAME,OAAO,GAAG,IAAIC,IAAI,CAACR,UAAU,CAACS,OAAO,EAAE,CAAC;QAC9CF,OAAO,CAACG,OAAO,CAACH,OAAO,CAACI,OAAO,EAAE,GAAG,CAAC,CAAC;QACtCnB,iBAAiB,CAACU,SAAS,EAAEK,OAAO,CAAC;QACrCd,gBAAgB,CAACS,SAAS,EAAEK,OAAO,CAAC;QACpCL,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1BH,SAAS,CAACG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5BH,SAAS,CAACG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5B;MAEJ,KAAK,SAAS;QACVH,SAAS,CAACG,KAAK,CAAC,UAAU,EAAEf,QAAQ,CAACsB,EAAE,CAAC;QACxCV,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1B;MAEJ,KAAK,aAAa;QACdH,SAAS,CAACG,KAAK,CAAC,UAAU,EAAEf,QAAQ,CAACsB,EAAE,CAAC;QACxCV,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;IACR;IAEA,OAAOH,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}