{"ast":null,"code":"import { TIME_UNIT_DICTIONARY } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { matchAnyPattern } from \"../../../utils/pattern.js\";\nconst PATTERN = new RegExp(`(dit|deze|(?:aan)?komend|volgend|afgelopen|vorig)e?\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})(?=\\\\s*)` + \"(?=\\\\W|$)\", \"i\");\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\nexport default class NLRelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n    const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n    const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n    if (modifier == \"volgend\" || modifier == \"komend\" || modifier == \"aankomend\") {\n      const timeUnits = {};\n      timeUnits[timeunit] = 1;\n      return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n    if (modifier == \"afgelopen\" || modifier == \"vorig\") {\n      const timeUnits = {};\n      timeUnits[timeunit] = -1;\n      return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n    const components = context.createParsingComponents();\n    let date = new Date(context.reference.instant.getTime());\n    if (unitWord.match(/week/i)) {\n      date.setDate(date.getDate() - date.getDay());\n      components.imply(\"day\", date.getDate());\n      components.imply(\"month\", date.getMonth() + 1);\n      components.imply(\"year\", date.getFullYear());\n    } else if (unitWord.match(/maand/i)) {\n      date.setDate(1);\n      components.imply(\"day\", date.getDate());\n      components.assign(\"year\", date.getFullYear());\n      components.assign(\"month\", date.getMonth() + 1);\n    } else if (unitWord.match(/jaar/i)) {\n      date.setDate(1);\n      date.setMonth(0);\n      components.imply(\"day\", date.getDate());\n      components.imply(\"month\", date.getMonth() + 1);\n      components.assign(\"year\", date.getFullYear());\n    }\n    return components;\n  }\n}","map":{"version":3,"names":["TIME_UNIT_DICTIONARY","ParsingComponents","AbstractParserWithWordBoundaryChecking","matchAnyPattern","PATTERN","RegExp","MODIFIER_WORD_GROUP","RELATIVE_WORD_GROUP","NLRelativeDateFormatParser","innerPattern","innerExtract","context","match","modifier","toLowerCase","unitWord","timeunit","timeUnits","createRelativeFromReference","reference","components","createParsingComponents","date","Date","instant","getTime","setDate","getDate","getDay","imply","getMonth","getFullYear","assign","setMonth"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\nl\\parsers\\NLRelativeDateFormatParser.ts"],"sourcesContent":["import { TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nconst PATTERN = new RegExp(\n    `(dit|deze|(?:aan)?komend|volgend|afgelopen|vorig)e?\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})(?=\\\\s*)` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\n\nexport default class NLRelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n\n        if (modifier == \"volgend\" || modifier == \"komend\" || modifier == \"aankomend\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        if (modifier == \"afgelopen\" || modifier == \"vorig\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        const components = context.createParsingComponents();\n        let date = new Date(context.reference.instant.getTime());\n\n        // This week\n        if (unitWord.match(/week/i)) {\n            date.setDate(date.getDate() - date.getDay());\n            components.imply(\"day\", date.getDate());\n            components.imply(\"month\", date.getMonth() + 1);\n            components.imply(\"year\", date.getFullYear());\n        }\n\n        // This month\n        else if (unitWord.match(/maand/i)) {\n            date.setDate(1);\n            components.imply(\"day\", date.getDate());\n            components.assign(\"year\", date.getFullYear());\n            components.assign(\"month\", date.getMonth() + 1);\n        }\n\n        // This year\n        else if (unitWord.match(/jaar/i)) {\n            date.setDate(1);\n            date.setMonth(0);\n            components.imply(\"day\", date.getDate());\n            components.imply(\"month\", date.getMonth() + 1);\n            components.assign(\"year\", date.getFullYear());\n        }\n\n        return components;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}