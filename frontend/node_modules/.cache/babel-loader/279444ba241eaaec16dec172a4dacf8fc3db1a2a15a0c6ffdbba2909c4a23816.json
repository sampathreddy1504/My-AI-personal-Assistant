{"ast":null,"code":"import { Meridiem } from \"../../../types.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { implySimilarTime } from \"../../../utils/dates.js\";\nexport default class DECasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern(context) {\n    return /(diesen)?\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht)(?=\\W|$)/i;\n  }\n  innerExtract(context, match) {\n    const targetDate = context.refDate;\n    const timeKeywordPattern = match[2].toLowerCase();\n    const component = context.createParsingComponents();\n    implySimilarTime(component, targetDate);\n    return DECasualTimeParser.extractTimeComponents(component, timeKeywordPattern);\n  }\n  static extractTimeComponents(component, timeKeywordPattern) {\n    switch (timeKeywordPattern) {\n      case \"morgen\":\n        component.imply(\"hour\", 6);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"meridiem\", Meridiem.AM);\n        break;\n      case \"vormittag\":\n        component.imply(\"hour\", 9);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"meridiem\", Meridiem.AM);\n        break;\n      case \"mittag\":\n      case \"mittags\":\n        component.imply(\"hour\", 12);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"meridiem\", Meridiem.AM);\n        break;\n      case \"nachmittag\":\n        component.imply(\"hour\", 15);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"meridiem\", Meridiem.PM);\n        break;\n      case \"abend\":\n        component.imply(\"hour\", 18);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"meridiem\", Meridiem.PM);\n        break;\n      case \"nacht\":\n        component.imply(\"hour\", 22);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"meridiem\", Meridiem.PM);\n        break;\n      case \"mitternacht\":\n        if (component.get(\"hour\") > 1) {\n          component.addDurationAsImplied({\n            \"day\": 1\n          });\n        }\n        component.imply(\"hour\", 0);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        component.imply(\"meridiem\", Meridiem.AM);\n        break;\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["Meridiem","AbstractParserWithWordBoundaryChecking","implySimilarTime","DECasualTimeParser","innerPattern","context","innerExtract","match","targetDate","refDate","timeKeywordPattern","toLowerCase","component","createParsingComponents","extractTimeComponents","imply","AM","PM","get","addDurationAsImplied"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\de\\parsers\\DECasualTimeParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { Meridiem } from \"../../../types\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { implySimilarTime } from \"../../../utils/dates\";\n\nexport default class DECasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(diesen)?\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const targetDate = context.refDate;\n        const timeKeywordPattern = match[2].toLowerCase();\n        const component = context.createParsingComponents();\n        implySimilarTime(component, targetDate);\n        return DECasualTimeParser.extractTimeComponents(component, timeKeywordPattern);\n    }\n\n    static extractTimeComponents(component: ParsingComponents, timeKeywordPattern: string): ParsingComponents {\n        switch (timeKeywordPattern) {\n            case \"morgen\":\n                component.imply(\"hour\", 6);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n\n            case \"vormittag\":\n                component.imply(\"hour\", 9);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n\n            case \"mittag\":\n            case \"mittags\":\n                component.imply(\"hour\", 12);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n\n            case \"nachmittag\":\n                component.imply(\"hour\", 15);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.PM);\n                break;\n\n            case \"abend\":\n                component.imply(\"hour\", 18);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.PM);\n                break;\n\n            case \"nacht\":\n                component.imply(\"hour\", 22);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.PM);\n                break;\n\n            case \"mitternacht\":\n                if (component.get(\"hour\") > 1) {\n                    component.addDurationAsImplied({ \"day\": 1 });\n                }\n\n                component.imply(\"hour\", 0);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                component.imply(\"meridiem\", Meridiem.AM);\n                break;\n        }\n        return component;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}