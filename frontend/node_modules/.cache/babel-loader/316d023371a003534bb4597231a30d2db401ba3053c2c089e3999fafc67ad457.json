{"ast":null,"code":"import { Meridiem } from \"../../../types.js\";\nimport * as references from \"../../../common/casualReferences.js\";\nconst PATTERN = /今日|きょう|本日|ほんじつ|昨日|きのう|明日|あした|今夜|こんや|今夕|こんゆう|今晩|こんばん|今朝|けさ/i;\nfunction normalizeTextToKanji(text) {\n  switch (text) {\n    case \"きょう\":\n      return \"今日\";\n    case \"ほんじつ\":\n      return \"本日\";\n    case \"きのう\":\n      return \"昨日\";\n    case \"あした\":\n      return \"明日\";\n    case \"こんや\":\n      return \"今夜\";\n    case \"こんゆう\":\n      return \"今夕\";\n    case \"こんばん\":\n      return \"今晩\";\n    case \"けさ\":\n      return \"今朝\";\n    default:\n      return text;\n  }\n}\nexport default class JPCasualDateParser {\n  pattern() {\n    return PATTERN;\n  }\n  extract(context, match) {\n    const text = normalizeTextToKanji(match[0]);\n    const components = context.createParsingComponents();\n    switch (text) {\n      case \"昨日\":\n        return references.yesterday(context.reference);\n      case \"明日\":\n        return references.tomorrow(context.reference);\n      case \"本日\":\n      case \"今日\":\n        return references.today(context.reference);\n    }\n    if (text == \"今夜\" || text == \"今夕\" || text == \"今晩\") {\n      components.imply(\"hour\", 22);\n      components.assign(\"meridiem\", Meridiem.PM);\n    } else if (text.match(\"今朝\")) {\n      components.imply(\"hour\", 6);\n      components.assign(\"meridiem\", Meridiem.AM);\n    }\n    const date = context.refDate;\n    components.assign(\"day\", date.getDate());\n    components.assign(\"month\", date.getMonth() + 1);\n    components.assign(\"year\", date.getFullYear());\n    return components;\n  }\n}","map":{"version":3,"names":["Meridiem","references","PATTERN","normalizeTextToKanji","text","JPCasualDateParser","pattern","extract","context","match","components","createParsingComponents","yesterday","reference","tomorrow","today","imply","assign","PM","AM","date","refDate","getDate","getMonth","getFullYear"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\ja\\parsers\\JPCasualDateParser.ts"],"sourcesContent":["import { Parser, ParsingContext } from \"../../../chrono\";\nimport { Meridiem } from \"../../../types\";\nimport * as references from \"../../../common/casualReferences\";\n\nconst PATTERN = /今日|きょう|本日|ほんじつ|昨日|きのう|明日|あした|今夜|こんや|今夕|こんゆう|今晩|こんばん|今朝|けさ/i;\n\nfunction normalizeTextToKanji(text: string) {\n    switch (text) {\n        case \"きょう\":\n            return \"今日\";\n        case \"ほんじつ\":\n            return \"本日\";\n        case \"きのう\":\n            return \"昨日\";\n        case \"あした\":\n            return \"明日\";\n        case \"こんや\":\n            return \"今夜\";\n        case \"こんゆう\":\n            return \"今夕\";\n        case \"こんばん\":\n            return \"今晩\";\n        case \"けさ\":\n            return \"今朝\";\n        default:\n            return text;\n    }\n}\n\nexport default class JPCasualDateParser implements Parser {\n    pattern() {\n        return PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray) {\n        const text = normalizeTextToKanji(match[0]);\n\n        const components = context.createParsingComponents();\n\n        switch (text) {\n            case \"昨日\":\n                return references.yesterday(context.reference);\n\n            case \"明日\":\n                return references.tomorrow(context.reference);\n\n            case \"本日\":\n            case \"今日\":\n                return references.today(context.reference);\n        }\n\n        if (text == \"今夜\" || text == \"今夕\" || text == \"今晩\") {\n            components.imply(\"hour\", 22);\n            components.assign(\"meridiem\", Meridiem.PM);\n        } else if (text.match(\"今朝\")) {\n            components.imply(\"hour\", 6);\n            components.assign(\"meridiem\", Meridiem.AM);\n        }\n\n        const date = context.refDate;\n        components.assign(\"day\", date.getDate());\n        components.assign(\"month\", date.getMonth() + 1);\n        components.assign(\"year\", date.getFullYear());\n        return components;\n    }\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,mBAAiB;AAC1C,OAAO,KAAKC,UAAU,MAAM,qCAAmC;AAE/D,MAAMC,OAAO,GAAG,4DAA4D;AAE5E,SAASC,oBAAoBA,CAACC,IAAY;EACtC,QAAQA,IAAI;IACR,KAAK,KAAK;MACN,OAAO,IAAI;IACf,KAAK,MAAM;MACP,OAAO,IAAI;IACf,KAAK,KAAK;MACN,OAAO,IAAI;IACf,KAAK,KAAK;MACN,OAAO,IAAI;IACf,KAAK,KAAK;MACN,OAAO,IAAI;IACf,KAAK,MAAM;MACP,OAAO,IAAI;IACf,KAAK,MAAM;MACP,OAAO,IAAI;IACf,KAAK,IAAI;MACL,OAAO,IAAI;IACf;MACI,OAAOA,IAAI;EACnB;AACJ;AAEA,eAAc,MAAOC,kBAAkB;EACnCC,OAAOA,CAAA;IACH,OAAOJ,OAAO;EAClB;EAEAK,OAAOA,CAACC,OAAuB,EAAEC,KAAuB;IACpD,MAAML,IAAI,GAAGD,oBAAoB,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;IAE3C,MAAMC,UAAU,GAAGF,OAAO,CAACG,uBAAuB,EAAE;IAEpD,QAAQP,IAAI;MACR,KAAK,IAAI;QACL,OAAOH,UAAU,CAACW,SAAS,CAACJ,OAAO,CAACK,SAAS,CAAC;MAElD,KAAK,IAAI;QACL,OAAOZ,UAAU,CAACa,QAAQ,CAACN,OAAO,CAACK,SAAS,CAAC;MAEjD,KAAK,IAAI;MACT,KAAK,IAAI;QACL,OAAOZ,UAAU,CAACc,KAAK,CAACP,OAAO,CAACK,SAAS,CAAC;IAClD;IAEA,IAAIT,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI,EAAE;MAC9CM,UAAU,CAACM,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;MAC5BN,UAAU,CAACO,MAAM,CAAC,UAAU,EAAEjB,QAAQ,CAACkB,EAAE,CAAC;IAC9C,CAAC,MAAM,IAAId,IAAI,CAACK,KAAK,CAAC,IAAI,CAAC,EAAE;MACzBC,UAAU,CAACM,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;MAC3BN,UAAU,CAACO,MAAM,CAAC,UAAU,EAAEjB,QAAQ,CAACmB,EAAE,CAAC;IAC9C;IAEA,MAAMC,IAAI,GAAGZ,OAAO,CAACa,OAAO;IAC5BX,UAAU,CAACO,MAAM,CAAC,KAAK,EAAEG,IAAI,CAACE,OAAO,EAAE,CAAC;IACxCZ,UAAU,CAACO,MAAM,CAAC,OAAO,EAAEG,IAAI,CAACG,QAAQ,EAAE,GAAG,CAAC,CAAC;IAC/Cb,UAAU,CAACO,MAAM,CAAC,MAAM,EAAEG,IAAI,CAACI,WAAW,EAAE,CAAC;IAC7C,OAAOd,UAAU;EACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}