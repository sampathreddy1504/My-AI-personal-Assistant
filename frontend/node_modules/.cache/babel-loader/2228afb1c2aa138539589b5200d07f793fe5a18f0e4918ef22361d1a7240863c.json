{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary.js\";\nconst NOW_GROUP = 1;\nconst DAY_GROUP_1 = 2;\nconst TIME_GROUP_1 = 3;\nconst TIME_GROUP_2 = 4;\nconst DAY_GROUP_3 = 5;\nconst TIME_GROUP_3 = 6;\nexport default class ZHHantCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern(context) {\n    return new RegExp(\"(而家|立(?:刻|即)|即刻)|\" + \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|\" + \"(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|\" + \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)\" + \"(?:[\\\\s|,|，]*)\" + \"(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?\", \"i\");\n  }\n  innerExtract(context, match) {\n    const index = match.index;\n    const result = context.createParsingResult(index, match[0]);\n    const refDate = context.refDate;\n    let date = new Date(refDate.getTime());\n    if (match[NOW_GROUP]) {\n      result.start.imply(\"hour\", refDate.getHours());\n      result.start.imply(\"minute\", refDate.getMinutes());\n      result.start.imply(\"second\", refDate.getSeconds());\n      result.start.imply(\"millisecond\", refDate.getMilliseconds());\n    } else if (match[DAY_GROUP_1]) {\n      const day1 = match[DAY_GROUP_1];\n      const time1 = match[TIME_GROUP_1];\n      if (day1 == \"明\" || day1 == \"聽\") {\n        if (refDate.getHours() > 1) {\n          date.setDate(date.getDate() + 1);\n        }\n      } else if (day1 == \"昨\" || day1 == \"尋\" || day1 == \"琴\") {\n        date.setDate(date.getDate() - 1);\n      } else if (day1 == \"前\") {\n        date.setDate(date.getDate() - 2);\n      } else if (day1 == \"大前\") {\n        date.setDate(date.getDate() - 3);\n      } else if (day1 == \"後\") {\n        date.setDate(date.getDate() + 2);\n      } else if (day1 == \"大後\") {\n        date.setDate(date.getDate() + 3);\n      }\n      if (time1 == \"早\" || time1 == \"朝\") {\n        result.start.imply(\"hour\", 6);\n      } else if (time1 == \"晚\") {\n        result.start.imply(\"hour\", 22);\n        result.start.imply(\"meridiem\", 1);\n      }\n    } else if (match[TIME_GROUP_2]) {\n      const timeString2 = match[TIME_GROUP_2];\n      const time2 = timeString2[0];\n      if (time2 == \"早\" || time2 == \"朝\" || time2 == \"上\") {\n        result.start.imply(\"hour\", 6);\n      } else if (time2 == \"下\" || time2 == \"晏\") {\n        result.start.imply(\"hour\", 15);\n        result.start.imply(\"meridiem\", 1);\n      } else if (time2 == \"中\") {\n        result.start.imply(\"hour\", 12);\n        result.start.imply(\"meridiem\", 1);\n      } else if (time2 == \"夜\" || time2 == \"晚\") {\n        result.start.imply(\"hour\", 22);\n        result.start.imply(\"meridiem\", 1);\n      } else if (time2 == \"凌\") {\n        result.start.imply(\"hour\", 0);\n      }\n    } else if (match[DAY_GROUP_3]) {\n      const day3 = match[DAY_GROUP_3];\n      if (day3 == \"明\" || day3 == \"聽\") {\n        if (refDate.getHours() > 1) {\n          date.setDate(date.getDate() + 1);\n        }\n      } else if (day3 == \"昨\" || day3 == \"尋\" || day3 == \"琴\") {\n        date.setDate(date.getDate() - 1);\n      } else if (day3 == \"前\") {\n        date.setDate(date.getDate() - 2);\n      } else if (day3 == \"大前\") {\n        date.setDate(date.getDate() - 3);\n      } else if (day3 == \"後\") {\n        date.setDate(date.getDate() + 2);\n      } else if (day3 == \"大後\") {\n        date.setDate(date.getDate() + 3);\n      }\n      const timeString3 = match[TIME_GROUP_3];\n      if (timeString3) {\n        const time3 = timeString3[0];\n        if (time3 == \"早\" || time3 == \"朝\" || time3 == \"上\") {\n          result.start.imply(\"hour\", 6);\n        } else if (time3 == \"下\" || time3 == \"晏\") {\n          result.start.imply(\"hour\", 15);\n          result.start.imply(\"meridiem\", 1);\n        } else if (time3 == \"中\") {\n          result.start.imply(\"hour\", 12);\n          result.start.imply(\"meridiem\", 1);\n        } else if (time3 == \"夜\" || time3 == \"晚\") {\n          result.start.imply(\"hour\", 22);\n          result.start.imply(\"meridiem\", 1);\n        } else if (time3 == \"凌\") {\n          result.start.imply(\"hour\", 0);\n        }\n      }\n    }\n    result.start.assign(\"day\", date.getDate());\n    result.start.assign(\"month\", date.getMonth() + 1);\n    result.start.assign(\"year\", date.getFullYear());\n    return result;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","NOW_GROUP","DAY_GROUP_1","TIME_GROUP_1","TIME_GROUP_2","DAY_GROUP_3","TIME_GROUP_3","ZHHantCasualDateParser","innerPattern","context","RegExp","innerExtract","match","index","result","createParsingResult","refDate","date","Date","getTime","start","imply","getHours","getMinutes","getSeconds","getMilliseconds","day1","time1","setDate","getDate","timeString2","time2","day3","timeString3","time3","assign","getMonth","getFullYear"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\zh\\hant\\parsers\\ZHHantCasualDateParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingComponents, ParsingResult } from \"../../../../results\";\n\nconst NOW_GROUP = 1;\nconst DAY_GROUP_1 = 2;\nconst TIME_GROUP_1 = 3;\nconst TIME_GROUP_2 = 4;\nconst DAY_GROUP_3 = 5;\nconst TIME_GROUP_3 = 6;\n\nexport default class ZHHantCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return new RegExp(\n            \"(而家|立(?:刻|即)|即刻)|\" +\n                \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|\" +\n                \"(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|\" +\n                \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)\" +\n                \"(?:[\\\\s|,|，]*)\" +\n                \"(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?\",\n            \"i\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const index = match.index;\n        const result = context.createParsingResult(index, match[0]);\n\n        const refDate = context.refDate;\n        let date = new Date(refDate.getTime());\n\n        if (match[NOW_GROUP]) {\n            result.start.imply(\"hour\", refDate.getHours());\n            result.start.imply(\"minute\", refDate.getMinutes());\n            result.start.imply(\"second\", refDate.getSeconds());\n            result.start.imply(\"millisecond\", refDate.getMilliseconds());\n        } else if (match[DAY_GROUP_1]) {\n            const day1 = match[DAY_GROUP_1];\n            const time1 = match[TIME_GROUP_1];\n\n            if (day1 == \"明\" || day1 == \"聽\") {\n                // Check not \"Tomorrow\" on late night\n                if (refDate.getHours() > 1) {\n                    date.setDate(date.getDate() + 1);\n                }\n            } else if (day1 == \"昨\" || day1 == \"尋\" || day1 == \"琴\") {\n                date.setDate(date.getDate() - 1);\n            } else if (day1 == \"前\") {\n                date.setDate(date.getDate() - 2);\n            } else if (day1 == \"大前\") {\n                date.setDate(date.getDate() - 3);\n            } else if (day1 == \"後\") {\n                date.setDate(date.getDate() + 2);\n            } else if (day1 == \"大後\") {\n                date.setDate(date.getDate() + 3);\n            }\n\n            if (time1 == \"早\" || time1 == \"朝\") {\n                result.start.imply(\"hour\", 6);\n            } else if (time1 == \"晚\") {\n                result.start.imply(\"hour\", 22);\n                result.start.imply(\"meridiem\", 1);\n            }\n        } else if (match[TIME_GROUP_2]) {\n            const timeString2 = match[TIME_GROUP_2];\n            const time2 = timeString2[0];\n            if (time2 == \"早\" || time2 == \"朝\" || time2 == \"上\") {\n                result.start.imply(\"hour\", 6);\n            } else if (time2 == \"下\" || time2 == \"晏\") {\n                result.start.imply(\"hour\", 15);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"中\") {\n                result.start.imply(\"hour\", 12);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"夜\" || time2 == \"晚\") {\n                result.start.imply(\"hour\", 22);\n                result.start.imply(\"meridiem\", 1);\n            } else if (time2 == \"凌\") {\n                result.start.imply(\"hour\", 0);\n            }\n        } else if (match[DAY_GROUP_3]) {\n            const day3 = match[DAY_GROUP_3];\n\n            if (day3 == \"明\" || day3 == \"聽\") {\n                // Check not \"Tomorrow\" on late night\n                if (refDate.getHours() > 1) {\n                    date.setDate(date.getDate() + 1);\n                }\n            } else if (day3 == \"昨\" || day3 == \"尋\" || day3 == \"琴\") {\n                date.setDate(date.getDate() - 1);\n            } else if (day3 == \"前\") {\n                date.setDate(date.getDate() - 2);\n            } else if (day3 == \"大前\") {\n                date.setDate(date.getDate() - 3);\n            } else if (day3 == \"後\") {\n                date.setDate(date.getDate() + 2);\n            } else if (day3 == \"大後\") {\n                date.setDate(date.getDate() + 3);\n            }\n\n            const timeString3 = match[TIME_GROUP_3];\n            if (timeString3) {\n                const time3 = timeString3[0];\n                if (time3 == \"早\" || time3 == \"朝\" || time3 == \"上\") {\n                    result.start.imply(\"hour\", 6);\n                } else if (time3 == \"下\" || time3 == \"晏\") {\n                    result.start.imply(\"hour\", 15);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"中\") {\n                    result.start.imply(\"hour\", 12);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"夜\" || time3 == \"晚\") {\n                    result.start.imply(\"hour\", 22);\n                    result.start.imply(\"meridiem\", 1);\n                } else if (time3 == \"凌\") {\n                    result.start.imply(\"hour\", 0);\n                }\n            }\n        }\n\n        result.start.assign(\"day\", date.getDate());\n        result.start.assign(\"month\", date.getMonth() + 1);\n        result.start.assign(\"year\", date.getFullYear());\n\n        return result;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}