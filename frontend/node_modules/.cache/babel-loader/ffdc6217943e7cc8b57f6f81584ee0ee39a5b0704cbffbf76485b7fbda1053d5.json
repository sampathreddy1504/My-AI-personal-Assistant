{"ast":null,"code":"import { includeCommonConfiguration } from \"../../configurations.js\";\nimport { Chrono } from \"../../chrono.js\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results.js\";\nimport { Meridiem, Weekday } from \"../../types.js\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser.js\";\nimport ISOFormatParser from \"../../common/parsers/ISOFormatParser.js\";\nimport SVWeekdayParser from \"./parsers/SVWeekdayParser.js\";\nimport SVMonthNameLittleEndianParser from \"./parsers/SVMonthNameLittleEndianParser.js\";\nimport SVTimeUnitCasualRelativeFormatParser from \"./parsers/SVTimeUnitCasualRelativeFormatParser.js\";\nimport SVCasualDateParser from \"./parsers/SVCasualDateParser.js\";\nexport { Chrono, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Meridiem, Weekday };\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\nexport function parse(text, ref, option) {\n  return casual.parse(text, ref, option);\n}\nexport function parseDate(text, ref, option) {\n  return casual.parseDate(text, ref, option);\n}\nexport function createCasualConfiguration(littleEndian = true) {\n  const option = createConfiguration(false, littleEndian);\n  option.parsers.unshift(new SVCasualDateParser());\n  return option;\n}\nexport function createConfiguration(strictMode = true, littleEndian = true) {\n  return includeCommonConfiguration({\n    parsers: [new ISOFormatParser(), new SlashDateFormatParser(littleEndian), new SVMonthNameLittleEndianParser(), new SVWeekdayParser(), new SVTimeUnitCasualRelativeFormatParser()],\n    refiners: []\n  }, strictMode);\n}","map":{"version":3,"names":["includeCommonConfiguration","Chrono","ParsingResult","ParsingComponents","ReferenceWithTimezone","Meridiem","Weekday","SlashDateFormatParser","ISOFormatParser","SVWeekdayParser","SVMonthNameLittleEndianParser","SVTimeUnitCasualRelativeFormatParser","SVCasualDateParser","casual","createCasualConfiguration","strict","createConfiguration","parse","text","ref","option","parseDate","littleEndian","parsers","unshift","strictMode","refiners"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\sv\\index.ts"],"sourcesContent":["import { includeCommonConfiguration } from \"../../configurations\";\nimport { Chrono, Configuration, Parser, Refiner } from \"../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../types\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ISOFormatParser from \"../../common/parsers/ISOFormatParser\";\nimport SVWeekdayParser from \"./parsers/SVWeekdayParser\";\nimport SVMonthNameLittleEndianParser from \"./parsers/SVMonthNameLittleEndianParser\";\nimport SVTimeUnitCasualRelativeFormatParser from \"./parsers/SVTimeUnitCasualRelativeFormatParser\";\nimport SVCasualDateParser from \"./parsers/SVCasualDateParser\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n// Shortcuts\nexport const casual = new Chrono(createCasualConfiguration());\nexport const strict = new Chrono(createConfiguration(true));\n\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\nexport function createCasualConfiguration(littleEndian = true): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new SVCasualDateParser());\n    return option;\n}\n\nexport function createConfiguration(strictMode = true, littleEndian = true): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new ISOFormatParser(),\n                new SlashDateFormatParser(littleEndian),\n                new SVMonthNameLittleEndianParser(),\n                new SVWeekdayParser(),\n                new SVTimeUnitCasualRelativeFormatParser(),\n            ],\n            refiners: [],\n        },\n        strictMode\n    );\n}\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,yBAAuB;AAClE,SAASC,MAAM,QAAwC,iBAAe;AACtE,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB,QAAQ,kBAAgB;AACxF,SAAmEC,QAAQ,EAAEC,OAAO,QAAQ,gBAAc;AAC1G,OAAOC,qBAAqB,MAAM,+CAA6C;AAC/E,OAAOC,eAAe,MAAM,yCAAuC;AACnE,OAAOC,eAAe,MAAM,8BAA4B;AACxD,OAAOC,6BAA6B,MAAM,4CAA0C;AACpF,OAAOC,oCAAoC,MAAM,mDAAiD;AAClG,OAAOC,kBAAkB,MAAM,iCAA+B;AAE9D,SAASX,MAAM,EAAmBC,aAAa,EAAEC,iBAAiB,EAAEC,qBAAqB;AACzF,SAAmEC,QAAQ,EAAEC,OAAO;AAGpF,OAAO,MAAMO,MAAM,GAAG,IAAIZ,MAAM,CAACa,yBAAyB,EAAE,CAAC;AAC7D,OAAO,MAAMC,MAAM,GAAG,IAAId,MAAM,CAACe,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAE3D,OAAM,SAAUC,KAAKA,CAACC,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACrF,OAAOP,MAAM,CAACI,KAAK,CAACC,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC1C;AAEA,OAAM,SAAUC,SAASA,CAACH,IAAY,EAAEC,GAA6B,EAAEC,MAAsB;EACzF,OAAOP,MAAM,CAACQ,SAAS,CAACH,IAAI,EAAEC,GAAG,EAAEC,MAAM,CAAC;AAC9C;AAEA,OAAM,SAAUN,yBAAyBA,CAACQ,YAAY,GAAG,IAAI;EACzD,MAAMF,MAAM,GAAGJ,mBAAmB,CAAC,KAAK,EAAEM,YAAY,CAAC;EACvDF,MAAM,CAACG,OAAO,CAACC,OAAO,CAAC,IAAIZ,kBAAkB,EAAE,CAAC;EAChD,OAAOQ,MAAM;AACjB;AAEA,OAAM,SAAUJ,mBAAmBA,CAACS,UAAU,GAAG,IAAI,EAAEH,YAAY,GAAG,IAAI;EACtE,OAAOtB,0BAA0B,CAC7B;IACIuB,OAAO,EAAE,CACL,IAAIf,eAAe,EAAE,EACrB,IAAID,qBAAqB,CAACe,YAAY,CAAC,EACvC,IAAIZ,6BAA6B,EAAE,EACnC,IAAID,eAAe,EAAE,EACrB,IAAIE,oCAAoC,EAAE,CAC7C;IACDe,QAAQ,EAAE;GACb,EACDD,UAAU,CACb;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}