{"ast":null,"code":"export const NUMBER = {\n  \"零\": 0,\n  \"〇\": 0,\n  \"一\": 1,\n  \"二\": 2,\n  \"三\": 3,\n  \"四\": 4,\n  \"五\": 5,\n  \"六\": 6,\n  \"七\": 7,\n  \"八\": 8,\n  \"九\": 9,\n  \"十\": 10\n};\nexport const WEEKDAY_OFFSET = {\n  \"日\": 0,\n  \"月\": 1,\n  \"火\": 2,\n  \"水\": 3,\n  \"木\": 4,\n  \"金\": 5,\n  \"土\": 6\n};\nexport function toHankaku(text) {\n  return String(text).replace(/\\u2019/g, \"\\u0027\").replace(/\\u201D/g, \"\\u0022\").replace(/\\u3000/g, \"\\u0020\").replace(/\\uFFE5/g, \"\\u00A5\").replace(/[\\uFF01\\uFF03-\\uFF06\\uFF08\\uFF09\\uFF0C-\\uFF19\\uFF1C-\\uFF1F\\uFF21-\\uFF3B\\uFF3D\\uFF3F\\uFF41-\\uFF5B\\uFF5D\\uFF5E]/g, alphaNum);\n}\nfunction alphaNum(token) {\n  return String.fromCharCode(token.charCodeAt(0) - 65248);\n}\nexport function jaStringToNumber(text) {\n  let number = 0;\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === \"十\") {\n      number = number === 0 ? NUMBER[char] : number * NUMBER[char];\n    } else {\n      number += NUMBER[char];\n    }\n  }\n  return number;\n}","map":{"version":3,"names":["NUMBER","WEEKDAY_OFFSET","toHankaku","text","String","replace","alphaNum","token","fromCharCode","charCodeAt","jaStringToNumber","number","i","length","char"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\ja\\constants.ts"],"sourcesContent":["export const NUMBER = {\n    \"零\": 0,\n    \"〇\": 0,\n    \"一\": 1,\n    \"二\": 2,\n    \"三\": 3,\n    \"四\": 4,\n    \"五\": 5,\n    \"六\": 6,\n    \"七\": 7,\n    \"八\": 8,\n    \"九\": 9,\n    \"十\": 10,\n};\n\nexport const WEEKDAY_OFFSET = {\n    \"日\": 0,\n    \"月\": 1,\n    \"火\": 2,\n    \"水\": 3,\n    \"木\": 4,\n    \"金\": 5,\n    \"土\": 6,\n};\n\n/**\n * to-hankaku.js\n * convert to ascii code strings.\n *\n * @version 1.0.1\n * @author think49\n * @url https://gist.github.com/964592\n * @license http://www.opensource.org/licenses/mit-license.php (The MIT License)\n */\nexport function toHankaku(text) {\n    return String(text)\n        .replace(/\\u2019/g, \"\\u0027\")\n        .replace(/\\u201D/g, \"\\u0022\")\n        .replace(/\\u3000/g, \"\\u0020\")\n        .replace(/\\uFFE5/g, \"\\u00A5\")\n        .replace(\n            /[\\uFF01\\uFF03-\\uFF06\\uFF08\\uFF09\\uFF0C-\\uFF19\\uFF1C-\\uFF1F\\uFF21-\\uFF3B\\uFF3D\\uFF3F\\uFF41-\\uFF5B\\uFF5D\\uFF5E]/g,\n            alphaNum\n        );\n}\n\nfunction alphaNum(token) {\n    return String.fromCharCode(token.charCodeAt(0) - 65248);\n}\n\nexport function jaStringToNumber(text: string) {\n    let number = 0;\n\n    for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        if (char === \"十\") {\n            number = number === 0 ? NUMBER[char] : number * NUMBER[char];\n        } else {\n            number += NUMBER[char];\n        }\n    }\n\n    return number;\n}\n"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG;EAClB,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE;CACR;AAED,OAAO,MAAMC,cAAc,GAAG;EAC1B,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;EACN,GAAG,EAAE;CACR;AAWD,OAAM,SAAUC,SAASA,CAACC,IAAI;EAC1B,OAAOC,MAAM,CAACD,IAAI,CAAC,CACdE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAC5BA,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAC5BA,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAC5BA,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAC5BA,OAAO,CACJ,gHAAgH,EAChHC,QAAQ,CACX;AACT;AAEA,SAASA,QAAQA,CAACC,KAAK;EACnB,OAAOH,MAAM,CAACI,YAAY,CAACD,KAAK,CAACE,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;AAC3D;AAEA,OAAM,SAAUC,gBAAgBA,CAACP,IAAY;EACzC,IAAIQ,MAAM,GAAG,CAAC;EAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,IAAI,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IAClC,MAAME,IAAI,GAAGX,IAAI,CAACS,CAAC,CAAC;IACpB,IAAIE,IAAI,KAAK,GAAG,EAAE;MACdH,MAAM,GAAGA,MAAM,KAAK,CAAC,GAAGX,MAAM,CAACc,IAAI,CAAC,GAAGH,MAAM,GAAGX,MAAM,CAACc,IAAI,CAAC;IAChE,CAAC,MAAM;MACHH,MAAM,IAAIX,MAAM,CAACc,IAAI,CAAC;IAC1B;EACJ;EAEA,OAAOH,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}