{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { Meridiem } from \"../../../types.js\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates.js\";\nconst DATE_GROUP = 1;\nconst TIME_OF_DAY_GROUP = 2;\nexport default class NLCasualDateTimeParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern(context) {\n    return /(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\\W|$)/i;\n  }\n  innerExtract(context, match) {\n    const dateText = match[DATE_GROUP].toLowerCase();\n    const timeText = match[TIME_OF_DAY_GROUP].toLowerCase();\n    const component = context.createParsingComponents();\n    const targetDate = context.refDate;\n    switch (dateText) {\n      case \"gisteren\":\n        const previousDay = new Date(targetDate.getTime());\n        previousDay.setDate(previousDay.getDate() - 1);\n        assignSimilarDate(component, previousDay);\n        break;\n      case \"van\":\n        assignSimilarDate(component, targetDate);\n        break;\n      case \"morgen\":\n        const nextDay = new Date(targetDate.getTime());\n        nextDay.setDate(nextDay.getDate() + 1);\n        assignSimilarDate(component, nextDay);\n        implySimilarTime(component, nextDay);\n        break;\n    }\n    switch (timeText) {\n      case \"ochtend\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 6);\n        break;\n      case \"middag\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 12);\n        break;\n      case \"namiddag\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 15);\n        break;\n      case \"avond\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 20);\n        break;\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","Meridiem","assignSimilarDate","implySimilarTime","DATE_GROUP","TIME_OF_DAY_GROUP","NLCasualDateTimeParser","innerPattern","context","innerExtract","match","dateText","toLowerCase","timeText","component","createParsingComponents","targetDate","refDate","previousDay","Date","getTime","setDate","getDate","nextDay","imply","AM","PM"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\nl\\parsers\\NLCasualDateTimeParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { Meridiem } from \"../../../types\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates\";\n\n/*\n * Find combined words\n * - morgenochtend\n * - morgenmiddag\n * - morgennamiddag\n * - morgenavond\n * - morgennacht\n * - vanochtend\n * - vanmiddag\n * - vannamiddag\n * - vanavond\n * - vannacht\n * - gisterenochtend\n * - gisterenmiddag\n * - gisterennamiddag\n * - gisterenavond\n * - gisterennacht\n * */\n\nconst DATE_GROUP = 1;\nconst TIME_OF_DAY_GROUP = 2;\n\nexport default class NLCasualDateTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const dateText = match[DATE_GROUP].toLowerCase();\n        const timeText = match[TIME_OF_DAY_GROUP].toLowerCase();\n        const component = context.createParsingComponents();\n        const targetDate = context.refDate;\n\n        switch (dateText) {\n            case \"gisteren\":\n                const previousDay = new Date(targetDate.getTime());\n                previousDay.setDate(previousDay.getDate() - 1);\n                assignSimilarDate(component, previousDay);\n                break;\n            case \"van\":\n                assignSimilarDate(component, targetDate);\n                break;\n            case \"morgen\":\n                const nextDay = new Date(targetDate.getTime());\n                nextDay.setDate(nextDay.getDate() + 1);\n                assignSimilarDate(component, nextDay);\n                implySimilarTime(component, nextDay);\n                break;\n        }\n\n        switch (timeText) {\n            case \"ochtend\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n            case \"middag\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n            case \"namiddag\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"avond\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 20);\n                break;\n        }\n\n        return component;\n    }\n}\n"],"mappings":"AAEA,SAASA,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,yBAAuB;AAqB3E,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,iBAAiB,GAAG,CAAC;AAE3B,eAAc,MAAOC,sBAAuB,SAAQN,sCAAsC;EACtFO,YAAYA,CAACC,OAAuB;IAChC,OAAO,qEAAqE;EAChF;EAEAC,YAAYA,CAACD,OAAuB,EAAEE,KAAuB;IACzD,MAAMC,QAAQ,GAAGD,KAAK,CAACN,UAAU,CAAC,CAACQ,WAAW,EAAE;IAChD,MAAMC,QAAQ,GAAGH,KAAK,CAACL,iBAAiB,CAAC,CAACO,WAAW,EAAE;IACvD,MAAME,SAAS,GAAGN,OAAO,CAACO,uBAAuB,EAAE;IACnD,MAAMC,UAAU,GAAGR,OAAO,CAACS,OAAO;IAElC,QAAQN,QAAQ;MACZ,KAAK,UAAU;QACX,MAAMO,WAAW,GAAG,IAAIC,IAAI,CAACH,UAAU,CAACI,OAAO,EAAE,CAAC;QAClDF,WAAW,CAACG,OAAO,CAACH,WAAW,CAACI,OAAO,EAAE,GAAG,CAAC,CAAC;QAC9CpB,iBAAiB,CAACY,SAAS,EAAEI,WAAW,CAAC;QACzC;MACJ,KAAK,KAAK;QACNhB,iBAAiB,CAACY,SAAS,EAAEE,UAAU,CAAC;QACxC;MACJ,KAAK,QAAQ;QACT,MAAMO,OAAO,GAAG,IAAIJ,IAAI,CAACH,UAAU,CAACI,OAAO,EAAE,CAAC;QAC9CG,OAAO,CAACF,OAAO,CAACE,OAAO,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;QACtCpB,iBAAiB,CAACY,SAAS,EAAES,OAAO,CAAC;QACrCpB,gBAAgB,CAACW,SAAS,EAAES,OAAO,CAAC;QACpC;IACR;IAEA,QAAQV,QAAQ;MACZ,KAAK,SAAS;QACVC,SAAS,CAACU,KAAK,CAAC,UAAU,EAAEvB,QAAQ,CAACwB,EAAE,CAAC;QACxCX,SAAS,CAACU,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1B;MACJ,KAAK,QAAQ;QACTV,SAAS,CAACU,KAAK,CAAC,UAAU,EAAEvB,QAAQ,CAACwB,EAAE,CAAC;QACxCX,SAAS,CAACU,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MACJ,KAAK,UAAU;QACXV,SAAS,CAACU,KAAK,CAAC,UAAU,EAAEvB,QAAQ,CAACyB,EAAE,CAAC;QACxCZ,SAAS,CAACU,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MAEJ,KAAK,OAAO;QACRV,SAAS,CAACU,KAAK,CAAC,UAAU,EAAEvB,QAAQ,CAACyB,EAAE,CAAC;QACxCZ,SAAS,CAACU,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;IACR;IAEA,OAAOV,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}