{"ast":null,"code":"import { Meridiem } from \"../../../types.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates.js\";\nexport default class ESCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return /(?:esta\\s*)?(mañana|tarde|medianoche|mediodia|mediodía|noche)(?=\\W|$)/i;\n  }\n  innerExtract(context, match) {\n    const targetDate = context.refDate;\n    const component = context.createParsingComponents();\n    switch (match[1].toLowerCase()) {\n      case \"tarde\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 15);\n        break;\n      case \"noche\":\n        component.imply(\"meridiem\", Meridiem.PM);\n        component.imply(\"hour\", 22);\n        break;\n      case \"mañana\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 6);\n        break;\n      case \"medianoche\":\n        const nextDay = new Date(targetDate.getTime());\n        nextDay.setDate(nextDay.getDate() + 1);\n        assignSimilarDate(component, nextDay);\n        implySimilarTime(component, nextDay);\n        component.imply(\"hour\", 0);\n        component.imply(\"minute\", 0);\n        component.imply(\"second\", 0);\n        break;\n      case \"mediodia\":\n      case \"mediodía\":\n        component.imply(\"meridiem\", Meridiem.AM);\n        component.imply(\"hour\", 12);\n        break;\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["Meridiem","AbstractParserWithWordBoundaryChecking","assignSimilarDate","implySimilarTime","ESCasualTimeParser","innerPattern","innerExtract","context","match","targetDate","refDate","component","createParsingComponents","toLowerCase","imply","PM","AM","nextDay","Date","getTime","setDate","getDate"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\es\\parsers\\ESCasualTimeParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { Meridiem } from \"../../../types\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates\";\n\nexport default class ESCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return /(?:esta\\s*)?(mañana|tarde|medianoche|mediodia|mediodía|noche)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const targetDate = context.refDate;\n        const component = context.createParsingComponents();\n        switch (match[1].toLowerCase()) {\n            case \"tarde\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 15);\n                break;\n\n            case \"noche\":\n                component.imply(\"meridiem\", Meridiem.PM);\n                component.imply(\"hour\", 22);\n                break;\n\n            case \"mañana\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 6);\n                break;\n\n            case \"medianoche\":\n                const nextDay = new Date(targetDate.getTime());\n                nextDay.setDate(nextDay.getDate() + 1);\n                assignSimilarDate(component, nextDay);\n                implySimilarTime(component, nextDay);\n                component.imply(\"hour\", 0);\n                component.imply(\"minute\", 0);\n                component.imply(\"second\", 0);\n                break;\n\n            case \"mediodia\":\n            case \"mediodía\":\n                component.imply(\"meridiem\", Meridiem.AM);\n                component.imply(\"hour\", 12);\n                break;\n        }\n\n        return component;\n    }\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,yBAAuB;AAE3E,eAAc,MAAOC,kBAAmB,SAAQH,sCAAsC;EAClFI,YAAYA,CAAA;IACR,OAAO,wEAAwE;EACnF;EAEAC,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,UAAU,GAAGF,OAAO,CAACG,OAAO;IAClC,MAAMC,SAAS,GAAGJ,OAAO,CAACK,uBAAuB,EAAE;IACnD,QAAQJ,KAAK,CAAC,CAAC,CAAC,CAACK,WAAW,EAAE;MAC1B,KAAK,OAAO;QACRF,SAAS,CAACG,KAAK,CAAC,UAAU,EAAEd,QAAQ,CAACe,EAAE,CAAC;QACxCJ,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MAEJ,KAAK,OAAO;QACRH,SAAS,CAACG,KAAK,CAAC,UAAU,EAAEd,QAAQ,CAACe,EAAE,CAAC;QACxCJ,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;MAEJ,KAAK,QAAQ;QACTH,SAAS,CAACG,KAAK,CAAC,UAAU,EAAEd,QAAQ,CAACgB,EAAE,CAAC;QACxCL,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1B;MAEJ,KAAK,YAAY;QACb,MAAMG,OAAO,GAAG,IAAIC,IAAI,CAACT,UAAU,CAACU,OAAO,EAAE,CAAC;QAC9CF,OAAO,CAACG,OAAO,CAACH,OAAO,CAACI,OAAO,EAAE,GAAG,CAAC,CAAC;QACtCnB,iBAAiB,CAACS,SAAS,EAAEM,OAAO,CAAC;QACrCd,gBAAgB,CAACQ,SAAS,EAAEM,OAAO,CAAC;QACpCN,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1BH,SAAS,CAACG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5BH,SAAS,CAACG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5B;MAEJ,KAAK,UAAU;MACf,KAAK,UAAU;QACXH,SAAS,CAACG,KAAK,CAAC,UAAU,EAAEd,QAAQ,CAACgB,EAAE,CAAC;QACxCL,SAAS,CAACG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAC3B;IACR;IAEA,OAAOH,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}