{"ast":null,"code":"import { assignSimilarDate, assignSimilarTime, implySimilarTime } from \"./utils/dates.js\";\nimport { toTimezoneOffset } from \"./timezone.js\";\nimport { addDuration, EmptyDuration } from \"./calculation/duration.js\";\nexport class ReferenceWithTimezone {\n  instant;\n  timezoneOffset;\n  constructor(instant, timezoneOffset) {\n    this.instant = instant ?? new Date();\n    this.timezoneOffset = timezoneOffset ?? null;\n  }\n  static fromDate(date) {\n    return new ReferenceWithTimezone(date);\n  }\n  static fromInput(input, timezoneOverrides) {\n    if (input instanceof Date) {\n      return ReferenceWithTimezone.fromDate(input);\n    }\n    const instant = input?.instant ?? new Date();\n    const timezoneOffset = toTimezoneOffset(input?.timezone, instant, timezoneOverrides);\n    return new ReferenceWithTimezone(instant, timezoneOffset);\n  }\n  getDateWithAdjustedTimezone() {\n    const date = new Date(this.instant);\n    if (this.timezoneOffset !== null) {\n      date.setMinutes(date.getMinutes() - this.getSystemTimezoneAdjustmentMinute(this.instant));\n    }\n    return date;\n  }\n  getSystemTimezoneAdjustmentMinute(date, overrideTimezoneOffset) {\n    if (!date || date.getTime() < 0) {\n      date = new Date();\n    }\n    const currentTimezoneOffset = -date.getTimezoneOffset();\n    const targetTimezoneOffset = overrideTimezoneOffset ?? this.timezoneOffset ?? currentTimezoneOffset;\n    return currentTimezoneOffset - targetTimezoneOffset;\n  }\n  getTimezoneOffset() {\n    return this.timezoneOffset ?? -this.instant.getTimezoneOffset();\n  }\n}\nexport class ParsingComponents {\n  knownValues;\n  impliedValues;\n  reference;\n  _tags = new Set();\n  constructor(reference, knownComponents) {\n    this.reference = reference;\n    this.knownValues = {};\n    this.impliedValues = {};\n    if (knownComponents) {\n      for (const key in knownComponents) {\n        this.knownValues[key] = knownComponents[key];\n      }\n    }\n    const date = reference.getDateWithAdjustedTimezone();\n    this.imply(\"day\", date.getDate());\n    this.imply(\"month\", date.getMonth() + 1);\n    this.imply(\"year\", date.getFullYear());\n    this.imply(\"hour\", 12);\n    this.imply(\"minute\", 0);\n    this.imply(\"second\", 0);\n    this.imply(\"millisecond\", 0);\n  }\n  static createRelativeFromReference(reference, duration = EmptyDuration) {\n    let date = addDuration(reference.getDateWithAdjustedTimezone(), duration);\n    const components = new ParsingComponents(reference);\n    components.addTag(\"result/relativeDate\");\n    if (\"hour\" in duration || \"minute\" in duration || \"second\" in duration || \"millisecond\" in duration) {\n      components.addTag(\"result/relativeDateAndTime\");\n      assignSimilarTime(components, date);\n      assignSimilarDate(components, date);\n      components.assign(\"timezoneOffset\", reference.getTimezoneOffset());\n    } else {\n      implySimilarTime(components, date);\n      components.imply(\"timezoneOffset\", reference.getTimezoneOffset());\n      if (\"day\" in duration) {\n        components.assign(\"day\", date.getDate());\n        components.assign(\"month\", date.getMonth() + 1);\n        components.assign(\"year\", date.getFullYear());\n        components.assign(\"weekday\", date.getDay());\n      } else if (\"week\" in duration) {\n        components.assign(\"day\", date.getDate());\n        components.assign(\"month\", date.getMonth() + 1);\n        components.assign(\"year\", date.getFullYear());\n        components.imply(\"weekday\", date.getDay());\n      } else {\n        components.imply(\"day\", date.getDate());\n        if (\"month\" in duration) {\n          components.assign(\"month\", date.getMonth() + 1);\n          components.assign(\"year\", date.getFullYear());\n        } else {\n          components.imply(\"month\", date.getMonth() + 1);\n          if (\"year\" in duration) {\n            components.assign(\"year\", date.getFullYear());\n          } else {\n            components.imply(\"year\", date.getFullYear());\n          }\n        }\n      }\n    }\n    return components;\n  }\n  get(component) {\n    if (component in this.knownValues) {\n      return this.knownValues[component];\n    }\n    if (component in this.impliedValues) {\n      return this.impliedValues[component];\n    }\n    return null;\n  }\n  isCertain(component) {\n    return component in this.knownValues;\n  }\n  getCertainComponents() {\n    return Object.keys(this.knownValues);\n  }\n  imply(component, value) {\n    if (component in this.knownValues) {\n      return this;\n    }\n    this.impliedValues[component] = value;\n    return this;\n  }\n  assign(component, value) {\n    this.knownValues[component] = value;\n    delete this.impliedValues[component];\n    return this;\n  }\n  addDurationAsImplied(duration) {\n    const currentDate = this.dateWithoutTimezoneAdjustment();\n    const date = addDuration(currentDate, duration);\n    if (\"day\" in duration || \"week\" in duration || \"month\" in duration || \"year\" in duration) {\n      this.delete([\"day\", \"weekday\", \"month\", \"year\"]);\n      this.imply(\"day\", date.getDate());\n      this.imply(\"weekday\", date.getDay());\n      this.imply(\"month\", date.getMonth() + 1);\n      this.imply(\"year\", date.getFullYear());\n    }\n    if (\"second\" in duration || \"minute\" in duration || \"hour\" in duration) {\n      this.delete([\"second\", \"minute\", \"hour\"]);\n      this.imply(\"second\", date.getSeconds());\n      this.imply(\"minute\", date.getMinutes());\n      this.imply(\"hour\", date.getHours());\n    }\n    return this;\n  }\n  delete(components) {\n    if (typeof components === \"string\") {\n      components = [components];\n    }\n    for (const component of components) {\n      delete this.knownValues[component];\n      delete this.impliedValues[component];\n    }\n  }\n  clone() {\n    const component = new ParsingComponents(this.reference);\n    component.knownValues = {};\n    component.impliedValues = {};\n    for (const key in this.knownValues) {\n      component.knownValues[key] = this.knownValues[key];\n    }\n    for (const key in this.impliedValues) {\n      component.impliedValues[key] = this.impliedValues[key];\n    }\n    return component;\n  }\n  isOnlyDate() {\n    return !this.isCertain(\"hour\") && !this.isCertain(\"minute\") && !this.isCertain(\"second\");\n  }\n  isOnlyTime() {\n    return !this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\") && !this.isCertain(\"year\");\n  }\n  isOnlyWeekdayComponent() {\n    return this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n  }\n  isDateWithUnknownYear() {\n    return this.isCertain(\"month\") && !this.isCertain(\"year\");\n  }\n  isValidDate() {\n    const date = this.dateWithoutTimezoneAdjustment();\n    if (date.getFullYear() !== this.get(\"year\")) return false;\n    if (date.getMonth() !== this.get(\"month\") - 1) return false;\n    if (date.getDate() !== this.get(\"day\")) return false;\n    if (this.get(\"hour\") != null && date.getHours() != this.get(\"hour\")) return false;\n    if (this.get(\"minute\") != null && date.getMinutes() != this.get(\"minute\")) return false;\n    return true;\n  }\n  toString() {\n    return `[ParsingComponents {\n            tags: ${JSON.stringify(Array.from(this._tags).sort())}, \n            knownValues: ${JSON.stringify(this.knownValues)}, \n            impliedValues: ${JSON.stringify(this.impliedValues)}}, \n            reference: ${JSON.stringify(this.reference)}]`;\n  }\n  date() {\n    const date = this.dateWithoutTimezoneAdjustment();\n    const timezoneAdjustment = this.reference.getSystemTimezoneAdjustmentMinute(date, this.get(\"timezoneOffset\"));\n    return new Date(date.getTime() + timezoneAdjustment * 60000);\n  }\n  addTag(tag) {\n    this._tags.add(tag);\n    return this;\n  }\n  addTags(tags) {\n    for (const tag of tags) {\n      this._tags.add(tag);\n    }\n    return this;\n  }\n  tags() {\n    return new Set(this._tags);\n  }\n  dateWithoutTimezoneAdjustment() {\n    const date = new Date(this.get(\"year\"), this.get(\"month\") - 1, this.get(\"day\"), this.get(\"hour\"), this.get(\"minute\"), this.get(\"second\"), this.get(\"millisecond\"));\n    date.setFullYear(this.get(\"year\"));\n    return date;\n  }\n}\nexport class ParsingResult {\n  refDate;\n  index;\n  text;\n  reference;\n  start;\n  end;\n  constructor(reference, index, text, start, end) {\n    this.reference = reference;\n    this.refDate = reference.instant;\n    this.index = index;\n    this.text = text;\n    this.start = start || new ParsingComponents(reference);\n    this.end = end;\n  }\n  clone() {\n    const result = new ParsingResult(this.reference, this.index, this.text);\n    result.start = this.start ? this.start.clone() : null;\n    result.end = this.end ? this.end.clone() : null;\n    return result;\n  }\n  date() {\n    return this.start.date();\n  }\n  addTag(tag) {\n    this.start.addTag(tag);\n    if (this.end) {\n      this.end.addTag(tag);\n    }\n    return this;\n  }\n  addTags(tags) {\n    this.start.addTags(tags);\n    if (this.end) {\n      this.end.addTags(tags);\n    }\n    return this;\n  }\n  tags() {\n    const combinedTags = new Set(this.start.tags());\n    if (this.end) {\n      for (const tag of this.end.tags()) {\n        combinedTags.add(tag);\n      }\n    }\n    return combinedTags;\n  }\n  toString() {\n    const tags = Array.from(this.tags()).sort();\n    return `[ParsingResult {index: ${this.index}, text: '${this.text}', tags: ${JSON.stringify(tags)} ...}]`;\n  }\n}","map":{"version":3,"names":["assignSimilarDate","assignSimilarTime","implySimilarTime","toTimezoneOffset","addDuration","EmptyDuration","ReferenceWithTimezone","instant","timezoneOffset","constructor","Date","fromDate","date","fromInput","input","timezoneOverrides","timezone","getDateWithAdjustedTimezone","setMinutes","getMinutes","getSystemTimezoneAdjustmentMinute","overrideTimezoneOffset","getTime","currentTimezoneOffset","getTimezoneOffset","targetTimezoneOffset","ParsingComponents","knownValues","impliedValues","reference","_tags","Set","knownComponents","key","imply","getDate","getMonth","getFullYear","createRelativeFromReference","duration","components","addTag","assign","getDay","get","component","isCertain","getCertainComponents","Object","keys","value","addDurationAsImplied","currentDate","dateWithoutTimezoneAdjustment","delete","getSeconds","getHours","clone","isOnlyDate","isOnlyTime","isOnlyWeekdayComponent","isDateWithUnknownYear","isValidDate","toString","JSON","stringify","Array","from","sort","timezoneAdjustment","tag","add","addTags","tags","setFullYear","ParsingResult","refDate","index","text","start","end","result","combinedTags"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\results.ts"],"sourcesContent":["import { Component, ParsedComponents, ParsedResult, ParsingReference, TimezoneAbbrMap } from \"./types\";\n\nimport { assignSimilarDate, assignSimilarTime, implySimilarTime } from \"./utils/dates\";\nimport { toTimezoneOffset } from \"./timezone\";\nimport { addDuration, Duration, EmptyDuration } from \"./calculation/duration\";\n\nexport class ReferenceWithTimezone {\n    readonly instant: Date;\n    readonly timezoneOffset?: number | null;\n\n    constructor(instant?: Date, timezoneOffset?: number) {\n        this.instant = instant ?? new Date();\n        this.timezoneOffset = timezoneOffset ?? null;\n    }\n\n    static fromDate(date: Date): ReferenceWithTimezone {\n        return new ReferenceWithTimezone(date);\n    }\n\n    static fromInput(input?: ParsingReference | Date, timezoneOverrides?: TimezoneAbbrMap) {\n        if (input instanceof Date) {\n            return ReferenceWithTimezone.fromDate(input);\n        }\n        const instant: Date = input?.instant ?? new Date();\n        const timezoneOffset = toTimezoneOffset(input?.timezone, instant, timezoneOverrides);\n        return new ReferenceWithTimezone(instant, timezoneOffset);\n    }\n\n    /**\n     * Returns a JS date (system timezone) with the { year, month, day, hour, minute, second } equal to the reference.\n     * The output's instant is NOT the reference's instant when the reference's and system's timezone are different.\n     */\n    getDateWithAdjustedTimezone() {\n        const date = new Date(this.instant);\n        if (this.timezoneOffset !== null) {\n            date.setMinutes(date.getMinutes() - this.getSystemTimezoneAdjustmentMinute(this.instant));\n        }\n        return date;\n    }\n\n    /**\n     * Returns the number minutes difference between the JS date's timezone and the reference timezone.\n     * @param date\n     * @param overrideTimezoneOffset\n     */\n    getSystemTimezoneAdjustmentMinute(date?: Date, overrideTimezoneOffset?: number): number {\n        if (!date || date.getTime() < 0) {\n            // Javascript date timezone calculation got effect when the time epoch < 0\n            // e.g. new Date('Tue Feb 02 1300 00:00:00 GMT+0900 (JST)') => Tue Feb 02 1300 00:18:59 GMT+0918 (JST)\n            date = new Date();\n        }\n\n        const currentTimezoneOffset = -date.getTimezoneOffset();\n        const targetTimezoneOffset = overrideTimezoneOffset ?? this.timezoneOffset ?? currentTimezoneOffset;\n        return currentTimezoneOffset - targetTimezoneOffset;\n    }\n\n    getTimezoneOffset(): number {\n        return this.timezoneOffset ?? -this.instant.getTimezoneOffset();\n    }\n}\n\nexport class ParsingComponents implements ParsedComponents {\n    private knownValues: { [c in Component]?: number };\n    private impliedValues: { [c in Component]?: number };\n    private reference: ReferenceWithTimezone;\n    private _tags = new Set<string>();\n\n    constructor(reference: ReferenceWithTimezone, knownComponents?: { [c in Component]?: number }) {\n        this.reference = reference;\n        this.knownValues = {};\n        this.impliedValues = {};\n        if (knownComponents) {\n            for (const key in knownComponents) {\n                this.knownValues[key as Component] = knownComponents[key as Component];\n            }\n        }\n\n        const date = reference.getDateWithAdjustedTimezone();\n        this.imply(\"day\", date.getDate());\n        this.imply(\"month\", date.getMonth() + 1);\n        this.imply(\"year\", date.getFullYear());\n        this.imply(\"hour\", 12);\n        this.imply(\"minute\", 0);\n        this.imply(\"second\", 0);\n        this.imply(\"millisecond\", 0);\n    }\n\n    static createRelativeFromReference(\n        reference: ReferenceWithTimezone,\n        duration: Duration = EmptyDuration\n    ): ParsingComponents {\n        let date = addDuration(reference.getDateWithAdjustedTimezone(), duration);\n\n        const components = new ParsingComponents(reference);\n        components.addTag(\"result/relativeDate\");\n        if (\"hour\" in duration || \"minute\" in duration || \"second\" in duration || \"millisecond\" in duration) {\n            components.addTag(\"result/relativeDateAndTime\");\n            assignSimilarTime(components, date);\n            assignSimilarDate(components, date);\n            components.assign(\"timezoneOffset\", reference.getTimezoneOffset());\n        } else {\n            implySimilarTime(components, date);\n            components.imply(\"timezoneOffset\", reference.getTimezoneOffset());\n\n            if (\"day\" in duration) {\n                components.assign(\"day\", date.getDate());\n                components.assign(\"month\", date.getMonth() + 1);\n                components.assign(\"year\", date.getFullYear());\n                components.assign(\"weekday\", date.getDay());\n            } else if (\"week\" in duration) {\n                components.assign(\"day\", date.getDate());\n                components.assign(\"month\", date.getMonth() + 1);\n                components.assign(\"year\", date.getFullYear());\n                components.imply(\"weekday\", date.getDay());\n            } else {\n                components.imply(\"day\", date.getDate());\n                if (\"month\" in duration) {\n                    components.assign(\"month\", date.getMonth() + 1);\n                    components.assign(\"year\", date.getFullYear());\n                } else {\n                    components.imply(\"month\", date.getMonth() + 1);\n                    if (\"year\" in duration) {\n                        components.assign(\"year\", date.getFullYear());\n                    } else {\n                        components.imply(\"year\", date.getFullYear());\n                    }\n                }\n            }\n        }\n\n        return components;\n    }\n\n    get(component: Component): number | null {\n        if (component in this.knownValues) {\n            return this.knownValues[component];\n        }\n\n        if (component in this.impliedValues) {\n            return this.impliedValues[component];\n        }\n\n        return null;\n    }\n\n    isCertain(component: Component): boolean {\n        return component in this.knownValues;\n    }\n\n    getCertainComponents(): Array<Component> {\n        return Object.keys(this.knownValues) as Array<Component>;\n    }\n\n    imply(component: Component, value: number): ParsingComponents {\n        if (component in this.knownValues) {\n            return this;\n        }\n        this.impliedValues[component] = value;\n        return this;\n    }\n\n    assign(component: Component, value: number): ParsingComponents {\n        this.knownValues[component] = value;\n        delete this.impliedValues[component];\n        return this;\n    }\n\n    /**\n     * Add the `duration` into this component, mark the modified date and/or time as implied.\n     * @param duration\n     */\n    addDurationAsImplied(duration: Duration): ParsingComponents {\n        const currentDate = this.dateWithoutTimezoneAdjustment();\n        const date = addDuration(currentDate, duration);\n        if (\"day\" in duration || \"week\" in duration || \"month\" in duration || \"year\" in duration) {\n            this.delete([\"day\", \"weekday\", \"month\", \"year\"]);\n            this.imply(\"day\", date.getDate());\n            this.imply(\"weekday\", date.getDay());\n            this.imply(\"month\", date.getMonth() + 1);\n            this.imply(\"year\", date.getFullYear());\n        }\n        if (\"second\" in duration || \"minute\" in duration || \"hour\" in duration) {\n            this.delete([\"second\", \"minute\", \"hour\"]);\n            this.imply(\"second\", date.getSeconds());\n            this.imply(\"minute\", date.getMinutes());\n            this.imply(\"hour\", date.getHours());\n        }\n        return this;\n    }\n\n    delete(components: Component | Component[]) {\n        if (typeof components === \"string\") {\n            components = [components];\n        }\n        for (const component of components) {\n            delete this.knownValues[component];\n            delete this.impliedValues[component];\n        }\n    }\n\n    clone(): ParsingComponents {\n        const component = new ParsingComponents(this.reference);\n        component.knownValues = {};\n        component.impliedValues = {};\n\n        for (const key in this.knownValues) {\n            component.knownValues[key as Component] = this.knownValues[key as Component];\n        }\n\n        for (const key in this.impliedValues) {\n            component.impliedValues[key as Component] = this.impliedValues[key as Component];\n        }\n\n        return component;\n    }\n\n    isOnlyDate(): boolean {\n        return !this.isCertain(\"hour\") && !this.isCertain(\"minute\") && !this.isCertain(\"second\");\n    }\n\n    isOnlyTime(): boolean {\n        return (\n            !this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\") && !this.isCertain(\"year\")\n        );\n    }\n\n    isOnlyWeekdayComponent(): boolean {\n        return this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n    }\n\n    isDateWithUnknownYear(): boolean {\n        return this.isCertain(\"month\") && !this.isCertain(\"year\");\n    }\n\n    isValidDate(): boolean {\n        const date = this.dateWithoutTimezoneAdjustment();\n\n        if (date.getFullYear() !== this.get(\"year\")) return false;\n        if (date.getMonth() !== this.get(\"month\") - 1) return false;\n        if (date.getDate() !== this.get(\"day\")) return false;\n        if (this.get(\"hour\") != null && date.getHours() != this.get(\"hour\")) return false;\n        if (this.get(\"minute\") != null && date.getMinutes() != this.get(\"minute\")) return false;\n\n        return true;\n    }\n\n    toString() {\n        return `[ParsingComponents {\n            tags: ${JSON.stringify(Array.from(this._tags).sort())}, \n            knownValues: ${JSON.stringify(this.knownValues)}, \n            impliedValues: ${JSON.stringify(this.impliedValues)}}, \n            reference: ${JSON.stringify(this.reference)}]`;\n    }\n\n    date(): Date {\n        const date = this.dateWithoutTimezoneAdjustment();\n        const timezoneAdjustment = this.reference.getSystemTimezoneAdjustmentMinute(date, this.get(\"timezoneOffset\"));\n        return new Date(date.getTime() + timezoneAdjustment * 60000);\n    }\n\n    addTag(tag: string): ParsingComponents {\n        this._tags.add(tag);\n        return this;\n    }\n\n    addTags(tags: string[] | Set<string>): ParsingComponents {\n        for (const tag of tags) {\n            this._tags.add(tag);\n        }\n        return this;\n    }\n\n    tags(): Set<string> {\n        return new Set(this._tags);\n    }\n\n    private dateWithoutTimezoneAdjustment() {\n        const date = new Date(\n            this.get(\"year\"),\n            this.get(\"month\") - 1,\n            this.get(\"day\"),\n            this.get(\"hour\"),\n            this.get(\"minute\"),\n            this.get(\"second\"),\n            this.get(\"millisecond\")\n        );\n\n        date.setFullYear(this.get(\"year\"));\n        return date;\n    }\n}\n\nexport class ParsingResult implements ParsedResult {\n    refDate: Date;\n    index: number;\n    text: string;\n\n    reference: ReferenceWithTimezone;\n\n    start: ParsingComponents;\n    end?: ParsingComponents;\n\n    constructor(\n        reference: ReferenceWithTimezone,\n        index: number,\n        text: string,\n        start?: ParsingComponents,\n        end?: ParsingComponents\n    ) {\n        this.reference = reference;\n        this.refDate = reference.instant;\n        this.index = index;\n        this.text = text;\n        this.start = start || new ParsingComponents(reference);\n        this.end = end;\n    }\n\n    clone() {\n        const result = new ParsingResult(this.reference, this.index, this.text);\n        result.start = this.start ? this.start.clone() : null;\n        result.end = this.end ? this.end.clone() : null;\n        return result;\n    }\n\n    date(): Date {\n        return this.start.date();\n    }\n\n    addTag(tag: string): ParsingResult {\n        this.start.addTag(tag);\n        if (this.end) {\n            this.end.addTag(tag);\n        }\n        return this;\n    }\n\n    addTags(tags: string[] | Set<string>): ParsingResult {\n        this.start.addTags(tags);\n        if (this.end) {\n            this.end.addTags(tags);\n        }\n        return this;\n    }\n\n    tags(): Set<string> {\n        const combinedTags: Set<string> = new Set(this.start.tags());\n        if (this.end) {\n            for (const tag of this.end.tags()) {\n                combinedTags.add(tag);\n            }\n        }\n        return combinedTags;\n    }\n\n    toString() {\n        const tags = Array.from(this.tags()).sort();\n        return `[ParsingResult {index: ${this.index}, text: '${this.text}', tags: ${JSON.stringify(tags)} ...}]`;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}