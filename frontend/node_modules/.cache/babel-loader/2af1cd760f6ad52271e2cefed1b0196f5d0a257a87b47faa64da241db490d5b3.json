{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sampa\\\\Downloads\\\\myapp\\\\myapp\\\\myapp\\\\frontend\\\\src\\\\frontend\\\\components\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\n\n// Provider Component\nexport function ThemeProvider({\n  children\n}) {\n  _s();\n  // initialize from localStorage (use lowercase 'light'/'dark'); treat 'system' as 'light'\n  const rawStored = typeof window !== 'undefined' && localStorage.getItem('chatTheme') || 'light';\n  const stored = rawStored && rawStored.toLowerCase() === 'system' ? 'light' : rawStored;\n  const [theme, setThemeState] = useState(stored || 'light'); // 'light' | 'dark'\n  const [fontSize, setFontSize] = useState('medium'); // small | medium | large\n\n  // wrapper to persist and set body class\n  const setTheme = t => {\n    // normalize and treat 'system' as 'light' for now\n    let norm = (t || 'light').toString().toLowerCase();\n    if (norm === 'system') norm = 'light';\n    setThemeState(norm);\n    try {\n      // still persist the original requested value if caller wants 'system' preserved\n      localStorage.setItem('chatTheme', norm);\n    } catch {}\n    // keep a body class for global CSS selectors (.dark-theme .foo)\n    if (typeof document !== 'undefined') {\n      document.body.classList.remove('light-theme', 'dark-theme');\n      document.body.classList.add(`${norm}-theme`);\n      document.body.setAttribute('data-theme', norm);\n    }\n  };\n\n  // Ensure body has initial class on mount\n  useEffect(() => {\n    try {\n      const norm = (theme || 'light').toString().toLowerCase();\n      document.body.classList.remove('light-theme', 'dark-theme');\n      document.body.classList.add(`${norm}-theme`);\n      document.body.setAttribute('data-theme', norm);\n      document.body.setAttribute('data-font', fontSize || 'medium');\n    } catch {}\n  }, [theme, fontSize]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme,\n      fontSize,\n      setFontSize\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n// ðŸ”¹ Custom hook for easier usage\n_s(ThemeProvider, \"70Wy+6FvrFdx+n5H96S6rF1C70k=\");\n_c = ThemeProvider;\nexport function useTheme() {\n  _s2();\n  return useContext(ThemeContext);\n}\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","rawStored","window","localStorage","getItem","stored","toLowerCase","theme","setThemeState","fontSize","setFontSize","setTheme","t","norm","toString","setItem","document","body","classList","remove","add","setAttribute","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["C:/Users/sampa/Downloads/myapp/myapp/myapp/frontend/src/frontend/components/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Create Context\nexport const ThemeContext = createContext();\n\n// Provider Component\nexport function ThemeProvider({ children }) {\n  // initialize from localStorage (use lowercase 'light'/'dark'); treat 'system' as 'light'\n  const rawStored = (typeof window !== 'undefined' && localStorage.getItem('chatTheme')) || 'light';\n  const stored = rawStored && rawStored.toLowerCase() === 'system' ? 'light' : rawStored;\n  const [theme, setThemeState] = useState(stored || 'light'); // 'light' | 'dark'\n  const [fontSize, setFontSize] = useState('medium'); // small | medium | large\n\n  // wrapper to persist and set body class\n  const setTheme = (t) => {\n    // normalize and treat 'system' as 'light' for now\n    let norm = (t || 'light').toString().toLowerCase();\n    if (norm === 'system') norm = 'light';\n    setThemeState(norm);\n    try {\n      // still persist the original requested value if caller wants 'system' preserved\n      localStorage.setItem('chatTheme', norm);\n    } catch {}\n    // keep a body class for global CSS selectors (.dark-theme .foo)\n    if (typeof document !== 'undefined') {\n  document.body.classList.remove('light-theme', 'dark-theme');\n  document.body.classList.add(`${norm}-theme`);\n  document.body.setAttribute('data-theme', norm);\n    }\n  };\n\n  // Ensure body has initial class on mount\n  useEffect(() => {\n    try {\n      const norm = (theme || 'light').toString().toLowerCase();\n      document.body.classList.remove('light-theme', 'dark-theme');\n      document.body.classList.add(`${norm}-theme`);\n      document.body.setAttribute('data-theme', norm);\n      document.body.setAttribute('data-font', fontSize || 'medium');\n    } catch {}\n  }, [theme, fontSize]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, fontSize, setFontSize }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// ðŸ”¹ Custom hook for easier usage\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAE3C;AACA,OAAO,SAASO,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC1C;EACA,MAAMC,SAAS,GAAI,OAAOC,MAAM,KAAK,WAAW,IAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAK,OAAO;EACjG,MAAMC,MAAM,GAAGJ,SAAS,IAAIA,SAAS,CAACK,WAAW,CAAC,CAAC,KAAK,QAAQ,GAAG,OAAO,GAAGL,SAAS;EACtF,MAAM,CAACM,KAAK,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAACY,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;;EAEpD;EACA,MAAMkB,QAAQ,GAAIC,CAAC,IAAK;IACtB;IACA,IAAIC,IAAI,GAAG,CAACD,CAAC,IAAI,OAAO,EAAEE,QAAQ,CAAC,CAAC,CAACR,WAAW,CAAC,CAAC;IAClD,IAAIO,IAAI,KAAK,QAAQ,EAAEA,IAAI,GAAG,OAAO;IACrCL,aAAa,CAACK,IAAI,CAAC;IACnB,IAAI;MACF;MACAV,YAAY,CAACY,OAAO,CAAC,WAAW,EAAEF,IAAI,CAAC;IACzC,CAAC,CAAC,MAAM,CAAC;IACT;IACA,IAAI,OAAOG,QAAQ,KAAK,WAAW,EAAE;MACvCA,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC;MAC3DH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,GAAG,CAAC,GAAGP,IAAI,QAAQ,CAAC;MAC5CG,QAAQ,CAACC,IAAI,CAACI,YAAY,CAAC,YAAY,EAAER,IAAI,CAAC;IAC5C;EACF,CAAC;;EAED;EACAnB,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAMmB,IAAI,GAAG,CAACN,KAAK,IAAI,OAAO,EAAEO,QAAQ,CAAC,CAAC,CAACR,WAAW,CAAC,CAAC;MACxDU,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,aAAa,EAAE,YAAY,CAAC;MAC3DH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,GAAG,CAAC,GAAGP,IAAI,QAAQ,CAAC;MAC5CG,QAAQ,CAACC,IAAI,CAACI,YAAY,CAAC,YAAY,EAAER,IAAI,CAAC;MAC9CG,QAAQ,CAACC,IAAI,CAACI,YAAY,CAAC,WAAW,EAAEZ,QAAQ,IAAI,QAAQ,CAAC;IAC/D,CAAC,CAAC,MAAM,CAAC;EACX,CAAC,EAAE,CAACF,KAAK,EAAEE,QAAQ,CAAC,CAAC;EAErB,oBACEb,OAAA,CAACC,YAAY,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,KAAK;MAAEI,QAAQ;MAAEF,QAAQ;MAAEC;IAAY,CAAE;IAAAX,QAAA,EACtEA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B;;AAEA;AAAA3B,EAAA,CA3CgBF,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AA4C7B,OAAO,SAAS+B,QAAQA,CAAA,EAAG;EAAAC,GAAA;EACzB,OAAOtC,UAAU,CAACK,YAAY,CAAC;AACjC;AAACiC,GAAA,CAFeD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}