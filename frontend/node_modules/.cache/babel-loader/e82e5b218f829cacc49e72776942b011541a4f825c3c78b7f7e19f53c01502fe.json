{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sampa\\\\Downloads\\\\myapp\\\\myapp\\\\myapp\\\\frontend\\\\src\\\\frontend\\\\Chatbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useTheme } from \"./components/ThemeContext\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as chrono from \"chrono-node\";\nimport SpeechToText from \"./components/SpeechToText\";\nimport \"../styles/ChatboxEnhanced.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chatbox({\n  chat\n}) {\n  _s();\n  var _debugState$messagesC, _debugState$greeted;\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentChatId, setCurrentChatId] = useState(null);\n  const {\n    theme,\n    setTheme\n  } = useTheme();\n  const chatBodyRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const typingIntervalRef = useRef(null); // holds timeout/interval id\n  const typingSessionRef = useRef(0);\n\n  // Initialize chat session (persist across navigation) — run once on mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"chatTheme\") || \"light\";\n    setTheme(savedTheme);\n    const savedChatId = localStorage.getItem(\"chatId\");\n    const savedMessagesStr = localStorage.getItem(\"chatMessages\");\n    const savedMessages = savedMessagesStr ? JSON.parse(savedMessagesStr) : null;\n    if (chat && chat.id) {\n      // Continuing an existing conversation (opened from History)\n      setCurrentChatId(chat.id);\n      setMessages(chat.messages || []);\n      localStorage.setItem(\"chatId\", chat.id);\n      localStorage.setItem(\"chatMessages\", JSON.stringify(chat.messages || []));\n    } else if (savedChatId) {\n      // Restore ongoing chat - use saved id + messages (even if empty)\n      setCurrentChatId(savedChatId);\n      setMessages(savedMessages || []);\n    } else if (savedMessages && Array.isArray(savedMessages) && savedMessages.length > 0) {\n      // If messages exist but no explicit chatId key (edge case), try to recover a chat id\n      try {\n        const archiveRaw = localStorage.getItem(\"chatSessions\") || \"{}\";\n        const archive = JSON.parse(archiveRaw);\n        const ids = Object.keys(archive);\n        if (ids.length) {\n          const lastId = ids[ids.length - 1];\n          setCurrentChatId(lastId);\n        } else {\n          // Generate an id but treat this as a restored session (do not force \"new chat\" UX)\n          const recoveredId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n          setCurrentChatId(recoveredId);\n          localStorage.setItem(\"chatId\", recoveredId);\n        }\n      } catch {\n        const recoveredId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n        setCurrentChatId(recoveredId);\n        localStorage.setItem(\"chatId\", recoveredId);\n      }\n      setMessages(savedMessages || []);\n    } else {\n      // No explicit saved chat id or messages. Try to recover the last archived chat (chatSessions)\n      try {\n        const archiveRaw = localStorage.getItem(\"chatSessions\") || \"{}\";\n        const archive = JSON.parse(archiveRaw);\n        const ids = Object.keys(archive);\n        if (ids.length) {\n          const lastId = ids[ids.length - 1];\n          const lastMsgs = Array.isArray(archive[lastId]) ? archive[lastId] : [];\n          setCurrentChatId(lastId);\n          setMessages(lastMsgs);\n          localStorage.setItem(\"chatId\", lastId);\n          localStorage.setItem(\"chatMessages\", JSON.stringify(lastMsgs));\n        } else {\n          // No archived chats either — create new chat id and empty messages\n          const newId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n          setCurrentChatId(newId);\n          setMessages([]);\n          localStorage.setItem(\"chatId\", newId);\n          localStorage.setItem(\"chatMessages\", JSON.stringify([]));\n        }\n      } catch {\n        const newId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n        setCurrentChatId(newId);\n        setMessages([]);\n        localStorage.setItem(\"chatId\", newId);\n        localStorage.setItem(\"chatMessages\", JSON.stringify([]));\n      }\n    }\n\n    // Try to fetch a personalized greeting from backend for first-open\n    (async function fetchGreeting() {\n      try {\n        // Only fetch greeting if we haven't shown it in this browser session\n        const greetedLocal = localStorage.getItem('greeted_local');\n        if (greetedLocal) return;\n        const token = localStorage.getItem('authToken');\n        const params = new URLSearchParams();\n        if (token) params.append('token', token);\n        if (savedChatId) params.append('chat_id', savedChatId);\n        const res = await fetch('/chat/greet?' + params.toString());\n        if (!res.ok) return;\n        const j = await res.json();\n        if (j && j.message) {\n          // Only insert greeting if messages array is currently empty\n          setMessages(prev => {\n            if (prev && prev.length) return prev;\n            return [{\n              sender: 'bot',\n              content: j.message,\n              type: 'text',\n              timestamp: new Date().toLocaleTimeString()\n            }];\n          });\n          // mark locally so we don't fetch again this session\n          try {\n            localStorage.setItem('greeted_local', '1');\n          } catch {}\n        } else {\n          // If backend didn't return a message, try local user data stored on login\n          try {\n            const userRaw = localStorage.getItem('user');\n            if (userRaw) {\n              const u = JSON.parse(userRaw);\n              const name = u === null || u === void 0 ? void 0 : u.name;\n              if (name) {\n                setMessages(prev => {\n                  if (prev && prev.length) return prev;\n                  return [{\n                    sender: 'bot',\n                    content: `Hello ${name}! How can I assist you today?`,\n                    type: 'text',\n                    timestamp: new Date().toLocaleTimeString()\n                  }];\n                });\n                try {\n                  localStorage.setItem('greeted_local', '1');\n                } catch {}\n              }\n            }\n          } catch {}\n        }\n      } catch (e) {\n        // ignore failures\n      }\n    })();\n  }, []);\n\n  // If a `chat` prop is later provided (e.g., user opened a chat from History), update UI\n  useEffect(() => {\n    if (chat && chat.id) {\n      setCurrentChatId(chat.id);\n      setMessages(chat.messages || []);\n      try {\n        localStorage.setItem(\"chatId\", chat.id);\n        localStorage.setItem(\"chatMessages\", JSON.stringify(chat.messages || []));\n      } catch {}\n    }\n  }, [chat]);\n\n  // Persist chat + theme\n  useEffect(() => {\n    if (currentChatId) localStorage.setItem(\"chatId\", currentChatId);\n    localStorage.setItem(\"chatMessages\", JSON.stringify(messages));\n    localStorage.setItem(\"chatTheme\", theme);\n  }, [messages, currentChatId, theme]);\n\n  // Smooth scroll to bottom\n  const scrollToBottom = () => {\n    if (chatBodyRef.current) {\n      chatBodyRef.current.scrollTo({\n        top: chatBodyRef.current.scrollHeight,\n        behavior: \"smooth\"\n      });\n    }\n  };\n  useEffect(scrollToBottom, [messages]);\n\n  // Typing simulation (word-by-word) with de-dupe and single temp bubble\n  const simulateTyping = fullText => {\n    // Stop any previous typing interval\n    if (typingIntervalRef.current) {\n      clearInterval(typingIntervalRef.current);\n      typingIntervalRef.current = null;\n    }\n\n    // Start a new typing session (guards against duplicate intervals)\n    typingSessionRef.current += 1;\n    const sessionId = typingSessionRef.current;\n    const tokens = fullText.match(/\\S+\\s*/g) || [fullText]; // words with trailing spaces\n    let index = 0;\n    setIsTyping(true);\n    // Ensure a single temp message exists and is empty\n    setMessages(prev => {\n      // Remove any existing temp\n      let next = prev.filter(m => m.sender !== \"bot-temp\");\n      // If the last message is already the same final bot content, remove it to avoid duplicate during typing\n      if (next.length && next[next.length - 1].sender === \"bot\" && next[next.length - 1].content === fullText) {\n        next = next.slice(0, -1);\n      }\n      return [...next, {\n        sender: \"bot-temp\",\n        content: \"\",\n        type: \"text\",\n        timestamp: new Date().toLocaleTimeString()\n      }];\n    });\n    const step = () => {\n      // Abort if a new typing session started\n      if (typingSessionRef.current !== sessionId) return;\n      if (index < tokens.length) {\n        const displayed = tokens.slice(0, index + 1).join(\"\");\n        setMessages(prev => {\n          var _temp;\n          const temp = [...prev];\n          if (((_temp = temp[temp.length - 1]) === null || _temp === void 0 ? void 0 : _temp.sender) === \"bot-temp\") {\n            temp[temp.length - 1].content = displayed;\n          }\n          return temp;\n        });\n        index++;\n        typingIntervalRef.current = setTimeout(step, 120);\n      } else {\n        setIsTyping(false);\n        setMessages(prev => {\n          const filtered = prev.filter(m => m.sender !== \"bot-temp\");\n          // Avoid pushing duplicate final message\n          if (filtered.length && filtered[filtered.length - 1].sender === \"bot\" && filtered[filtered.length - 1].content === fullText) {\n            return filtered;\n          }\n          filtered.push({\n            sender: \"bot\",\n            content: fullText,\n            type: \"text\",\n            timestamp: new Date().toLocaleTimeString()\n          });\n          return filtered;\n        });\n        typingIntervalRef.current = null;\n      }\n    };\n    typingIntervalRef.current = setTimeout(step, 120);\n  };\n\n  // Cleanup on unmount to avoid stray intervals\n  useEffect(() => {\n    return () => {\n      if (typingIntervalRef.current) {\n        clearTimeout(typingIntervalRef.current);\n        typingIntervalRef.current = null;\n      }\n      typingSessionRef.current += 1; // invalidate any running session\n    };\n  }, []);\n\n  // Send message (unchanged)\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMsg = {\n      sender: \"user\",\n      content: input,\n      type: \"text\",\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages(prev => [...prev, newMsg]);\n    setInput(\"\");\n    setIsTyping(true);\n    try {\n      const token = localStorage.getItem(\"authToken\");\n      const userRaw = localStorage.getItem('user');\n      const userObj = userRaw ? JSON.parse(userRaw) : null;\n      const res = await fetch(\"/chat/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_message: input,\n          token,\n          chat_id: currentChatId,\n          user_name: userObj === null || userObj === void 0 ? void 0 : userObj.name,\n          user_email: userObj === null || userObj === void 0 ? void 0 : userObj.email\n        })\n      });\n      const data = await res.json();\n      const reply = data.reply || data.response || \"⚠ No AI response\";\n      simulateTyping(reply);\n      // adopt canonical chat id if backend returns it\n      if (data.chat_id && data.chat_id !== currentChatId) {\n        setCurrentChatId(data.chat_id);\n        localStorage.setItem(\"chatId\", data.chat_id);\n      }\n      // open external URL if provided\n      if (data.open_url) {\n        try {\n          const urlStr = String(data.open_url);\n          if (urlStr.includes(\"youtube.com/results?search_query=\")) {\n            // Resolve top YouTube video and open watch URL with autoplay\n            const q = decodeURIComponent(urlStr.split(\"search_query=\")[1] || \"\");\n            try {\n              const api = `https://piped.video/api/v1/search?q=${encodeURIComponent(q)}&region=IN`;\n              const r = await fetch(api, {\n                headers: {\n                  \"Accept\": \"application/json\"\n                }\n              });\n              const j = await r.json();\n              const item = Array.isArray(j) ? j.find(x => (x.type === \"video\" || x.duration) && (x.url || x.id)) : null;\n              let vid = (item === null || item === void 0 ? void 0 : item.id) || \"\";\n              if (!vid && item !== null && item !== void 0 && item.url) {\n                const m = String(item.url).match(/v=([^&]+)/);\n                if (m) vid = m[1];\n              }\n              if (vid) {\n                const watchUrl = `https://www.youtube.com/watch?v=${vid}&autoplay=1&mute=1`;\n                window.open(watchUrl, \"_blank\", \"noopener,noreferrer\");\n              } else {\n                window.open(urlStr, \"_blank\", \"noopener,noreferrer\");\n              }\n            } catch {\n              window.open(urlStr, \"_blank\", \"noopener,noreferrer\");\n            }\n          } else {\n            window.open(urlStr, \"_blank\", \"noopener,noreferrer\");\n          }\n        } catch {}\n      }\n      // if backend returns a canonical chat_id (e.g., UUID), adopt it\n      if (data.chat_id && data.chat_id !== currentChatId) {\n        setCurrentChatId(data.chat_id);\n      }\n    } catch {\n      setIsTyping(false);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        content: \"⚠ Unable to reach backend\",\n        type: \"text\",\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n    }\n  };\n\n  // File upload (unchanged)\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const previewURL = URL.createObjectURL(file);\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      content: previewURL,\n      type: \"image\",\n      timestamp: new Date().toLocaleTimeString()\n    }]);\n    scrollToBottom();\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"token\", localStorage.getItem(\"authToken\"));\n    formData.append(\"chat_id\", currentChatId);\n    try {\n      const res = await fetch(\"/chat-with-upload/\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await res.json();\n      const reply = data.response || \"⚠ File processed, no detailed reply.\";\n      simulateTyping(reply);\n    } catch {\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        content: \"⚠ File upload failed\",\n        type: \"text\",\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n    }\n  };\n\n  // Extra actions\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n  const startNewChat = () => {\n    // Preserve current thread's messages in a simple local archive\n    try {\n      const archiveRaw = localStorage.getItem(\"chatSessions\") || \"{}\";\n      const archive = JSON.parse(archiveRaw);\n      if (currentChatId && Array.isArray(messages) && messages.length) {\n        archive[currentChatId] = messages;\n        localStorage.setItem(\"chatSessions\", JSON.stringify(archive));\n      }\n    } catch {}\n    const newId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n    setCurrentChatId(newId);\n    setMessages([]);\n    localStorage.setItem(\"chatId\", newId);\n    localStorage.setItem(\"chatMessages\", JSON.stringify([]));\n  };\n\n  // ----- Dev debug panel (visible when localStorage.debug === '1') -----\n  const [debugOn, setDebugOn] = useState(Boolean(localStorage.getItem('debug')));\n  const [debugState, setDebugState] = useState({});\n  const refreshDebug = () => {\n    try {\n      const token = localStorage.getItem('authToken');\n      const userRaw = localStorage.getItem('user');\n      const userObj = userRaw ? JSON.parse(userRaw) : null;\n      const chatIdLS = localStorage.getItem('chatId');\n      const chatMsgsRaw = localStorage.getItem('chatMessages');\n      const msgs = chatMsgsRaw ? JSON.parse(chatMsgsRaw) : null;\n      const greeted = localStorage.getItem('greeted_local');\n      setDebugState({\n        token: token ? token.slice(0, 20) + '...' : null,\n        user: userObj,\n        chatId: chatIdLS,\n        messagesCount: Array.isArray(msgs) ? msgs.length : null,\n        greeted\n      });\n    } catch {\n      setDebugState({});\n    }\n  };\n  useEffect(() => {\n    if (debugOn) refreshDebug();\n  }, [debugOn, messages, currentChatId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-wrapper ${theme}-theme`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header d-flex justify-content-between align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex align-items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"mb-0\",\n            children: \"\\uD83D\\uDCAC AI Chat Assistant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"theme-toggle-btn\",\n            onClick: toggleTheme,\n            title: \"Toggle Theme\",\n            children: theme === \"dark\" ? \"🌙\" : \"☀️\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex gap-2\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-sm btn-primary\",\n            onClick: startNewChat,\n            title: \"Start New Chat\",\n            children: \"\\u2728 New Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        ref: chatBodyRef,\n        children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-placeholder\",\n          children: \"\\uD83D\\uDC4B Hello! Ask something to start chatting...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this) : messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.sender}`,\n          children: [msg.type === \"text\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n            src: msg.content,\n            alt: \"upload\",\n            className: \"message-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"timestamp\",\n            children: msg.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 15\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message bot\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble typing-bubble\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-extra-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"extra-btn\",\n            onClick: () => fileInputRef.current.click(),\n            title: \"Attach File\",\n            children: \"\\uD83D\\uDCCE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SpeechToText, {\n            onChange: setInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: fileInputRef,\n          style: {\n            display: \"none\"\n          },\n          accept: \"image/*,.pdf,.txt,.doc,.docx\",\n          onChange: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"chat-input\",\n          placeholder: \"Type a message...\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && sendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-btn\",\n          onClick: sendMessage,\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this), debugOn && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        right: 12,\n        bottom: 12,\n        width: 320,\n        maxHeight: '45vh',\n        overflow: 'auto',\n        background: 'rgba(0,0,0,0.8)',\n        color: '#fff',\n        padding: 12,\n        borderRadius: 8,\n        fontSize: 12,\n        zIndex: 9999\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: 6\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"DEV DEBUG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-sm btn-light\",\n            onClick: () => {\n              setDebugOn(false);\n              localStorage.removeItem('debug');\n            },\n            style: {\n              marginRight: 6\n            },\n            children: \"Hide\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-sm btn-secondary\",\n            onClick: refreshDebug,\n            children: \"Refresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"token:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 48\n        }, this), \" \", debugState.token || '(none)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"user:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 48\n        }, this), \" \", debugState.user ? JSON.stringify(debugState.user) : '(none)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"chatId:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 16\n        }, this), \" \", debugState.chatId || '(none)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"messagesCount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 16\n        }, this), \" \", (_debugState$messagesC = debugState.messagesCount) !== null && _debugState$messagesC !== void 0 ? _debugState$messagesC : '(none)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"greeted_local:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 16\n        }, this), \" \", (_debugState$greeted = debugState.greeted) !== null && _debugState$greeted !== void 0 ? _debugState$greeted : '(none)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbox, \"tRm4B49tJjG2U0w2SMkVyB4U3+w=\", false, function () {\n  return [useTheme];\n});\n_c = Chatbox;\nvar _c;\n$RefreshReg$(_c, \"Chatbox\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useTheme","chrono","SpeechToText","jsxDEV","_jsxDEV","Chatbox","chat","_s","_debugState$messagesC","_debugState$greeted","messages","setMessages","input","setInput","isTyping","setIsTyping","currentChatId","setCurrentChatId","theme","setTheme","chatBodyRef","fileInputRef","typingIntervalRef","typingSessionRef","savedTheme","localStorage","getItem","savedChatId","savedMessagesStr","savedMessages","JSON","parse","id","setItem","stringify","Array","isArray","length","archiveRaw","archive","ids","Object","keys","lastId","recoveredId","Date","now","Math","random","toString","slice","lastMsgs","newId","fetchGreeting","greetedLocal","token","params","URLSearchParams","append","res","fetch","ok","j","json","message","prev","sender","content","type","timestamp","toLocaleTimeString","userRaw","u","name","e","scrollToBottom","current","scrollTo","top","scrollHeight","behavior","simulateTyping","fullText","clearInterval","sessionId","tokens","match","index","next","filter","m","step","displayed","join","_temp","temp","setTimeout","filtered","push","clearTimeout","sendMessage","trim","newMsg","userObj","method","headers","body","user_message","chat_id","user_name","user_email","email","data","reply","response","open_url","urlStr","String","includes","q","decodeURIComponent","split","api","encodeURIComponent","r","item","find","x","duration","url","vid","watchUrl","window","open","handleFileUpload","event","file","target","files","previewURL","URL","createObjectURL","formData","FormData","toggleTheme","startNewChat","debugOn","setDebugOn","Boolean","debugState","setDebugState","refreshDebug","chatIdLS","chatMsgsRaw","msgs","greeted","user","chatId","messagesCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","ref","map","msg","i","src","alt","click","onChange","style","display","accept","placeholder","value","onKeyDown","key","position","right","bottom","width","maxHeight","overflow","background","color","padding","borderRadius","fontSize","zIndex","justifyContent","alignItems","marginBottom","removeItem","marginRight","whiteSpace","_c","$RefreshReg$"],"sources":["C:/Users/sampa/Downloads/myapp/myapp/myapp/frontend/src/frontend/Chatbox.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useTheme } from \"./components/ThemeContext\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as chrono from \"chrono-node\";\nimport SpeechToText from \"./components/SpeechToText\";\nimport \"../styles/ChatboxEnhanced.css\";\n\nexport default function Chatbox({ chat }) {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentChatId, setCurrentChatId] = useState(null);\n  const { theme, setTheme } = useTheme();\n  const chatBodyRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const typingIntervalRef = useRef(null); // holds timeout/interval id\n  const typingSessionRef = useRef(0);\n\n  // Initialize chat session (persist across navigation) — run once on mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"chatTheme\") || \"light\";\n    setTheme(savedTheme);\n\n    const savedChatId = localStorage.getItem(\"chatId\");\n    const savedMessagesStr = localStorage.getItem(\"chatMessages\");\n    const savedMessages = savedMessagesStr ? JSON.parse(savedMessagesStr) : null;\n\n    if (chat && chat.id) {\n      // Continuing an existing conversation (opened from History)\n      setCurrentChatId(chat.id);\n      setMessages(chat.messages || []);\n      localStorage.setItem(\"chatId\", chat.id);\n      localStorage.setItem(\"chatMessages\", JSON.stringify(chat.messages || []));\n    } else if (savedChatId) {\n      // Restore ongoing chat - use saved id + messages (even if empty)\n      setCurrentChatId(savedChatId);\n      setMessages(savedMessages || []);\n    } else if (savedMessages && Array.isArray(savedMessages) && savedMessages.length > 0) {\n      // If messages exist but no explicit chatId key (edge case), try to recover a chat id\n      try {\n        const archiveRaw = localStorage.getItem(\"chatSessions\") || \"{}\";\n        const archive = JSON.parse(archiveRaw);\n        const ids = Object.keys(archive);\n        if (ids.length) {\n          const lastId = ids[ids.length - 1];\n          setCurrentChatId(lastId);\n        } else {\n          // Generate an id but treat this as a restored session (do not force \"new chat\" UX)\n          const recoveredId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n          setCurrentChatId(recoveredId);\n          localStorage.setItem(\"chatId\", recoveredId);\n        }\n      } catch {\n        const recoveredId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n        setCurrentChatId(recoveredId);\n        localStorage.setItem(\"chatId\", recoveredId);\n      }\n      setMessages(savedMessages || []);\n    } else {\n      // No explicit saved chat id or messages. Try to recover the last archived chat (chatSessions)\n      try {\n        const archiveRaw = localStorage.getItem(\"chatSessions\") || \"{}\";\n        const archive = JSON.parse(archiveRaw);\n        const ids = Object.keys(archive);\n        if (ids.length) {\n          const lastId = ids[ids.length - 1];\n          const lastMsgs = Array.isArray(archive[lastId]) ? archive[lastId] : [];\n          setCurrentChatId(lastId);\n          setMessages(lastMsgs);\n          localStorage.setItem(\"chatId\", lastId);\n          localStorage.setItem(\"chatMessages\", JSON.stringify(lastMsgs));\n        } else {\n          // No archived chats either — create new chat id and empty messages\n          const newId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n          setCurrentChatId(newId);\n          setMessages([]);\n          localStorage.setItem(\"chatId\", newId);\n          localStorage.setItem(\"chatMessages\", JSON.stringify([]));\n        }\n      } catch {\n        const newId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n        setCurrentChatId(newId);\n        setMessages([]);\n        localStorage.setItem(\"chatId\", newId);\n        localStorage.setItem(\"chatMessages\", JSON.stringify([]));\n      }\n    }\n\n    // Try to fetch a personalized greeting from backend for first-open\n    (async function fetchGreeting(){\n      try {\n        // Only fetch greeting if we haven't shown it in this browser session\n        const greetedLocal = localStorage.getItem('greeted_local');\n        if (greetedLocal) return;\n        const token = localStorage.getItem('authToken');\n        const params = new URLSearchParams();\n        if (token) params.append('token', token);\n        if (savedChatId) params.append('chat_id', savedChatId);\n        const res = await fetch('/chat/greet?' + params.toString());\n        if (!res.ok) return;\n        const j = await res.json();\n        if (j && j.message) {\n          // Only insert greeting if messages array is currently empty\n          setMessages((prev) => {\n            if (prev && prev.length) return prev;\n            return [\n              {\n                sender: 'bot',\n                content: j.message,\n                type: 'text',\n                timestamp: new Date().toLocaleTimeString(),\n              },\n            ];\n          });\n          // mark locally so we don't fetch again this session\n          try { localStorage.setItem('greeted_local', '1'); } catch {}\n        }\n        else {\n          // If backend didn't return a message, try local user data stored on login\n          try {\n            const userRaw = localStorage.getItem('user');\n            if (userRaw) {\n              const u = JSON.parse(userRaw);\n              const name = u?.name;\n              if (name) {\n                setMessages((prev) => {\n                  if (prev && prev.length) return prev;\n                  return [\n                    {\n                      sender: 'bot',\n                      content: `Hello ${name}! How can I assist you today?`,\n                      type: 'text',\n                      timestamp: new Date().toLocaleTimeString(),\n                    },\n                  ];\n                });\n                try { localStorage.setItem('greeted_local', '1'); } catch {}\n              }\n            }\n          } catch {}\n        }\n      } catch (e) {\n        // ignore failures\n      }\n    })();\n  }, []);\n\n  // If a `chat` prop is later provided (e.g., user opened a chat from History), update UI\n  useEffect(() => {\n    if (chat && chat.id) {\n      setCurrentChatId(chat.id);\n      setMessages(chat.messages || []);\n      try {\n        localStorage.setItem(\"chatId\", chat.id);\n        localStorage.setItem(\"chatMessages\", JSON.stringify(chat.messages || []));\n      } catch {}\n    }\n  }, [chat]);\n\n  // Persist chat + theme\n  useEffect(() => {\n    if (currentChatId) localStorage.setItem(\"chatId\", currentChatId);\n    localStorage.setItem(\"chatMessages\", JSON.stringify(messages));\n    localStorage.setItem(\"chatTheme\", theme);\n  }, [messages, currentChatId, theme]);\n\n  // Smooth scroll to bottom\n  const scrollToBottom = () => {\n    if (chatBodyRef.current) {\n      chatBodyRef.current.scrollTo({\n        top: chatBodyRef.current.scrollHeight,\n        behavior: \"smooth\",\n      });\n    }\n  };\n  useEffect(scrollToBottom, [messages]);\n\n  // Typing simulation (word-by-word) with de-dupe and single temp bubble\n  const simulateTyping = (fullText) => {\n    // Stop any previous typing interval\n    if (typingIntervalRef.current) {\n      clearInterval(typingIntervalRef.current);\n      typingIntervalRef.current = null;\n    }\n\n    // Start a new typing session (guards against duplicate intervals)\n    typingSessionRef.current += 1;\n    const sessionId = typingSessionRef.current;\n\n    const tokens = fullText.match(/\\S+\\s*/g) || [fullText]; // words with trailing spaces\n    let index = 0;\n    setIsTyping(true);\n    // Ensure a single temp message exists and is empty\n    setMessages((prev) => {\n      // Remove any existing temp\n      let next = prev.filter((m) => m.sender !== \"bot-temp\");\n      // If the last message is already the same final bot content, remove it to avoid duplicate during typing\n      if (next.length && next[next.length - 1].sender === \"bot\" && next[next.length - 1].content === fullText) {\n        next = next.slice(0, -1);\n      }\n      return [\n        ...next,\n        {\n          sender: \"bot-temp\",\n          content: \"\",\n          type: \"text\",\n          timestamp: new Date().toLocaleTimeString(),\n        },\n      ];\n    });\n\n    const step = () => {\n      // Abort if a new typing session started\n      if (typingSessionRef.current !== sessionId) return;\n      if (index < tokens.length) {\n        const displayed = tokens.slice(0, index + 1).join(\"\");\n        setMessages((prev) => {\n          const temp = [...prev];\n          if (temp[temp.length - 1]?.sender === \"bot-temp\") {\n            temp[temp.length - 1].content = displayed;\n          }\n          return temp;\n        });\n        index++;\n        typingIntervalRef.current = setTimeout(step, 120);\n      } else {\n        setIsTyping(false);\n        setMessages((prev) => {\n          const filtered = prev.filter((m) => m.sender !== \"bot-temp\");\n          // Avoid pushing duplicate final message\n          if (filtered.length && filtered[filtered.length - 1].sender === \"bot\" && filtered[filtered.length - 1].content === fullText) {\n            return filtered;\n          }\n          filtered.push({\n            sender: \"bot\",\n            content: fullText,\n            type: \"text\",\n            timestamp: new Date().toLocaleTimeString(),\n          });\n          return filtered;\n        });\n        typingIntervalRef.current = null;\n      }\n    };\n    typingIntervalRef.current = setTimeout(step, 120);\n  };\n\n  // Cleanup on unmount to avoid stray intervals\n  useEffect(() => {\n    return () => {\n      if (typingIntervalRef.current) {\n        clearTimeout(typingIntervalRef.current);\n        typingIntervalRef.current = null;\n      }\n      typingSessionRef.current += 1; // invalidate any running session\n    };\n  }, []);\n\n  // Send message (unchanged)\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMsg = {\n      sender: \"user\",\n      content: input,\n      type: \"text\",\n      timestamp: new Date().toLocaleTimeString(),\n    };\n    setMessages((prev) => [...prev, newMsg]);\n    setInput(\"\");\n    setIsTyping(true);\n\n    try {\n      const token = localStorage.getItem(\"authToken\");\n      const userRaw = localStorage.getItem('user');\n      const userObj = userRaw ? JSON.parse(userRaw) : null;\n      const res = await fetch(\"/chat/\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          user_message: input,\n          token,\n          chat_id: currentChatId,\n          user_name: userObj?.name,\n          user_email: userObj?.email,\n        }),\n      });\n      const data = await res.json();\n      const reply = data.reply || data.response || \"⚠ No AI response\";\n      simulateTyping(reply);\n      // adopt canonical chat id if backend returns it\n      if (data.chat_id && data.chat_id !== currentChatId) {\n        setCurrentChatId(data.chat_id);\n        localStorage.setItem(\"chatId\", data.chat_id);\n      }\n      // open external URL if provided\n      if (data.open_url) {\n        try {\n          const urlStr = String(data.open_url);\n          if (urlStr.includes(\"youtube.com/results?search_query=\")) {\n            // Resolve top YouTube video and open watch URL with autoplay\n            const q = decodeURIComponent(urlStr.split(\"search_query=\")[1] || \"\");\n            try {\n              const api = `https://piped.video/api/v1/search?q=${encodeURIComponent(q)}&region=IN`;\n              const r = await fetch(api, { headers: { \"Accept\": \"application/json\" } });\n              const j = await r.json();\n              const item = Array.isArray(j) ? j.find(x => (x.type === \"video\" || x.duration) && (x.url || x.id)) : null;\n              let vid = item?.id || \"\";\n              if (!vid && item?.url) {\n                const m = String(item.url).match(/v=([^&]+)/);\n                if (m) vid = m[1];\n              }\n              if (vid) {\n                const watchUrl = `https://www.youtube.com/watch?v=${vid}&autoplay=1&mute=1`;\n                window.open(watchUrl, \"_blank\", \"noopener,noreferrer\");\n              } else {\n                window.open(urlStr, \"_blank\", \"noopener,noreferrer\");\n              }\n            } catch {\n              window.open(urlStr, \"_blank\", \"noopener,noreferrer\");\n            }\n          } else {\n            window.open(urlStr, \"_blank\", \"noopener,noreferrer\");\n          }\n        } catch {}\n      }\n      // if backend returns a canonical chat_id (e.g., UUID), adopt it\n      if (data.chat_id && data.chat_id !== currentChatId) {\n        setCurrentChatId(data.chat_id);\n      }\n    } catch {\n      setIsTyping(false);\n      setMessages((prev) => [\n        ...prev,\n        {\n          sender: \"bot\",\n          content: \"⚠ Unable to reach backend\",\n          type: \"text\",\n          timestamp: new Date().toLocaleTimeString(),\n        },\n      ]);\n    }\n  };\n\n  // File upload (unchanged)\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const previewURL = URL.createObjectURL(file);\n    setMessages((prev) => [\n      ...prev,\n      {\n        sender: \"user\",\n        content: previewURL,\n        type: \"image\",\n        timestamp: new Date().toLocaleTimeString(),\n      },\n    ]);\n    scrollToBottom();\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"token\", localStorage.getItem(\"authToken\"));\n    formData.append(\"chat_id\", currentChatId);\n\n    try {\n      const res = await fetch(\"/chat-with-upload/\", {\n        method: \"POST\",\n        body: formData,\n      });\n      const data = await res.json();\n      const reply = data.response || \"⚠ File processed, no detailed reply.\";\n      simulateTyping(reply);\n    } catch {\n      setMessages((prev) => [\n        ...prev,\n        {\n          sender: \"bot\",\n          content: \"⚠ File upload failed\",\n          type: \"text\",\n          timestamp: new Date().toLocaleTimeString(),\n        },\n      ]);\n    }\n  };\n\n  // Extra actions\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const startNewChat = () => {\n    // Preserve current thread's messages in a simple local archive\n    try {\n      const archiveRaw = localStorage.getItem(\"chatSessions\") || \"{}\";\n      const archive = JSON.parse(archiveRaw);\n      if (currentChatId && Array.isArray(messages) && messages.length) {\n        archive[currentChatId] = messages;\n        localStorage.setItem(\"chatSessions\", JSON.stringify(archive));\n      }\n    } catch {}\n\n    const newId = `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;\n    setCurrentChatId(newId);\n    setMessages([]);\n    localStorage.setItem(\"chatId\", newId);\n    localStorage.setItem(\"chatMessages\", JSON.stringify([]));\n  };\n\n  // ----- Dev debug panel (visible when localStorage.debug === '1') -----\n  const [debugOn, setDebugOn] = useState(Boolean(localStorage.getItem('debug')));\n  const [debugState, setDebugState] = useState({});\n  const refreshDebug = () => {\n    try {\n      const token = localStorage.getItem('authToken');\n      const userRaw = localStorage.getItem('user');\n      const userObj = userRaw ? JSON.parse(userRaw) : null;\n      const chatIdLS = localStorage.getItem('chatId');\n      const chatMsgsRaw = localStorage.getItem('chatMessages');\n      const msgs = chatMsgsRaw ? JSON.parse(chatMsgsRaw) : null;\n      const greeted = localStorage.getItem('greeted_local');\n      setDebugState({ token: token ? (token.slice(0,20) + '...') : null, user: userObj, chatId: chatIdLS, messagesCount: Array.isArray(msgs) ? msgs.length : null, greeted });\n    } catch {\n      setDebugState({});\n    }\n  };\n\n  useEffect(() => {\n    if (debugOn) refreshDebug();\n  }, [debugOn, messages, currentChatId]);\n\n  \n\n  return (\n    <div className={`chat-wrapper ${theme}-theme`}>\n      <div className=\"chatbox shadow-lg\">\n        {/* Header */}\n        <div className=\"chat-header d-flex justify-content-between align-items-center\">\n          <div className=\"d-flex align-items-center gap-2\">\n            <h5 className=\"mb-0\">💬 AI Chat Assistant</h5>\n            <button\n              className=\"theme-toggle-btn\"\n              onClick={toggleTheme}\n              title=\"Toggle Theme\"\n            >\n              {theme === \"dark\" ? \"🌙\" : \"☀️\"}\n            </button>\n          </div>\n\n          <div className=\"d-flex gap-2\">\n            <button className=\"btn btn-sm btn-primary\" onClick={startNewChat} title=\"Start New Chat\">\n              ✨ New Chat\n            </button>\n          </div>\n        </div>\n\n        {/* Body */}\n        <div className=\"chat-body\" ref={chatBodyRef}>\n          {messages.length === 0 ? (\n            <div className=\"chat-placeholder\">\n              👋 Hello! Ask something to start chatting...\n            </div>\n          ) : (\n            messages.map((msg, i) => (\n              <div key={i} className={`chat-message ${msg.sender}`}>\n                {msg.type === \"text\" ? (\n                  <div className=\"message-bubble\">{msg.content}</div>\n                ) : (\n                  <img\n                    src={msg.content}\n                    alt=\"upload\"\n                    className=\"message-image\"\n                  />\n                )}\n                <small className=\"timestamp\">{msg.timestamp}</small>\n              </div>\n            ))\n          )}\n          {isTyping && (\n            <div className=\"chat-message bot\">\n              <div className=\"message-bubble typing-bubble\">\n                <span className=\"typing-dot\"></span>\n                <span className=\"typing-dot\"></span>\n                <span className=\"typing-dot\"></span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Input */}\n        <div className=\"chat-input-area\">\n          <div className=\"chat-extra-btns\">\n            <div\n              className=\"extra-btn\"\n              onClick={() => fileInputRef.current.click()}\n              title=\"Attach File\"\n            >\n              📎\n            </div>\n            <SpeechToText onChange={setInput} />\n          </div>\n\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            style={{ display: \"none\" }}\n            accept=\"image/*,.pdf,.txt,.doc,.docx\"\n            onChange={handleFileUpload}\n          />\n\n          <input\n            type=\"text\"\n            className=\"chat-input\"\n            placeholder=\"Type a message...\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n          />\n\n          <button className=\"send-btn\" onClick={sendMessage}>\n            ➤\n          </button>\n        </div>\n      </div>\n      {/* Dev debug panel */}\n      {debugOn && (\n        <div style={{position: 'fixed', right: 12, bottom: 12, width: 320, maxHeight: '45vh', overflow: 'auto', background: 'rgba(0,0,0,0.8)', color: '#fff', padding: 12, borderRadius: 8, fontSize: 12, zIndex: 9999}}>\n          <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 6}}>\n            <strong>DEV DEBUG</strong>\n            <div>\n              <button className=\"btn btn-sm btn-light\" onClick={() => { setDebugOn(false); localStorage.removeItem('debug'); }} style={{marginRight:6}}>Hide</button>\n              <button className=\"btn btn-sm btn-secondary\" onClick={refreshDebug}>Refresh</button>\n            </div>\n          </div>\n          <div style={{whiteSpace:'pre-wrap'}}><strong>token:</strong> {debugState.token || '(none)'}</div>\n          <div style={{whiteSpace:'pre-wrap'}}><strong>user:</strong> {debugState.user ? JSON.stringify(debugState.user) : '(none)'}</div>\n          <div><strong>chatId:</strong> {debugState.chatId || '(none)'}</div>\n          <div><strong>messagesCount:</strong> {debugState.messagesCount ?? '(none)'}</div>\n          <div><strong>greeted_local:</strong> {debugState.greeted ?? '(none)'}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,OAAO,sCAAsC;AAC7C,OAAO,KAAKC,MAAM,MAAM,aAAa;AACrC,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,eAAe,SAASC,OAAOA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,mBAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM;IAAEqB,KAAK;IAAEC;EAAS,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EACtC,MAAMoB,WAAW,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMuB,YAAY,GAAGvB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMwB,iBAAiB,GAAGxB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAMyB,gBAAgB,GAAGzB,MAAM,CAAC,CAAC,CAAC;;EAElC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMyB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,OAAO;IAC/DP,QAAQ,CAACK,UAAU,CAAC;IAEpB,MAAMG,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAClD,MAAME,gBAAgB,GAAGH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC7D,MAAMG,aAAa,GAAGD,gBAAgB,GAAGE,IAAI,CAACC,KAAK,CAACH,gBAAgB,CAAC,GAAG,IAAI;IAE5E,IAAItB,IAAI,IAAIA,IAAI,CAAC0B,EAAE,EAAE;MACnB;MACAf,gBAAgB,CAACX,IAAI,CAAC0B,EAAE,CAAC;MACzBrB,WAAW,CAACL,IAAI,CAACI,QAAQ,IAAI,EAAE,CAAC;MAChCe,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAE3B,IAAI,CAAC0B,EAAE,CAAC;MACvCP,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAAC5B,IAAI,CAACI,QAAQ,IAAI,EAAE,CAAC,CAAC;IAC3E,CAAC,MAAM,IAAIiB,WAAW,EAAE;MACtB;MACAV,gBAAgB,CAACU,WAAW,CAAC;MAC7BhB,WAAW,CAACkB,aAAa,IAAI,EAAE,CAAC;IAClC,CAAC,MAAM,IAAIA,aAAa,IAAIM,KAAK,CAACC,OAAO,CAACP,aAAa,CAAC,IAAIA,aAAa,CAACQ,MAAM,GAAG,CAAC,EAAE;MACpF;MACA,IAAI;QACF,MAAMC,UAAU,GAAGb,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI;QAC/D,MAAMa,OAAO,GAAGT,IAAI,CAACC,KAAK,CAACO,UAAU,CAAC;QACtC,MAAME,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC;QAChC,IAAIC,GAAG,CAACH,MAAM,EAAE;UACd,MAAMM,MAAM,GAAGH,GAAG,CAACA,GAAG,CAACH,MAAM,GAAG,CAAC,CAAC;UAClCpB,gBAAgB,CAAC0B,MAAM,CAAC;QAC1B,CAAC,MAAM;UACL;UACA,MAAMC,WAAW,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;UAC7EjC,gBAAgB,CAAC2B,WAAW,CAAC;UAC7BnB,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEW,WAAW,CAAC;QAC7C;MACF,CAAC,CAAC,MAAM;QACN,MAAMA,WAAW,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QAC7EjC,gBAAgB,CAAC2B,WAAW,CAAC;QAC7BnB,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEW,WAAW,CAAC;MAC7C;MACAjC,WAAW,CAACkB,aAAa,IAAI,EAAE,CAAC;IAClC,CAAC,MAAM;MACL;MACA,IAAI;QACF,MAAMS,UAAU,GAAGb,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI;QAC/D,MAAMa,OAAO,GAAGT,IAAI,CAACC,KAAK,CAACO,UAAU,CAAC;QACtC,MAAME,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC;QAChC,IAAIC,GAAG,CAACH,MAAM,EAAE;UACd,MAAMM,MAAM,GAAGH,GAAG,CAACA,GAAG,CAACH,MAAM,GAAG,CAAC,CAAC;UAClC,MAAMc,QAAQ,GAAGhB,KAAK,CAACC,OAAO,CAACG,OAAO,CAACI,MAAM,CAAC,CAAC,GAAGJ,OAAO,CAACI,MAAM,CAAC,GAAG,EAAE;UACtE1B,gBAAgB,CAAC0B,MAAM,CAAC;UACxBhC,WAAW,CAACwC,QAAQ,CAAC;UACrB1B,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEU,MAAM,CAAC;UACtClB,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAACiB,QAAQ,CAAC,CAAC;QAChE,CAAC,MAAM;UACL;UACA,MAAMC,KAAK,GAAG,GAAGP,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;UACvEjC,gBAAgB,CAACmC,KAAK,CAAC;UACvBzC,WAAW,CAAC,EAAE,CAAC;UACfc,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEmB,KAAK,CAAC;UACrC3B,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAAC,EAAE,CAAC,CAAC;QAC1D;MACF,CAAC,CAAC,MAAM;QACN,MAAMkB,KAAK,GAAG,GAAGP,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QACvEjC,gBAAgB,CAACmC,KAAK,CAAC;QACvBzC,WAAW,CAAC,EAAE,CAAC;QACfc,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEmB,KAAK,CAAC;QACrC3B,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAAC,EAAE,CAAC,CAAC;MAC1D;IACF;;IAEA;IACA,CAAC,eAAemB,aAAaA,CAAA,EAAE;MAC7B,IAAI;QACF;QACA,MAAMC,YAAY,GAAG7B,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;QAC1D,IAAI4B,YAAY,EAAE;QAClB,MAAMC,KAAK,GAAG9B,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC/C,MAAM8B,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;QACpC,IAAIF,KAAK,EAAEC,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,CAAC;QACxC,IAAI5B,WAAW,EAAE6B,MAAM,CAACE,MAAM,CAAC,SAAS,EAAE/B,WAAW,CAAC;QACtD,MAAMgC,GAAG,GAAG,MAAMC,KAAK,CAAC,cAAc,GAAGJ,MAAM,CAACP,QAAQ,CAAC,CAAC,CAAC;QAC3D,IAAI,CAACU,GAAG,CAACE,EAAE,EAAE;QACb,MAAMC,CAAC,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;QAC1B,IAAID,CAAC,IAAIA,CAAC,CAACE,OAAO,EAAE;UAClB;UACArD,WAAW,CAAEsD,IAAI,IAAK;YACpB,IAAIA,IAAI,IAAIA,IAAI,CAAC5B,MAAM,EAAE,OAAO4B,IAAI;YACpC,OAAO,CACL;cACEC,MAAM,EAAE,KAAK;cACbC,OAAO,EAAEL,CAAC,CAACE,OAAO;cAClBI,IAAI,EAAE,MAAM;cACZC,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,kBAAkB,CAAC;YAC3C,CAAC,CACF;UACH,CAAC,CAAC;UACF;UACA,IAAI;YAAE7C,YAAY,CAACQ,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;UAAE,CAAC,CAAC,MAAM,CAAC;QAC7D,CAAC,MACI;UACH;UACA,IAAI;YACF,MAAMsC,OAAO,GAAG9C,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;YAC5C,IAAI6C,OAAO,EAAE;cACX,MAAMC,CAAC,GAAG1C,IAAI,CAACC,KAAK,CAACwC,OAAO,CAAC;cAC7B,MAAME,IAAI,GAAGD,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,IAAI;cACpB,IAAIA,IAAI,EAAE;gBACR9D,WAAW,CAAEsD,IAAI,IAAK;kBACpB,IAAIA,IAAI,IAAIA,IAAI,CAAC5B,MAAM,EAAE,OAAO4B,IAAI;kBACpC,OAAO,CACL;oBACEC,MAAM,EAAE,KAAK;oBACbC,OAAO,EAAE,SAASM,IAAI,+BAA+B;oBACrDL,IAAI,EAAE,MAAM;oBACZC,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,kBAAkB,CAAC;kBAC3C,CAAC,CACF;gBACH,CAAC,CAAC;gBACF,IAAI;kBAAE7C,YAAY,CAACQ,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;gBAAE,CAAC,CAAC,MAAM,CAAC;cAC7D;YACF;UACF,CAAC,CAAC,MAAM,CAAC;QACX;MACF,CAAC,CAAC,OAAOyC,CAAC,EAAE;QACV;MAAA;IAEJ,CAAC,EAAE,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA3E,SAAS,CAAC,MAAM;IACd,IAAIO,IAAI,IAAIA,IAAI,CAAC0B,EAAE,EAAE;MACnBf,gBAAgB,CAACX,IAAI,CAAC0B,EAAE,CAAC;MACzBrB,WAAW,CAACL,IAAI,CAACI,QAAQ,IAAI,EAAE,CAAC;MAChC,IAAI;QACFe,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAE3B,IAAI,CAAC0B,EAAE,CAAC;QACvCP,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAAC5B,IAAI,CAACI,QAAQ,IAAI,EAAE,CAAC,CAAC;MAC3E,CAAC,CAAC,MAAM,CAAC;IACX;EACF,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;;EAEV;EACAP,SAAS,CAAC,MAAM;IACd,IAAIiB,aAAa,EAAES,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEjB,aAAa,CAAC;IAChES,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAACxB,QAAQ,CAAC,CAAC;IAC9De,YAAY,CAACQ,OAAO,CAAC,WAAW,EAAEf,KAAK,CAAC;EAC1C,CAAC,EAAE,CAACR,QAAQ,EAAEM,aAAa,EAAEE,KAAK,CAAC,CAAC;;EAEpC;EACA,MAAMyD,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIvD,WAAW,CAACwD,OAAO,EAAE;MACvBxD,WAAW,CAACwD,OAAO,CAACC,QAAQ,CAAC;QAC3BC,GAAG,EAAE1D,WAAW,CAACwD,OAAO,CAACG,YAAY;QACrCC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF,CAAC;EACDjF,SAAS,CAAC4E,cAAc,EAAE,CAACjE,QAAQ,CAAC,CAAC;;EAErC;EACA,MAAMuE,cAAc,GAAIC,QAAQ,IAAK;IACnC;IACA,IAAI5D,iBAAiB,CAACsD,OAAO,EAAE;MAC7BO,aAAa,CAAC7D,iBAAiB,CAACsD,OAAO,CAAC;MACxCtD,iBAAiB,CAACsD,OAAO,GAAG,IAAI;IAClC;;IAEA;IACArD,gBAAgB,CAACqD,OAAO,IAAI,CAAC;IAC7B,MAAMQ,SAAS,GAAG7D,gBAAgB,CAACqD,OAAO;IAE1C,MAAMS,MAAM,GAAGH,QAAQ,CAACI,KAAK,CAAC,SAAS,CAAC,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAC;IACxD,IAAIK,KAAK,GAAG,CAAC;IACbxE,WAAW,CAAC,IAAI,CAAC;IACjB;IACAJ,WAAW,CAAEsD,IAAI,IAAK;MACpB;MACA,IAAIuB,IAAI,GAAGvB,IAAI,CAACwB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACxB,MAAM,KAAK,UAAU,CAAC;MACtD;MACA,IAAIsB,IAAI,CAACnD,MAAM,IAAImD,IAAI,CAACA,IAAI,CAACnD,MAAM,GAAG,CAAC,CAAC,CAAC6B,MAAM,KAAK,KAAK,IAAIsB,IAAI,CAACA,IAAI,CAACnD,MAAM,GAAG,CAAC,CAAC,CAAC8B,OAAO,KAAKe,QAAQ,EAAE;QACvGM,IAAI,GAAGA,IAAI,CAACtC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC1B;MACA,OAAO,CACL,GAAGsC,IAAI,EACP;QACEtB,MAAM,EAAE,UAAU;QAClBC,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE,MAAM;QACZC,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,kBAAkB,CAAC;MAC3C,CAAC,CACF;IACH,CAAC,CAAC;IAEF,MAAMqB,IAAI,GAAGA,CAAA,KAAM;MACjB;MACA,IAAIpE,gBAAgB,CAACqD,OAAO,KAAKQ,SAAS,EAAE;MAC5C,IAAIG,KAAK,GAAGF,MAAM,CAAChD,MAAM,EAAE;QACzB,MAAMuD,SAAS,GAAGP,MAAM,CAACnC,KAAK,CAAC,CAAC,EAAEqC,KAAK,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC;QACrDlF,WAAW,CAAEsD,IAAI,IAAK;UAAA,IAAA6B,KAAA;UACpB,MAAMC,IAAI,GAAG,CAAC,GAAG9B,IAAI,CAAC;UACtB,IAAI,EAAA6B,KAAA,GAAAC,IAAI,CAACA,IAAI,CAAC1D,MAAM,GAAG,CAAC,CAAC,cAAAyD,KAAA,uBAArBA,KAAA,CAAuB5B,MAAM,MAAK,UAAU,EAAE;YAChD6B,IAAI,CAACA,IAAI,CAAC1D,MAAM,GAAG,CAAC,CAAC,CAAC8B,OAAO,GAAGyB,SAAS;UAC3C;UACA,OAAOG,IAAI;QACb,CAAC,CAAC;QACFR,KAAK,EAAE;QACPjE,iBAAiB,CAACsD,OAAO,GAAGoB,UAAU,CAACL,IAAI,EAAE,GAAG,CAAC;MACnD,CAAC,MAAM;QACL5E,WAAW,CAAC,KAAK,CAAC;QAClBJ,WAAW,CAAEsD,IAAI,IAAK;UACpB,MAAMgC,QAAQ,GAAGhC,IAAI,CAACwB,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACxB,MAAM,KAAK,UAAU,CAAC;UAC5D;UACA,IAAI+B,QAAQ,CAAC5D,MAAM,IAAI4D,QAAQ,CAACA,QAAQ,CAAC5D,MAAM,GAAG,CAAC,CAAC,CAAC6B,MAAM,KAAK,KAAK,IAAI+B,QAAQ,CAACA,QAAQ,CAAC5D,MAAM,GAAG,CAAC,CAAC,CAAC8B,OAAO,KAAKe,QAAQ,EAAE;YAC3H,OAAOe,QAAQ;UACjB;UACAA,QAAQ,CAACC,IAAI,CAAC;YACZhC,MAAM,EAAE,KAAK;YACbC,OAAO,EAAEe,QAAQ;YACjBd,IAAI,EAAE,MAAM;YACZC,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,kBAAkB,CAAC;UAC3C,CAAC,CAAC;UACF,OAAO2B,QAAQ;QACjB,CAAC,CAAC;QACF3E,iBAAiB,CAACsD,OAAO,GAAG,IAAI;MAClC;IACF,CAAC;IACDtD,iBAAiB,CAACsD,OAAO,GAAGoB,UAAU,CAACL,IAAI,EAAE,GAAG,CAAC;EACnD,CAAC;;EAED;EACA5F,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIuB,iBAAiB,CAACsD,OAAO,EAAE;QAC7BuB,YAAY,CAAC7E,iBAAiB,CAACsD,OAAO,CAAC;QACvCtD,iBAAiB,CAACsD,OAAO,GAAG,IAAI;MAClC;MACArD,gBAAgB,CAACqD,OAAO,IAAI,CAAC,CAAC,CAAC;IACjC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMwB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACxF,KAAK,CAACyF,IAAI,CAAC,CAAC,EAAE;IACnB,MAAMC,MAAM,GAAG;MACbpC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEvD,KAAK;MACdwD,IAAI,EAAE,MAAM;MACZC,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,kBAAkB,CAAC;IAC3C,CAAC;IACD3D,WAAW,CAAEsD,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEqC,MAAM,CAAC,CAAC;IACxCzF,QAAQ,CAAC,EAAE,CAAC;IACZE,WAAW,CAAC,IAAI,CAAC;IAEjB,IAAI;MACF,MAAMwC,KAAK,GAAG9B,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,MAAM6C,OAAO,GAAG9C,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC5C,MAAM6E,OAAO,GAAGhC,OAAO,GAAGzC,IAAI,CAACC,KAAK,CAACwC,OAAO,CAAC,GAAG,IAAI;MACpD,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAC,QAAQ,EAAE;QAChC4C,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAE5E,IAAI,CAACI,SAAS,CAAC;UACnByE,YAAY,EAAE/F,KAAK;UACnB2C,KAAK;UACLqD,OAAO,EAAE5F,aAAa;UACtB6F,SAAS,EAAEN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE9B,IAAI;UACxBqC,UAAU,EAAEP,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ;QACvB,CAAC;MACH,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMrD,GAAG,CAACI,IAAI,CAAC,CAAC;MAC7B,MAAMkD,KAAK,GAAGD,IAAI,CAACC,KAAK,IAAID,IAAI,CAACE,QAAQ,IAAI,kBAAkB;MAC/DjC,cAAc,CAACgC,KAAK,CAAC;MACrB;MACA,IAAID,IAAI,CAACJ,OAAO,IAAII,IAAI,CAACJ,OAAO,KAAK5F,aAAa,EAAE;QAClDC,gBAAgB,CAAC+F,IAAI,CAACJ,OAAO,CAAC;QAC9BnF,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAE+E,IAAI,CAACJ,OAAO,CAAC;MAC9C;MACA;MACA,IAAII,IAAI,CAACG,QAAQ,EAAE;QACjB,IAAI;UACF,MAAMC,MAAM,GAAGC,MAAM,CAACL,IAAI,CAACG,QAAQ,CAAC;UACpC,IAAIC,MAAM,CAACE,QAAQ,CAAC,mCAAmC,CAAC,EAAE;YACxD;YACA,MAAMC,CAAC,GAAGC,kBAAkB,CAACJ,MAAM,CAACK,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACpE,IAAI;cACF,MAAMC,GAAG,GAAG,uCAAuCC,kBAAkB,CAACJ,CAAC,CAAC,YAAY;cACpF,MAAMK,CAAC,GAAG,MAAMhE,KAAK,CAAC8D,GAAG,EAAE;gBAAEjB,OAAO,EAAE;kBAAE,QAAQ,EAAE;gBAAmB;cAAE,CAAC,CAAC;cACzE,MAAM3C,CAAC,GAAG,MAAM8D,CAAC,CAAC7D,IAAI,CAAC,CAAC;cACxB,MAAM8D,IAAI,GAAG1F,KAAK,CAACC,OAAO,CAAC0B,CAAC,CAAC,GAAGA,CAAC,CAACgE,IAAI,CAACC,CAAC,IAAI,CAACA,CAAC,CAAC3D,IAAI,KAAK,OAAO,IAAI2D,CAAC,CAACC,QAAQ,MAAMD,CAAC,CAACE,GAAG,IAAIF,CAAC,CAAC/F,EAAE,CAAC,CAAC,GAAG,IAAI;cACzG,IAAIkG,GAAG,GAAG,CAAAL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE7F,EAAE,KAAI,EAAE;cACxB,IAAI,CAACkG,GAAG,IAAIL,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEI,GAAG,EAAE;gBACrB,MAAMvC,CAAC,GAAG2B,MAAM,CAACQ,IAAI,CAACI,GAAG,CAAC,CAAC3C,KAAK,CAAC,WAAW,CAAC;gBAC7C,IAAII,CAAC,EAAEwC,GAAG,GAAGxC,CAAC,CAAC,CAAC,CAAC;cACnB;cACA,IAAIwC,GAAG,EAAE;gBACP,MAAMC,QAAQ,GAAG,mCAAmCD,GAAG,oBAAoB;gBAC3EE,MAAM,CAACC,IAAI,CAACF,QAAQ,EAAE,QAAQ,EAAE,qBAAqB,CAAC;cACxD,CAAC,MAAM;gBACLC,MAAM,CAACC,IAAI,CAACjB,MAAM,EAAE,QAAQ,EAAE,qBAAqB,CAAC;cACtD;YACF,CAAC,CAAC,MAAM;cACNgB,MAAM,CAACC,IAAI,CAACjB,MAAM,EAAE,QAAQ,EAAE,qBAAqB,CAAC;YACtD;UACF,CAAC,MAAM;YACLgB,MAAM,CAACC,IAAI,CAACjB,MAAM,EAAE,QAAQ,EAAE,qBAAqB,CAAC;UACtD;QACF,CAAC,CAAC,MAAM,CAAC;MACX;MACA;MACA,IAAIJ,IAAI,CAACJ,OAAO,IAAII,IAAI,CAACJ,OAAO,KAAK5F,aAAa,EAAE;QAClDC,gBAAgB,CAAC+F,IAAI,CAACJ,OAAO,CAAC;MAChC;IACF,CAAC,CAAC,MAAM;MACN7F,WAAW,CAAC,KAAK,CAAC;MAClBJ,WAAW,CAAEsD,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;QACEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,2BAA2B;QACpCC,IAAI,EAAE,MAAM;QACZC,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,kBAAkB,CAAC;MAC3C,CAAC,CACF,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMgE,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACxC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI,CAACF,IAAI,EAAE;IAEX,MAAMG,UAAU,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;IAC5C7H,WAAW,CAAEsD,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEwE,UAAU;MACnBvE,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,kBAAkB,CAAC;IAC3C,CAAC,CACF,CAAC;IACFK,cAAc,CAAC,CAAC;IAEhB,MAAMmE,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACpF,MAAM,CAAC,MAAM,EAAE8E,IAAI,CAAC;IAC7BM,QAAQ,CAACpF,MAAM,CAAC,OAAO,EAAEjC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC3DoH,QAAQ,CAACpF,MAAM,CAAC,SAAS,EAAE1C,aAAa,CAAC;IAEzC,IAAI;MACF,MAAM2C,GAAG,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;QAC5C4C,MAAM,EAAE,MAAM;QACdE,IAAI,EAAEoC;MACR,CAAC,CAAC;MACF,MAAM9B,IAAI,GAAG,MAAMrD,GAAG,CAACI,IAAI,CAAC,CAAC;MAC7B,MAAMkD,KAAK,GAAGD,IAAI,CAACE,QAAQ,IAAI,sCAAsC;MACrEjC,cAAc,CAACgC,KAAK,CAAC;IACvB,CAAC,CAAC,MAAM;MACNtG,WAAW,CAAEsD,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;QACEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,sBAAsB;QAC/BC,IAAI,EAAE,MAAM;QACZC,SAAS,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,kBAAkB,CAAC;MAC3C,CAAC,CACF,CAAC;IACJ;EACF,CAAC;;EAED;;EAEA,MAAM0E,WAAW,GAAGA,CAAA,KAAM;IACxB7H,QAAQ,CAACD,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EAChD,CAAC;EAED,MAAM+H,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,IAAI;MACF,MAAM3G,UAAU,GAAGb,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI;MAC/D,MAAMa,OAAO,GAAGT,IAAI,CAACC,KAAK,CAACO,UAAU,CAAC;MACtC,IAAItB,aAAa,IAAImB,KAAK,CAACC,OAAO,CAAC1B,QAAQ,CAAC,IAAIA,QAAQ,CAAC2B,MAAM,EAAE;QAC/DE,OAAO,CAACvB,aAAa,CAAC,GAAGN,QAAQ;QACjCe,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAACK,OAAO,CAAC,CAAC;MAC/D;IACF,CAAC,CAAC,MAAM,CAAC;IAET,MAAMa,KAAK,GAAG,GAAGP,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IACvEjC,gBAAgB,CAACmC,KAAK,CAAC;IACvBzC,WAAW,CAAC,EAAE,CAAC;IACfc,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEmB,KAAK,CAAC;IACrC3B,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAAC,EAAE,CAAC,CAAC;EAC1D,CAAC;;EAED;EACA,MAAM,CAACgH,OAAO,EAAEC,UAAU,CAAC,GAAGtJ,QAAQ,CAACuJ,OAAO,CAAC3H,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC9E,MAAM,CAAC2H,UAAU,EAAEC,aAAa,CAAC,GAAGzJ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM0J,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI;MACF,MAAMhG,KAAK,GAAG9B,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,MAAM6C,OAAO,GAAG9C,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC5C,MAAM6E,OAAO,GAAGhC,OAAO,GAAGzC,IAAI,CAACC,KAAK,CAACwC,OAAO,CAAC,GAAG,IAAI;MACpD,MAAMiF,QAAQ,GAAG/H,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAC/C,MAAM+H,WAAW,GAAGhI,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACxD,MAAMgI,IAAI,GAAGD,WAAW,GAAG3H,IAAI,CAACC,KAAK,CAAC0H,WAAW,CAAC,GAAG,IAAI;MACzD,MAAME,OAAO,GAAGlI,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MACrD4H,aAAa,CAAC;QAAE/F,KAAK,EAAEA,KAAK,GAAIA,KAAK,CAACL,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC,GAAG,KAAK,GAAI,IAAI;QAAE0G,IAAI,EAAErD,OAAO;QAAEsD,MAAM,EAAEL,QAAQ;QAAEM,aAAa,EAAE3H,KAAK,CAACC,OAAO,CAACsH,IAAI,CAAC,GAAGA,IAAI,CAACrH,MAAM,GAAG,IAAI;QAAEsH;MAAQ,CAAC,CAAC;IACzK,CAAC,CAAC,MAAM;MACNL,aAAa,CAAC,CAAC,CAAC,CAAC;IACnB;EACF,CAAC;EAEDvJ,SAAS,CAAC,MAAM;IACd,IAAImJ,OAAO,EAAEK,YAAY,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACL,OAAO,EAAExI,QAAQ,EAAEM,aAAa,CAAC,CAAC;EAItC,oBACEZ,OAAA;IAAK2J,SAAS,EAAE,gBAAgB7I,KAAK,QAAS;IAAA8I,QAAA,gBAC5C5J,OAAA;MAAK2J,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAEhC5J,OAAA;QAAK2J,SAAS,EAAC,+DAA+D;QAAAC,QAAA,gBAC5E5J,OAAA;UAAK2J,SAAS,EAAC,iCAAiC;UAAAC,QAAA,gBAC9C5J,OAAA;YAAI2J,SAAS,EAAC,MAAM;YAAAC,QAAA,EAAC;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9ChK,OAAA;YACE2J,SAAS,EAAC,kBAAkB;YAC5BM,OAAO,EAAErB,WAAY;YACrBsB,KAAK,EAAC,cAAc;YAAAN,QAAA,EAEnB9I,KAAK,KAAK,MAAM,GAAG,IAAI,GAAG;UAAI;YAAA+I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENhK,OAAA;UAAK2J,SAAS,EAAC,cAAc;UAAAC,QAAA,eAC3B5J,OAAA;YAAQ2J,SAAS,EAAC,wBAAwB;YAACM,OAAO,EAAEpB,YAAa;YAACqB,KAAK,EAAC,gBAAgB;YAAAN,QAAA,EAAC;UAEzF;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNhK,OAAA;QAAK2J,SAAS,EAAC,WAAW;QAACQ,GAAG,EAAEnJ,WAAY;QAAA4I,QAAA,GACzCtJ,QAAQ,CAAC2B,MAAM,KAAK,CAAC,gBACpBjC,OAAA;UAAK2J,SAAS,EAAC,kBAAkB;UAAAC,QAAA,EAAC;QAElC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,GAEN1J,QAAQ,CAAC8J,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,kBAClBtK,OAAA;UAAa2J,SAAS,EAAE,gBAAgBU,GAAG,CAACvG,MAAM,EAAG;UAAA8F,QAAA,GAClDS,GAAG,CAACrG,IAAI,KAAK,MAAM,gBAClBhE,OAAA;YAAK2J,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAES,GAAG,CAACtG;UAAO;YAAA8F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,gBAEnDhK,OAAA;YACEuK,GAAG,EAAEF,GAAG,CAACtG,OAAQ;YACjByG,GAAG,EAAC,QAAQ;YACZb,SAAS,EAAC;UAAe;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CACF,eACDhK,OAAA;YAAO2J,SAAS,EAAC,WAAW;YAAAC,QAAA,EAAES,GAAG,CAACpG;UAAS;YAAA4F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAV5CM,CAAC;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAWN,CACN,CACF,EACAtJ,QAAQ,iBACPV,OAAA;UAAK2J,SAAS,EAAC,kBAAkB;UAAAC,QAAA,eAC/B5J,OAAA;YAAK2J,SAAS,EAAC,8BAA8B;YAAAC,QAAA,gBAC3C5J,OAAA;cAAM2J,SAAS,EAAC;YAAY;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACpChK,OAAA;cAAM2J,SAAS,EAAC;YAAY;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACpChK,OAAA;cAAM2J,SAAS,EAAC;YAAY;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGNhK,OAAA;QAAK2J,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B5J,OAAA;UAAK2J,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9B5J,OAAA;YACE2J,SAAS,EAAC,WAAW;YACrBM,OAAO,EAAEA,CAAA,KAAMhJ,YAAY,CAACuD,OAAO,CAACiG,KAAK,CAAC,CAAE;YAC5CP,KAAK,EAAC,aAAa;YAAAN,QAAA,EACpB;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACNhK,OAAA,CAACF,YAAY;YAAC4K,QAAQ,EAAEjK;UAAS;YAAAoJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC,CAAC,eAENhK,OAAA;UACEgE,IAAI,EAAC,MAAM;UACXmG,GAAG,EAAElJ,YAAa;UAClB0J,KAAK,EAAE;YAAEC,OAAO,EAAE;UAAO,CAAE;UAC3BC,MAAM,EAAC,8BAA8B;UACrCH,QAAQ,EAAExC;QAAiB;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eAEFhK,OAAA;UACEgE,IAAI,EAAC,MAAM;UACX2F,SAAS,EAAC,YAAY;UACtBmB,WAAW,EAAC,mBAAmB;UAC/BC,KAAK,EAAEvK,KAAM;UACbkK,QAAQ,EAAGpG,CAAC,IAAK7D,QAAQ,CAAC6D,CAAC,CAAC+D,MAAM,CAAC0C,KAAK,CAAE;UAC1CC,SAAS,EAAG1G,CAAC,IAAKA,CAAC,CAAC2G,GAAG,KAAK,OAAO,IAAIjF,WAAW,CAAC;QAAE;UAAA6D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtD,CAAC,eAEFhK,OAAA;UAAQ2J,SAAS,EAAC,UAAU;UAACM,OAAO,EAAEjE,WAAY;UAAA4D,QAAA,EAAC;QAEnD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAELlB,OAAO,iBACN9I,OAAA;MAAK2K,KAAK,EAAE;QAACO,QAAQ,EAAE,OAAO;QAAEC,KAAK,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,KAAK,EAAE,GAAG;QAAEC,SAAS,EAAE,MAAM;QAAEC,QAAQ,EAAE,MAAM;QAAEC,UAAU,EAAE,iBAAiB;QAAEC,KAAK,EAAE,MAAM;QAAEC,OAAO,EAAE,EAAE;QAAEC,YAAY,EAAE,CAAC;QAAEC,QAAQ,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAI,CAAE;MAAAjC,QAAA,gBAC9M5J,OAAA;QAAK2K,KAAK,EAAE;UAACC,OAAO,EAAE,MAAM;UAAEkB,cAAc,EAAE,eAAe;UAAEC,UAAU,EAAE,QAAQ;UAAEC,YAAY,EAAE;QAAC,CAAE;QAAApC,QAAA,gBACpG5J,OAAA;UAAA4J,QAAA,EAAQ;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1BhK,OAAA;UAAA4J,QAAA,gBACE5J,OAAA;YAAQ2J,SAAS,EAAC,sBAAsB;YAACM,OAAO,EAAEA,CAAA,KAAM;cAAElB,UAAU,CAAC,KAAK,CAAC;cAAE1H,YAAY,CAAC4K,UAAU,CAAC,OAAO,CAAC;YAAE,CAAE;YAACtB,KAAK,EAAE;cAACuB,WAAW,EAAC;YAAC,CAAE;YAAAtC,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACvJhK,OAAA;YAAQ2J,SAAS,EAAC,0BAA0B;YAACM,OAAO,EAAEd,YAAa;YAAAS,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNhK,OAAA;QAAK2K,KAAK,EAAE;UAACwB,UAAU,EAAC;QAAU,CAAE;QAAAvC,QAAA,gBAAC5J,OAAA;UAAA4J,QAAA,EAAQ;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACf,UAAU,CAAC9F,KAAK,IAAI,QAAQ;MAAA;QAAA0G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACjGhK,OAAA;QAAK2K,KAAK,EAAE;UAACwB,UAAU,EAAC;QAAU,CAAE;QAAAvC,QAAA,gBAAC5J,OAAA;UAAA4J,QAAA,EAAQ;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACf,UAAU,CAACO,IAAI,GAAG9H,IAAI,CAACI,SAAS,CAACmH,UAAU,CAACO,IAAI,CAAC,GAAG,QAAQ;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAChIhK,OAAA;QAAA4J,QAAA,gBAAK5J,OAAA;UAAA4J,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACf,UAAU,CAACQ,MAAM,IAAI,QAAQ;MAAA;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACnEhK,OAAA;QAAA4J,QAAA,gBAAK5J,OAAA;UAAA4J,QAAA,EAAQ;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,GAAA5J,qBAAA,GAAC6I,UAAU,CAACS,aAAa,cAAAtJ,qBAAA,cAAAA,qBAAA,GAAI,QAAQ;MAAA;QAAAyJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACjFhK,OAAA;QAAA4J,QAAA,gBAAK5J,OAAA;UAAA4J,QAAA,EAAQ;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,GAAA3J,mBAAA,GAAC4I,UAAU,CAACM,OAAO,cAAAlJ,mBAAA,cAAAA,mBAAA,GAAI,QAAQ;MAAA;QAAAwJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC7J,EAAA,CAzhBuBF,OAAO;EAAA,QAKDL,QAAQ;AAAA;AAAAwM,EAAA,GALdnM,OAAO;AAAA,IAAAmM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}