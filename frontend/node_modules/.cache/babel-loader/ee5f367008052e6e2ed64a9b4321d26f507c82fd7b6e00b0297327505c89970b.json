{"ast":null,"code":"import { Meridiem } from \"../../../types.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { assignSimilarDate } from \"../../../utils/dates.js\";\nimport * as references from \"../../../common/casualReferences.js\";\nexport default class FRCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern(context) {\n    return /(maintenant|aujourd'hui|demain|hier|cette\\s*nuit|la\\s*veille)(?=\\W|$)/i;\n  }\n  innerExtract(context, match) {\n    const targetDate = context.refDate;\n    const lowerText = match[0].toLowerCase();\n    const component = context.createParsingComponents();\n    switch (lowerText) {\n      case \"maintenant\":\n        return references.now(context.reference);\n      case \"aujourd'hui\":\n        return references.today(context.reference);\n      case \"hier\":\n        return references.yesterday(context.reference);\n      case \"demain\":\n        return references.tomorrow(context.reference);\n      default:\n        if (lowerText.match(/cette\\s*nuit/)) {\n          assignSimilarDate(component, targetDate);\n          component.imply(\"hour\", 22);\n          component.imply(\"meridiem\", Meridiem.PM);\n        } else if (lowerText.match(/la\\s*veille/)) {\n          const previousDay = new Date(targetDate.getTime());\n          previousDay.setDate(previousDay.getDate() - 1);\n          assignSimilarDate(component, previousDay);\n          component.imply(\"hour\", 0);\n        }\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["Meridiem","AbstractParserWithWordBoundaryChecking","assignSimilarDate","references","FRCasualDateParser","innerPattern","context","innerExtract","match","targetDate","refDate","lowerText","toLowerCase","component","createParsingComponents","now","reference","today","yesterday","tomorrow","imply","PM","previousDay","Date","getTime","setDate","getDate"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\fr\\parsers\\FRCasualDateParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { Meridiem } from \"../../../types\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate } from \"../../../utils/dates\";\nimport * as references from \"../../../common/casualReferences\";\n\nexport default class FRCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return /(maintenant|aujourd'hui|demain|hier|cette\\s*nuit|la\\s*veille)(?=\\W|$)/i;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        const targetDate = context.refDate;\n        const lowerText = match[0].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"maintenant\":\n                return references.now(context.reference);\n\n            case \"aujourd'hui\":\n                return references.today(context.reference);\n\n            case \"hier\":\n                return references.yesterday(context.reference);\n\n            case \"demain\":\n                return references.tomorrow(context.reference);\n\n            default:\n                if (lowerText.match(/cette\\s*nuit/)) {\n                    assignSimilarDate(component, targetDate);\n                    component.imply(\"hour\", 22);\n                    component.imply(\"meridiem\", Meridiem.PM);\n                } else if (lowerText.match(/la\\s*veille/)) {\n                    const previousDay = new Date(targetDate.getTime());\n                    previousDay.setDate(previousDay.getDate() - 1);\n                    assignSimilarDate(component, previousDay);\n                    component.imply(\"hour\", 0);\n                }\n        }\n\n        return component;\n    }\n}\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,mBAAiB;AAC1C,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,iBAAiB,QAAQ,yBAAuB;AACzD,OAAO,KAAKC,UAAU,MAAM,qCAAmC;AAE/D,eAAc,MAAOC,kBAAmB,SAAQH,sCAAsC;EAClFI,YAAYA,CAACC,OAAuB;IAChC,OAAO,wEAAwE;EACnF;EAEAC,YAAYA,CAACD,OAAuB,EAAEE,KAAuB;IACzD,MAAMC,UAAU,GAAGH,OAAO,CAACI,OAAO;IAClC,MAAMC,SAAS,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACI,WAAW,EAAE;IACxC,MAAMC,SAAS,GAAGP,OAAO,CAACQ,uBAAuB,EAAE;IAEnD,QAAQH,SAAS;MACb,KAAK,YAAY;QACb,OAAOR,UAAU,CAACY,GAAG,CAACT,OAAO,CAACU,SAAS,CAAC;MAE5C,KAAK,aAAa;QACd,OAAOb,UAAU,CAACc,KAAK,CAACX,OAAO,CAACU,SAAS,CAAC;MAE9C,KAAK,MAAM;QACP,OAAOb,UAAU,CAACe,SAAS,CAACZ,OAAO,CAACU,SAAS,CAAC;MAElD,KAAK,QAAQ;QACT,OAAOb,UAAU,CAACgB,QAAQ,CAACb,OAAO,CAACU,SAAS,CAAC;MAEjD;QACI,IAAIL,SAAS,CAACH,KAAK,CAAC,cAAc,CAAC,EAAE;UACjCN,iBAAiB,CAACW,SAAS,EAAEJ,UAAU,CAAC;UACxCI,SAAS,CAACO,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;UAC3BP,SAAS,CAACO,KAAK,CAAC,UAAU,EAAEpB,QAAQ,CAACqB,EAAE,CAAC;QAC5C,CAAC,MAAM,IAAIV,SAAS,CAACH,KAAK,CAAC,aAAa,CAAC,EAAE;UACvC,MAAMc,WAAW,GAAG,IAAIC,IAAI,CAACd,UAAU,CAACe,OAAO,EAAE,CAAC;UAClDF,WAAW,CAACG,OAAO,CAACH,WAAW,CAACI,OAAO,EAAE,GAAG,CAAC,CAAC;UAC9CxB,iBAAiB,CAACW,SAAS,EAAES,WAAW,CAAC;UACzCT,SAAS,CAACO,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9B;IACR;IAEA,OAAOP,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}