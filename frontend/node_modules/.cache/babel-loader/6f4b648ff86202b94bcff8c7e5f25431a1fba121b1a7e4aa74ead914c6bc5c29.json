{"ast":null,"code":"import * as dates from \"../../utils/dates.js\";\nimport { implySimilarDate } from \"../../utils/dates.js\";\nimport { addDuration } from \"../../calculation/duration.js\";\nexport default class ForwardDateRefiner {\n  refine(context, results) {\n    if (!context.option.forwardDate) {\n      return results;\n    }\n    results.forEach(result => {\n      let refDate = context.reference.getDateWithAdjustedTimezone();\n      if (result.start.isOnlyTime() && context.reference.instant > result.start.date()) {\n        const refDate = context.reference.getDateWithAdjustedTimezone();\n        const refFollowingDay = new Date(refDate);\n        refFollowingDay.setDate(refFollowingDay.getDate() + 1);\n        dates.implySimilarDate(result.start, refFollowingDay);\n        context.debug(() => {\n          console.log(`${this.constructor.name} adjusted ${result} time from the ref date (${refDate}) to the following day (${refFollowingDay})`);\n        });\n        if (result.end && result.end.isOnlyTime()) {\n          dates.implySimilarDate(result.end, refFollowingDay);\n          if (result.start.date() > result.end.date()) {\n            refFollowingDay.setDate(refFollowingDay.getDate() + 1);\n            dates.implySimilarDate(result.end, refFollowingDay);\n          }\n        }\n      }\n      if (result.start.isOnlyWeekdayComponent() && refDate > result.start.date()) {\n        let daysToAdd = result.start.get(\"weekday\") - refDate.getDay();\n        if (daysToAdd <= 0) {\n          daysToAdd += 7;\n        }\n        refDate = addDuration(refDate, {\n          day: daysToAdd\n        });\n        implySimilarDate(result.start, refDate);\n        context.debug(() => {\n          console.log(`${this.constructor.name} adjusted ${result} weekday (${result.start})`);\n        });\n        if (result.end && result.end.isOnlyWeekdayComponent()) {\n          let daysToAdd = result.end.get(\"weekday\") - refDate.getDay();\n          if (daysToAdd <= 0) {\n            daysToAdd += 7;\n          }\n          refDate = addDuration(refDate, {\n            day: daysToAdd\n          });\n          implySimilarDate(result.end, refDate);\n          context.debug(() => {\n            console.log(`${this.constructor.name} adjusted ${result} weekday (${result.end})`);\n          });\n        }\n      }\n      if (result.start.isDateWithUnknownYear() && refDate > result.start.date()) {\n        for (let i = 0; i < 3 && refDate > result.start.date(); i++) {\n          result.start.imply(\"year\", result.start.get(\"year\") + 1);\n          context.debug(() => {\n            console.log(`${this.constructor.name} adjusted ${result} year (${result.start})`);\n          });\n          if (result.end && !result.end.isCertain(\"year\")) {\n            result.end.imply(\"year\", result.end.get(\"year\") + 1);\n            context.debug(() => {\n              console.log(`${this.constructor.name} adjusted ${result} month (${result.start})`);\n            });\n          }\n        }\n      }\n    });\n    return results;\n  }\n}","map":{"version":3,"names":["dates","implySimilarDate","addDuration","ForwardDateRefiner","refine","context","results","option","forwardDate","forEach","result","refDate","reference","getDateWithAdjustedTimezone","start","isOnlyTime","instant","date","refFollowingDay","Date","setDate","getDate","debug","console","log","constructor","name","end","isOnlyWeekdayComponent","daysToAdd","get","getDay","day","isDateWithUnknownYear","i","imply","isCertain"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\common\\refiners\\ForwardDateRefiner.ts"],"sourcesContent":["/*\n    Enforce 'forwardDate' option to on the results. When there are missing component,\n    e.g. \"March 12-13 (without year)\" or \"Thursday\", the refiner will try to adjust the result\n    into the future instead of the past.\n*/\n\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\nimport * as dates from \"../../utils/dates\";\nimport { implySimilarDate } from \"../../utils/dates\";\nimport { addDuration } from \"../../calculation/duration\";\n\nexport default class ForwardDateRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (!context.option.forwardDate) {\n            return results;\n        }\n\n        results.forEach((result) => {\n            let refDate = context.reference.getDateWithAdjustedTimezone();\n\n            if (result.start.isOnlyTime() && context.reference.instant > result.start.date()) {\n                const refDate = context.reference.getDateWithAdjustedTimezone();\n                const refFollowingDay = new Date(refDate);\n                refFollowingDay.setDate(refFollowingDay.getDate() + 1);\n\n                dates.implySimilarDate(result.start, refFollowingDay);\n                context.debug(() => {\n                    console.log(\n                        `${this.constructor.name} adjusted ${result} time from the ref date (${refDate}) to the following day (${refFollowingDay})`\n                    );\n                });\n                if (result.end && result.end.isOnlyTime()) {\n                    dates.implySimilarDate(result.end, refFollowingDay);\n                    if (result.start.date() > result.end.date()) {\n                        refFollowingDay.setDate(refFollowingDay.getDate() + 1);\n                        dates.implySimilarDate(result.end, refFollowingDay);\n                    }\n                }\n            }\n\n            if (result.start.isOnlyWeekdayComponent() && refDate > result.start.date()) {\n                let daysToAdd = result.start.get(\"weekday\") - refDate.getDay();\n                if (daysToAdd <= 0) {\n                    daysToAdd += 7;\n                }\n                refDate = addDuration(refDate, { day: daysToAdd });\n                implySimilarDate(result.start, refDate);\n                context.debug(() => {\n                    console.log(`${this.constructor.name} adjusted ${result} weekday (${result.start})`);\n                });\n\n                if (result.end && result.end.isOnlyWeekdayComponent()) {\n                    // Adjust date to the coming week\n                    let daysToAdd = result.end.get(\"weekday\") - refDate.getDay();\n                    if (daysToAdd <= 0) {\n                        daysToAdd += 7;\n                    }\n                    refDate = addDuration(refDate, { day: daysToAdd });\n                    implySimilarDate(result.end, refDate);\n                    context.debug(() => {\n                        console.log(`${this.constructor.name} adjusted ${result} weekday (${result.end})`);\n                    });\n                }\n            }\n\n            // In case where we know the month, but not which year (e.g. \"in December\", \"25th December\"),\n            // try move to another year (up-to 3 times)\n            if (result.start.isDateWithUnknownYear() && refDate > result.start.date()) {\n                for (let i = 0; i < 3 && refDate > result.start.date(); i++) {\n                    result.start.imply(\"year\", result.start.get(\"year\") + 1);\n                    context.debug(() => {\n                        console.log(`${this.constructor.name} adjusted ${result} year (${result.start})`);\n                    });\n\n                    if (result.end && !result.end.isCertain(\"year\")) {\n                        result.end.imply(\"year\", result.end.get(\"year\") + 1);\n                        context.debug(() => {\n                            console.log(`${this.constructor.name} adjusted ${result} month (${result.start})`);\n                        });\n                    }\n                }\n            }\n        });\n\n        return results;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}