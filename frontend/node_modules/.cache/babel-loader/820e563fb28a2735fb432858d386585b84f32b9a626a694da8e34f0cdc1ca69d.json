{"ast":null,"code":"import { parseDuration, TIME_UNITS_PATTERN } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nconst PATTERN = new RegExp(\"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"(later|na|vanaf nu|voortaan|vooruit|uit)\" + \"(?=(?:\\\\W|$))\", \"i\");\nconst STRICT_PATTERN = new RegExp(\"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"(later|vanaf nu)\" + \"(?=(?:\\\\W|$))\", \"i\");\nconst GROUP_NUM_TIMEUNITS = 1;\nexport default class NLTimeUnitLaterFormatParser extends AbstractParserWithWordBoundaryChecking {\n  strictMode;\n  constructor(strictMode) {\n    super();\n    this.strictMode = strictMode;\n  }\n  innerPattern() {\n    return this.strictMode ? STRICT_PATTERN : PATTERN;\n  }\n  innerExtract(context, match) {\n    const fragments = parseDuration(match[GROUP_NUM_TIMEUNITS]);\n    return ParsingComponents.createRelativeFromReference(context.reference, fragments);\n  }\n}","map":{"version":3,"names":["parseDuration","TIME_UNITS_PATTERN","ParsingComponents","AbstractParserWithWordBoundaryChecking","PATTERN","RegExp","STRICT_PATTERN","GROUP_NUM_TIMEUNITS","NLTimeUnitLaterFormatParser","strictMode","constructor","innerPattern","innerExtract","context","match","fragments","createRelativeFromReference","reference"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\nl\\parsers\\NLTimeUnitLaterFormatParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { parseDuration, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    \"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"(later|na|vanaf nu|voortaan|vooruit|uit)\" + \"(?=(?:\\\\W|$))\",\n    \"i\"\n);\n\nconst STRICT_PATTERN = new RegExp(\"\" + \"(\" + TIME_UNITS_PATTERN + \")\" + \"(later|vanaf nu)\" + \"(?=(?:\\\\W|$))\", \"i\");\nconst GROUP_NUM_TIMEUNITS = 1;\n\nexport default class NLTimeUnitLaterFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const fragments = parseDuration(match[GROUP_NUM_TIMEUNITS]);\n        return ParsingComponents.createRelativeFromReference(context.reference, fragments);\n    }\n}\n"],"mappings":"AACA,SAASA,aAAa,EAAEC,kBAAkB,QAAQ,iBAAe;AACjE,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,SAASC,sCAAsC,QAAQ,2DAAyD;AAEhH,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,EAAE,GAAG,GAAG,GAAGJ,kBAAkB,GAAG,GAAG,GAAG,0CAA0C,GAAG,eAAe,EAClG,GAAG,CACN;AAED,MAAMK,cAAc,GAAG,IAAID,MAAM,CAAC,EAAE,GAAG,GAAG,GAAGJ,kBAAkB,GAAG,GAAG,GAAG,kBAAkB,GAAG,eAAe,EAAE,GAAG,CAAC;AAClH,MAAMM,mBAAmB,GAAG,CAAC;AAE7B,eAAc,MAAOC,2BAA4B,SAAQL,sCAAsC;EACvEM,UAAA;EAApBC,YAAoBD,UAAmB;IACnC,KAAK,EAAE;IADS,KAAAA,UAAU,GAAVA,UAAU;EAE9B;EAEAE,YAAYA,CAAA;IACR,OAAO,IAAI,CAACF,UAAU,GAAGH,cAAc,GAAGF,OAAO;EACrD;EAEAQ,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,SAAS,GAAGf,aAAa,CAACc,KAAK,CAACP,mBAAmB,CAAC,CAAC;IAC3D,OAAOL,iBAAiB,CAACc,2BAA2B,CAACH,OAAO,CAACI,SAAS,EAAEF,SAAS,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}