{"ast":null,"code":"import { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern.js\";\nimport { findMostLikelyADYear } from \"../../calculation/years.js\";\nexport const WEEKDAY_DICTIONARY = {\n  \"domenica\": 0,\n  \"dom\": 0,\n  \"lunedì\": 1,\n  \"lun\": 1,\n  \"martedì\": 2,\n  \"mar\": 2,\n  \"mercoledì\": 3,\n  \"merc\": 3,\n  \"giovedì\": 4,\n  \"giov\": 4,\n  \"venerdì\": 5,\n  \"ven\": 5,\n  \"sabato\": 6,\n  \"sab\": 6\n};\nexport const FULL_MONTH_NAME_DICTIONARY = {};\nexport const MONTH_DICTIONARY = {\n  ...FULL_MONTH_NAME_DICTIONARY,\n  \"gennaio\": 1,\n  \"gen\": 1,\n  \"gen.\": 1,\n  \"febbraio\": 2,\n  \"feb\": 2,\n  \"feb.\": 2,\n  \"febraio\": 2,\n  \"febb\": 2,\n  \"febb.\": 2,\n  \"marzo\": 3,\n  \"mar\": 3,\n  \"mar.\": 3,\n  \"aprile\": 4,\n  \"apr\": 4,\n  \"apr.\": 4,\n  \"maggio\": 5,\n  \"mag\": 5,\n  \"giugno\": 6,\n  \"giu\": 6,\n  \"luglio\": 7,\n  \"lug\": 7,\n  \"lugl\": 7,\n  \"lug.\": 7,\n  \"agosto\": 8,\n  \"ago\": 8,\n  \"settembre\": 9,\n  \"set\": 9,\n  \"set.\": 9,\n  \"sett\": 9,\n  \"sett.\": 9,\n  \"ottobre\": 10,\n  \"ott\": 10,\n  \"ott.\": 10,\n  \"novembre\": 11,\n  \"nov\": 11,\n  \"nov.\": 11,\n  \"dicembre\": 12,\n  \"dic\": 12,\n  \"dice\": 12,\n  \"dic.\": 12\n};\nexport const INTEGER_WORD_DICTIONARY = {\n  \"uno\": 1,\n  \"due\": 2,\n  \"tre\": 3,\n  \"quattro\": 4,\n  \"cinque\": 5,\n  \"sei\": 6,\n  \"sette\": 7,\n  \"otto\": 8,\n  \"nove\": 9,\n  \"dieci\": 10,\n  \"undici\": 11,\n  \"dodici\": 12\n};\nexport const ORDINAL_WORD_DICTIONARY = {\n  \"primo\": 1,\n  \"secondo\": 2,\n  \"terzo\": 3,\n  \"quarto\": 4,\n  \"quinto\": 5,\n  \"sesto\": 6,\n  \"settimo\": 7,\n  \"ottavo\": 8,\n  \"nono\": 9,\n  \"decimo\": 10,\n  \"undicesimo\": 11,\n  \"dodicesimo\": 12,\n  \"tredicesimo\": 13,\n  \"quattordicesimo\": 14,\n  \"quindicesimo\": 15,\n  \"sedicesimo\": 16,\n  \"diciassettesimo\": 17,\n  \"diciottesimo\": 18,\n  \"diciannovesimo\": 19,\n  \"ventesimo\": 20,\n  \"ventunesimo\": 21,\n  \"ventiduesimo\": 22,\n  \"ventitreesimo\": 23,\n  \"ventiquattresimo\": 24,\n  \"venticinquesimo\": 25,\n  \"ventiseiesimo\": 26,\n  \"ventisettesimo\": 27,\n  \"ventottesimo\": 28,\n  \"ventinovesimo\": 29,\n  \"trentesimo\": 30,\n  \"trentunesimo\": 31\n};\nexport const TIME_UNIT_DICTIONARY = {\n  \"sec\": \"second\",\n  \"secondo\": \"second\",\n  \"secondi\": \"second\",\n  \"min\": \"minute\",\n  \"mins\": \"minute\",\n  \"minuti\": \"minute\",\n  \"h\": \"hour\",\n  \"hr\": \"hour\",\n  \"o\": \"hour\",\n  \"ora\": \"hour\",\n  \"ore\": \"hour\",\n  \"giorno\": \"day\",\n  \"giorni\": \"day\",\n  \"settimana\": \"week\",\n  \"settimane\": \"week\",\n  \"mese\": \"month\",\n  \"trimestre\": \"quarter\",\n  \"trimestri\": \"quarter\",\n  \"anni\": \"year\",\n  \"anno\": \"year\"\n};\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\\\.[0-9]+|half(?:\\\\s{0,2}un?)?|un?\\\\b(?:\\\\s{0,2}qualcuno)?|qualcuno|molti|a?\\\\s{0,2}alcuni\\\\s{0,2}(?:of)?)`;\nexport function parseNumberPattern(match) {\n  const num = match.toLowerCase();\n  if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n    return INTEGER_WORD_DICTIONARY[num];\n  } else if (num === \"un\" || num === \"una\") {\n    return 1;\n  } else if (num.match(/alcuni/)) {\n    return 3;\n  } else if (num.match(/metá/)) {\n    return 0.5;\n  } else if (num.match(/paio/)) {\n    return 2;\n  } else if (num.match(/molti/)) {\n    return 7;\n  }\n  return parseFloat(num);\n}\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:mo|ndo|rzo|simo|esimo)?)`;\nexport function parseOrdinalNumberPattern(match) {\n  let num = match.toLowerCase();\n  if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n    return ORDINAL_WORD_DICTIONARY[num];\n  }\n  num = num.replace(/(?:imo|ndo|rzo|rto|nto|sto|tavo|nono|cimo|timo|esimo)$/i, \"\");\n  return parseInt(num);\n}\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match) {\n  if (/BE/i.test(match)) {\n    match = match.replace(/BE/i, \"\");\n    return parseInt(match) - 543;\n  }\n  if (/BCE?/i.test(match)) {\n    match = match.replace(/BCE?/i, \"\");\n    return -parseInt(match);\n  }\n  if (/(AD|CE)/i.test(match)) {\n    match = match.replace(/(AD|CE)/i, \"\");\n    return parseInt(match);\n  }\n  const rawYearNumber = parseInt(match);\n  return findMostLikelyADYear(rawYearNumber);\n}\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:about|around)\\\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);\nexport function parseDuration(timeunitText) {\n  const fragments = {};\n  let remainingText = timeunitText;\n  let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  while (match) {\n    collectDateTimeFragment(fragments, match);\n    remainingText = remainingText.substring(match[0].length).trim();\n    match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n  }\n  return fragments;\n}\nfunction collectDateTimeFragment(fragments, match) {\n  const num = parseNumberPattern(match[1]);\n  const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n  fragments[unit] = num;\n}","map":{"version":3,"names":["matchAnyPattern","repeatedTimeunitPattern","findMostLikelyADYear","WEEKDAY_DICTIONARY","FULL_MONTH_NAME_DICTIONARY","MONTH_DICTIONARY","INTEGER_WORD_DICTIONARY","ORDINAL_WORD_DICTIONARY","TIME_UNIT_DICTIONARY","NUMBER_PATTERN","parseNumberPattern","match","num","toLowerCase","undefined","parseFloat","ORDINAL_NUMBER_PATTERN","parseOrdinalNumberPattern","replace","parseInt","YEAR_PATTERN","parseYear","test","rawYearNumber","SINGLE_TIME_UNIT_PATTERN","SINGLE_TIME_UNIT_REGEX","RegExp","TIME_UNITS_PATTERN","parseDuration","timeunitText","fragments","remainingText","exec","collectDateTimeFragment","substring","length","trim","unit"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\it\\constants.ts"],"sourcesContent":["import { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { Duration } from \"../../calculation/duration\";\nimport { Timeunit } from \"../../types\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: number } = {\n    \"domenica\": 0,\n    \"dom\": 0,\n    \"lunedì\": 1,\n    \"lun\": 1,\n    \"martedì\": 2,\n    \"mar\": 2,\n    \"mercoledì\": 3,\n    \"merc\": 3,\n    \"giovedì\": 4,\n    \"giov\": 4,\n    \"venerdì\": 5,\n    \"ven\": 5,\n    \"sabato\": 6,\n    \"sab\": 6,\n};\n\nexport const FULL_MONTH_NAME_DICTIONARY: { [word: string]: number } = {};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    ...FULL_MONTH_NAME_DICTIONARY,\n    \"gennaio\": 1,\n    \"gen\": 1,\n    \"gen.\": 1,\n    \"febbraio\": 2,\n    \"feb\": 2,\n    \"feb.\": 2,\n    \"febraio\": 2,\n    \"febb\": 2,\n    \"febb.\": 2,\n    \"marzo\": 3,\n    \"mar\": 3,\n    \"mar.\": 3,\n    \"aprile\": 4,\n    \"apr\": 4,\n    \"apr.\": 4,\n    \"maggio\": 5,\n    \"mag\": 5,\n    \"giugno\": 6,\n    \"giu\": 6,\n    \"luglio\": 7,\n    \"lug\": 7,\n    \"lugl\": 7,\n    \"lug.\": 7,\n    \"agosto\": 8,\n    \"ago\": 8,\n    \"settembre\": 9,\n    \"set\": 9,\n    \"set.\": 9,\n    \"sett\": 9,\n    \"sett.\": 9,\n    \"ottobre\": 10,\n    \"ott\": 10,\n    \"ott.\": 10,\n    \"novembre\": 11,\n    \"nov\": 11,\n    \"nov.\": 11,\n    \"dicembre\": 12,\n    \"dic\": 12,\n    \"dice\": 12,\n    \"dic.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    \"uno\": 1,\n    \"due\": 2,\n    \"tre\": 3,\n    \"quattro\": 4,\n    \"cinque\": 5,\n    \"sei\": 6,\n    \"sette\": 7,\n    \"otto\": 8,\n    \"nove\": 9,\n    \"dieci\": 10,\n    \"undici\": 11,\n    \"dodici\": 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    \"primo\": 1,\n    \"secondo\": 2,\n    \"terzo\": 3,\n    \"quarto\": 4,\n    \"quinto\": 5,\n    \"sesto\": 6,\n    \"settimo\": 7,\n    \"ottavo\": 8,\n    \"nono\": 9,\n    \"decimo\": 10,\n    \"undicesimo\": 11,\n    \"dodicesimo\": 12,\n    \"tredicesimo\": 13,\n    \"quattordicesimo\": 14,\n    \"quindicesimo\": 15,\n    \"sedicesimo\": 16,\n    \"diciassettesimo\": 17,\n    \"diciottesimo\": 18,\n    \"diciannovesimo\": 19,\n    \"ventesimo\": 20,\n    \"ventunesimo\": 21,\n    \"ventiduesimo\": 22,\n    \"ventitreesimo\": 23,\n    \"ventiquattresimo\": 24,\n    \"venticinquesimo\": 25,\n    \"ventiseiesimo\": 26,\n    \"ventisettesimo\": 27,\n    \"ventottesimo\": 28,\n    \"ventinovesimo\": 29,\n    \"trentesimo\": 30,\n    \"trentunesimo\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: Timeunit } = {\n    \"sec\": \"second\",\n    \"secondo\": \"second\",\n    \"secondi\": \"second\",\n    \"min\": \"minute\",\n    \"mins\": \"minute\",\n    \"minuti\": \"minute\",\n    \"h\": \"hour\",\n    \"hr\": \"hour\",\n    \"o\": \"hour\",\n    \"ora\": \"hour\",\n    \"ore\": \"hour\",\n    \"giorno\": \"day\",\n    \"giorni\": \"day\",\n    \"settimana\": \"week\",\n    \"settimane\": \"week\",\n    \"mese\": \"month\",\n    \"trimestre\": \"quarter\",\n    \"trimestri\": \"quarter\",\n    \"anni\": \"year\",\n    \"anno\": \"year\",\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|half(?:\\\\s{0,2}un?)?|un?\\\\b(?:\\\\s{0,2}qualcuno)?|qualcuno|molti|a?\\\\s{0,2}alcuni\\\\s{0,2}(?:of)?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"un\" || num === \"una\") {\n        return 1;\n    } else if (num.match(/alcuni/)) {\n        return 3;\n    } else if (num.match(/metá/)) {\n        return 0.5;\n    } else if (num.match(/paio/)) {\n        return 2;\n    } else if (num.match(/molti/)) {\n        return 7;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(\n    ORDINAL_WORD_DICTIONARY\n)}|[0-9]{1,2}(?:mo|ndo|rzo|simo|esimo)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n\n    num = num.replace(/(?:imo|ndo|rzo|rto|nto|sto|tavo|nono|cimo|timo|esimo)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match: string): number {\n    if (/BE/i.test(match)) {\n        // Buddhist Era\n        match = match.replace(/BE/i, \"\");\n        return parseInt(match) - 543;\n    }\n\n    if (/BCE?/i.test(match)) {\n        // Before Christ, Before Common Era\n        match = match.replace(/BCE?/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/(AD|CE)/i.test(match)) {\n        // Anno Domini, Common Era\n        match = match.replace(/(AD|CE)/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:about|around)\\\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);\n\nexport function parseDuration(timeunitText): Duration {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length).trim();\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments as Duration;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}