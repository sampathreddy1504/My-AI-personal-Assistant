{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { WEEKDAY_OFFSET } from \"../constants.js\";\nconst PATTERN = new RegExp(\"(?:星期|礼拜|周)(?<weekday>\" + Object.keys(WEEKDAY_OFFSET).join(\"|\") + \")\");\nexport default class ZHHansWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const result = context.createParsingResult(match.index, match[0]);\n    const dayOfWeek = match.groups.weekday;\n    const offset = WEEKDAY_OFFSET[dayOfWeek];\n    if (offset === undefined) return null;\n    const date = new Date(context.refDate.getTime());\n    const startMomentFixed = false;\n    const refOffset = date.getDay();\n    let diff = offset - refOffset;\n    if (Math.abs(diff - 7) < Math.abs(diff)) {\n      diff -= 7;\n    }\n    if (Math.abs(diff + 7) < Math.abs(diff)) {\n      diff += 7;\n    }\n    date.setDate(date.getDate() + diff);\n    result.start.assign(\"weekday\", offset);\n    if (startMomentFixed) {\n      result.start.assign(\"day\", date.getDate());\n      result.start.assign(\"month\", date.getMonth() + 1);\n      result.start.assign(\"year\", date.getFullYear());\n    } else {\n      result.start.imply(\"day\", date.getDate());\n      result.start.imply(\"month\", date.getMonth() + 1);\n      result.start.imply(\"year\", date.getFullYear());\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","WEEKDAY_OFFSET","PATTERN","RegExp","Object","keys","join","ZHHansWeekdayParser","innerPattern","innerExtract","context","match","result","createParsingResult","index","dayOfWeek","groups","weekday","offset","undefined","date","Date","refDate","getTime","startMomentFixed","refOffset","getDay","diff","Math","abs","setDate","getDate","start","assign","getMonth","getFullYear","imply"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\zh\\hans\\parsers\\ZHHansWeekdayParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { ParsingResult } from \"../../../../results\";\nimport { WEEKDAY_OFFSET } from \"../constants\";\n\nconst PATTERN = new RegExp(\"(?:星期|礼拜|周)(?<weekday>\" + Object.keys(WEEKDAY_OFFSET).join(\"|\") + \")\");\n\nexport default class ZHHansWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const dayOfWeek = match.groups.weekday;\n        const offset = WEEKDAY_OFFSET[dayOfWeek];\n        if (offset === undefined) return null;\n\n        const date = new Date(context.refDate.getTime());\n        const startMomentFixed = false;\n        const refOffset = date.getDay();\n\n        let diff = offset - refOffset;\n        if (Math.abs(diff - 7) < Math.abs(diff)) {\n            diff -= 7;\n        }\n        if (Math.abs(diff + 7) < Math.abs(diff)) {\n            diff += 7;\n        }\n\n        date.setDate(date.getDate() + diff);\n\n        result.start.assign(\"weekday\", offset);\n        if (startMomentFixed) {\n            result.start.assign(\"day\", date.getDate());\n            result.start.assign(\"month\", date.getMonth() + 1);\n            result.start.assign(\"year\", date.getFullYear());\n        } else {\n            result.start.imply(\"day\", date.getDate());\n            result.start.imply(\"month\", date.getMonth() + 1);\n            result.start.imply(\"year\", date.getFullYear());\n        }\n\n        return result;\n    }\n}\n"],"mappings":"AACA,SAASA,sCAAsC,QAAQ,8DAA4D;AAEnH,SAASC,cAAc,QAAQ,iBAAe;AAE9C,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAAC,wBAAwB,GAAGC,MAAM,CAACC,IAAI,CAACJ,cAAc,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;AAElG,eAAc,MAAOC,mBAAoB,SAAQP,sCAAsC;EACnFQ,YAAYA,CAAA;IACR,OAAON,OAAO;EAClB;EAEAO,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,MAAM,GAAGF,OAAO,CAACG,mBAAmB,CAACF,KAAK,CAACG,KAAK,EAAEH,KAAK,CAAC,CAAC,CAAC,CAAC;IAEjE,MAAMI,SAAS,GAAGJ,KAAK,CAACK,MAAM,CAACC,OAAO;IACtC,MAAMC,MAAM,GAAGjB,cAAc,CAACc,SAAS,CAAC;IACxC,IAAIG,MAAM,KAAKC,SAAS,EAAE,OAAO,IAAI;IAErC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACX,OAAO,CAACY,OAAO,CAACC,OAAO,EAAE,CAAC;IAChD,MAAMC,gBAAgB,GAAG,KAAK;IAC9B,MAAMC,SAAS,GAAGL,IAAI,CAACM,MAAM,EAAE;IAE/B,IAAIC,IAAI,GAAGT,MAAM,GAAGO,SAAS;IAC7B,IAAIG,IAAI,CAACC,GAAG,CAACF,IAAI,GAAG,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACF,IAAI,CAAC,EAAE;MACrCA,IAAI,IAAI,CAAC;IACb;IACA,IAAIC,IAAI,CAACC,GAAG,CAACF,IAAI,GAAG,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACF,IAAI,CAAC,EAAE;MACrCA,IAAI,IAAI,CAAC;IACb;IAEAP,IAAI,CAACU,OAAO,CAACV,IAAI,CAACW,OAAO,EAAE,GAAGJ,IAAI,CAAC;IAEnCf,MAAM,CAACoB,KAAK,CAACC,MAAM,CAAC,SAAS,EAAEf,MAAM,CAAC;IACtC,IAAIM,gBAAgB,EAAE;MAClBZ,MAAM,CAACoB,KAAK,CAACC,MAAM,CAAC,KAAK,EAAEb,IAAI,CAACW,OAAO,EAAE,CAAC;MAC1CnB,MAAM,CAACoB,KAAK,CAACC,MAAM,CAAC,OAAO,EAAEb,IAAI,CAACc,QAAQ,EAAE,GAAG,CAAC,CAAC;MACjDtB,MAAM,CAACoB,KAAK,CAACC,MAAM,CAAC,MAAM,EAAEb,IAAI,CAACe,WAAW,EAAE,CAAC;IACnD,CAAC,MAAM;MACHvB,MAAM,CAACoB,KAAK,CAACI,KAAK,CAAC,KAAK,EAAEhB,IAAI,CAACW,OAAO,EAAE,CAAC;MACzCnB,MAAM,CAACoB,KAAK,CAACI,KAAK,CAAC,OAAO,EAAEhB,IAAI,CAACc,QAAQ,EAAE,GAAG,CAAC,CAAC;MAChDtB,MAAM,CAACoB,KAAK,CAACI,KAAK,CAAC,MAAM,EAAEhB,IAAI,CAACe,WAAW,EAAE,CAAC;IAClD;IAEA,OAAOvB,MAAM;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}