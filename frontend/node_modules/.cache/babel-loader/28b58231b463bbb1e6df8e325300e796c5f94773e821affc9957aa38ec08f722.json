{"ast":null,"code":"import { TIME_UNIT_DICTIONARY } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { matchAnyPattern } from \"../../../utils/pattern.js\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking.js\";\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\nexport default class RURelativeDateFormatParser extends AbstractParserWithLeftRightBoundaryChecking {\n  innerPatternString(context) {\n    return `(в прошлом|на прошлой|на следующей|в следующем|на этой|в этом)\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\n  }\n  innerExtract(context, match) {\n    const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n    const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n    const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n    if (modifier == \"на следующей\" || modifier == \"в следующем\") {\n      const timeUnits = {};\n      timeUnits[timeunit] = 1;\n      return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n    if (modifier == \"в прошлом\" || modifier == \"на прошлой\") {\n      const timeUnits = {};\n      timeUnits[timeunit] = -1;\n      return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n    const components = context.createParsingComponents();\n    let date = new Date(context.reference.instant.getTime());\n    if (timeunit.match(/week/i)) {\n      date.setDate(date.getDate() - date.getDay());\n      components.imply(\"day\", date.getDate());\n      components.imply(\"month\", date.getMonth() + 1);\n      components.imply(\"year\", date.getFullYear());\n    } else if (timeunit.match(/month/i)) {\n      date.setDate(1);\n      components.imply(\"day\", date.getDate());\n      components.assign(\"year\", date.getFullYear());\n      components.assign(\"month\", date.getMonth() + 1);\n    } else if (timeunit.match(/year/i)) {\n      date.setDate(1);\n      date.setMonth(0);\n      components.imply(\"day\", date.getDate());\n      components.imply(\"month\", date.getMonth() + 1);\n      components.assign(\"year\", date.getFullYear());\n    }\n    return components;\n  }\n}","map":{"version":3,"names":["TIME_UNIT_DICTIONARY","ParsingComponents","matchAnyPattern","AbstractParserWithLeftRightBoundaryChecking","MODIFIER_WORD_GROUP","RELATIVE_WORD_GROUP","RURelativeDateFormatParser","innerPatternString","context","innerExtract","match","modifier","toLowerCase","unitWord","timeunit","timeUnits","createRelativeFromReference","reference","components","createParsingComponents","date","Date","instant","getTime","setDate","getDate","getDay","imply","getMonth","getFullYear","assign","setMonth"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\ru\\parsers\\RURelativeDateFormatParser.ts"],"sourcesContent":["import { TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithLeftRightBoundaryChecking } from \"./AbstractParserWithWordBoundaryChecking\";\n\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\n\nexport default class RURelativeDateFormatParser extends AbstractParserWithLeftRightBoundaryChecking {\n    innerPatternString(context: ParsingContext): string {\n        return `(в прошлом|на прошлой|на следующей|в следующем|на этой|в этом)\\\\s*(${matchAnyPattern(\n            TIME_UNIT_DICTIONARY\n        )})`;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n\n        if (modifier == \"на следующей\" || modifier == \"в следующем\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        if (modifier == \"в прошлом\" || modifier == \"на прошлой\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        const components = context.createParsingComponents();\n        let date = new Date(context.reference.instant.getTime());\n\n        // This week\n        if (timeunit.match(/week/i)) {\n            date.setDate(date.getDate() - date.getDay());\n            components.imply(\"day\", date.getDate());\n            components.imply(\"month\", date.getMonth() + 1);\n            components.imply(\"year\", date.getFullYear());\n        }\n\n        // This month\n        else if (timeunit.match(/month/i)) {\n            date.setDate(1);\n            components.imply(\"day\", date.getDate());\n            components.assign(\"year\", date.getFullYear());\n            components.assign(\"month\", date.getMonth() + 1);\n        }\n\n        // This year\n        else if (timeunit.match(/year/i)) {\n            date.setDate(1);\n            date.setMonth(0);\n            components.imply(\"day\", date.getDate());\n            components.imply(\"month\", date.getMonth() + 1);\n            components.assign(\"year\", date.getFullYear());\n        }\n\n        return components;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}