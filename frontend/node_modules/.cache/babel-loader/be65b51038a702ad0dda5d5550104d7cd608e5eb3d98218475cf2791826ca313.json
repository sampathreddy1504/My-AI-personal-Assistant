{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates.js\";\nimport DECasualTimeParser from \"./DECasualTimeParser.js\";\nimport * as references from \"../../../common/casualReferences.js\";\nimport { addDuration } from \"../../../calculation/duration.js\";\nconst PATTERN = new RegExp(`(jetzt|heute|morgen|端bermorgen|uebermorgen|gestern|vorgestern|letzte\\\\s*nacht)` + `(?:\\\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht))?` + `(?=\\\\W|$)`, \"i\");\nconst DATE_GROUP = 1;\nconst TIME_GROUP = 2;\nexport default class DECasualDateParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern(context) {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    let targetDate = context.reference.getDateWithAdjustedTimezone();\n    const dateKeyword = (match[DATE_GROUP] || \"\").toLowerCase();\n    const timeKeyword = (match[TIME_GROUP] || \"\").toLowerCase();\n    let component = context.createParsingComponents();\n    switch (dateKeyword) {\n      case \"jetzt\":\n        component = references.now(context.reference);\n        break;\n      case \"heute\":\n        component = references.today(context.reference);\n        break;\n      case \"morgen\":\n        targetDate = addDuration(targetDate, {\n          day: 1\n        });\n        assignSimilarDate(component, targetDate);\n        implySimilarTime(component, targetDate);\n        break;\n      case \"端bermorgen\":\n      case \"uebermorgen\":\n        targetDate = addDuration(targetDate, {\n          day: 2\n        });\n        assignSimilarDate(component, targetDate);\n        implySimilarTime(component, targetDate);\n        break;\n      case \"gestern\":\n        targetDate = addDuration(targetDate, {\n          day: -1\n        });\n        assignSimilarDate(component, targetDate);\n        implySimilarTime(component, targetDate);\n        break;\n      case \"vorgestern\":\n        targetDate = addDuration(targetDate, {\n          day: -2\n        });\n        assignSimilarDate(component, targetDate);\n        implySimilarTime(component, targetDate);\n        break;\n      default:\n        if (dateKeyword.match(/letzte\\s*nacht/)) {\n          if (targetDate.getHours() > 6) {\n            targetDate = addDuration(targetDate, {\n              day: -1\n            });\n          }\n          assignSimilarDate(component, targetDate);\n          component.imply(\"hour\", 0);\n        }\n        break;\n    }\n    if (timeKeyword) {\n      component = DECasualTimeParser.extractTimeComponents(component, timeKeyword);\n    }\n    return component;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","assignSimilarDate","implySimilarTime","DECasualTimeParser","references","addDuration","PATTERN","RegExp","DATE_GROUP","TIME_GROUP","DECasualDateParser","innerPattern","context","innerExtract","match","targetDate","reference","getDateWithAdjustedTimezone","dateKeyword","toLowerCase","timeKeyword","component","createParsingComponents","now","today","day","getHours","imply","extractTimeComponents"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\de\\parsers\\DECasualDateParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate, implySimilarTime } from \"../../../utils/dates\";\nimport DECasualTimeParser from \"./DECasualTimeParser\";\nimport * as references from \"../../../common/casualReferences\";\nimport { addDuration } from \"../../../calculation/duration\";\n\nconst PATTERN = new RegExp(\n    `(jetzt|heute|morgen|端bermorgen|uebermorgen|gestern|vorgestern|letzte\\\\s*nacht)` +\n        `(?:\\\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht))?` +\n        `(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst TIME_GROUP = 2;\n\nexport default class DECasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        let targetDate = context.reference.getDateWithAdjustedTimezone();\n        const dateKeyword = (match[DATE_GROUP] || \"\").toLowerCase();\n        const timeKeyword = (match[TIME_GROUP] || \"\").toLowerCase();\n\n        let component = context.createParsingComponents();\n        switch (dateKeyword) {\n            case \"jetzt\":\n                component = references.now(context.reference);\n                break;\n\n            case \"heute\":\n                component = references.today(context.reference);\n                break;\n\n            case \"morgen\":\n                targetDate = addDuration(targetDate, { day: 1 });\n                assignSimilarDate(component, targetDate);\n                implySimilarTime(component, targetDate);\n                break;\n\n            case \"端bermorgen\":\n            case \"uebermorgen\":\n                targetDate = addDuration(targetDate, { day: 2 });\n                assignSimilarDate(component, targetDate);\n                implySimilarTime(component, targetDate);\n                break;\n\n            case \"gestern\":\n                targetDate = addDuration(targetDate, { day: -1 });\n                assignSimilarDate(component, targetDate);\n                implySimilarTime(component, targetDate);\n                break;\n\n            case \"vorgestern\":\n                targetDate = addDuration(targetDate, { day: -2 });\n                assignSimilarDate(component, targetDate);\n                implySimilarTime(component, targetDate);\n                break;\n\n            default:\n                if (dateKeyword.match(/letzte\\s*nacht/)) {\n                    if (targetDate.getHours() > 6) {\n                        targetDate = addDuration(targetDate, { day: -1 });\n                    }\n\n                    assignSimilarDate(component, targetDate);\n                    component.imply(\"hour\", 0);\n                }\n\n                break;\n        }\n\n        if (timeKeyword) {\n            component = DECasualTimeParser.extractTimeComponents(component, timeKeyword);\n        }\n\n        return component;\n    }\n}\n"],"mappings":"AAEA,SAASA,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,yBAAuB;AAC3E,OAAOC,kBAAkB,MAAM,yBAAuB;AACtD,OAAO,KAAKC,UAAU,MAAM,qCAAmC;AAC/D,SAASC,WAAW,QAAQ,kCAAgC;AAE5D,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,gFAAgF,GAC5E,yEAAyE,GACzE,WAAW,EACf,GAAG,CACN;AAED,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,UAAU,GAAG,CAAC;AAEpB,eAAc,MAAOC,kBAAmB,SAAQV,sCAAsC;EAClFW,YAAYA,CAACC,OAAuB;IAChC,OAAON,OAAO;EAClB;EAEAO,YAAYA,CAACD,OAAuB,EAAEE,KAAuB;IACzD,IAAIC,UAAU,GAAGH,OAAO,CAACI,SAAS,CAACC,2BAA2B,EAAE;IAChE,MAAMC,WAAW,GAAG,CAACJ,KAAK,CAACN,UAAU,CAAC,IAAI,EAAE,EAAEW,WAAW,EAAE;IAC3D,MAAMC,WAAW,GAAG,CAACN,KAAK,CAACL,UAAU,CAAC,IAAI,EAAE,EAAEU,WAAW,EAAE;IAE3D,IAAIE,SAAS,GAAGT,OAAO,CAACU,uBAAuB,EAAE;IACjD,QAAQJ,WAAW;MACf,KAAK,OAAO;QACRG,SAAS,GAAGjB,UAAU,CAACmB,GAAG,CAACX,OAAO,CAACI,SAAS,CAAC;QAC7C;MAEJ,KAAK,OAAO;QACRK,SAAS,GAAGjB,UAAU,CAACoB,KAAK,CAACZ,OAAO,CAACI,SAAS,CAAC;QAC/C;MAEJ,KAAK,QAAQ;QACTD,UAAU,GAAGV,WAAW,CAACU,UAAU,EAAE;UAAEU,GAAG,EAAE;QAAC,CAAE,CAAC;QAChDxB,iBAAiB,CAACoB,SAAS,EAAEN,UAAU,CAAC;QACxCb,gBAAgB,CAACmB,SAAS,EAAEN,UAAU,CAAC;QACvC;MAEJ,KAAK,YAAY;MACjB,KAAK,aAAa;QACdA,UAAU,GAAGV,WAAW,CAACU,UAAU,EAAE;UAAEU,GAAG,EAAE;QAAC,CAAE,CAAC;QAChDxB,iBAAiB,CAACoB,SAAS,EAAEN,UAAU,CAAC;QACxCb,gBAAgB,CAACmB,SAAS,EAAEN,UAAU,CAAC;QACvC;MAEJ,KAAK,SAAS;QACVA,UAAU,GAAGV,WAAW,CAACU,UAAU,EAAE;UAAEU,GAAG,EAAE,CAAC;QAAC,CAAE,CAAC;QACjDxB,iBAAiB,CAACoB,SAAS,EAAEN,UAAU,CAAC;QACxCb,gBAAgB,CAACmB,SAAS,EAAEN,UAAU,CAAC;QACvC;MAEJ,KAAK,YAAY;QACbA,UAAU,GAAGV,WAAW,CAACU,UAAU,EAAE;UAAEU,GAAG,EAAE,CAAC;QAAC,CAAE,CAAC;QACjDxB,iBAAiB,CAACoB,SAAS,EAAEN,UAAU,CAAC;QACxCb,gBAAgB,CAACmB,SAAS,EAAEN,UAAU,CAAC;QACvC;MAEJ;QACI,IAAIG,WAAW,CAACJ,KAAK,CAAC,gBAAgB,CAAC,EAAE;UACrC,IAAIC,UAAU,CAACW,QAAQ,EAAE,GAAG,CAAC,EAAE;YAC3BX,UAAU,GAAGV,WAAW,CAACU,UAAU,EAAE;cAAEU,GAAG,EAAE,CAAC;YAAC,CAAE,CAAC;UACrD;UAEAxB,iBAAiB,CAACoB,SAAS,EAAEN,UAAU,CAAC;UACxCM,SAAS,CAACM,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9B;QAEA;IACR;IAEA,IAAIP,WAAW,EAAE;MACbC,SAAS,GAAGlB,kBAAkB,CAACyB,qBAAqB,CAACP,SAAS,EAAED,WAAW,CAAC;IAChF;IAEA,OAAOC,SAAS;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}