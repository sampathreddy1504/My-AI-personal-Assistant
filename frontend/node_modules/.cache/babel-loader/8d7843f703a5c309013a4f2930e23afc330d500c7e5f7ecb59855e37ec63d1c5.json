{"ast":null,"code":"import { MergingRefiner } from \"../abstractRefiners.js\";\nimport { addDuration } from \"../../calculation/duration.js\";\nexport default class AbstractMergeDateRangeRefiner extends MergingRefiner {\n  shouldMergeResults(textBetween, currentResult, nextResult) {\n    return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;\n  }\n  mergeResults(textBetween, fromResult, toResult) {\n    if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {\n      toResult.start.getCertainComponents().forEach(key => {\n        if (!fromResult.start.isCertain(key)) {\n          fromResult.start.imply(key, toResult.start.get(key));\n        }\n      });\n      fromResult.start.getCertainComponents().forEach(key => {\n        if (!toResult.start.isCertain(key)) {\n          toResult.start.imply(key, fromResult.start.get(key));\n        }\n      });\n    }\n    if (fromResult.start.date() > toResult.start.date()) {\n      let fromDate = fromResult.start.date();\n      let toDate = toResult.start.date();\n      if (toResult.start.isOnlyWeekdayComponent() && addDuration(toDate, {\n        day: 7\n      }) > fromDate) {\n        toDate = addDuration(toDate, {\n          day: 7\n        });\n        toResult.start.imply(\"day\", toDate.getDate());\n        toResult.start.imply(\"month\", toDate.getMonth() + 1);\n        toResult.start.imply(\"year\", toDate.getFullYear());\n      } else if (fromResult.start.isOnlyWeekdayComponent() && addDuration(fromDate, {\n        day: -7\n      }) < toDate) {\n        fromDate = addDuration(fromDate, {\n          day: -7\n        });\n        fromResult.start.imply(\"day\", fromDate.getDate());\n        fromResult.start.imply(\"month\", fromDate.getMonth() + 1);\n        fromResult.start.imply(\"year\", fromDate.getFullYear());\n      } else if (toResult.start.isDateWithUnknownYear() && addDuration(toDate, {\n        year: 1\n      }) > fromDate) {\n        toDate = addDuration(toDate, {\n          year: 1\n        });\n        toResult.start.imply(\"year\", toDate.getFullYear());\n      } else if (fromResult.start.isDateWithUnknownYear() && addDuration(fromDate, {\n        year: -1\n      }) < toDate) {\n        fromDate = addDuration(fromDate, {\n          year: -1\n        });\n        fromResult.start.imply(\"year\", fromDate.getFullYear());\n      } else {\n        [toResult, fromResult] = [fromResult, toResult];\n      }\n    }\n    const result = fromResult.clone();\n    result.start = fromResult.start;\n    result.end = toResult.start;\n    result.index = Math.min(fromResult.index, toResult.index);\n    if (fromResult.index < toResult.index) {\n      result.text = fromResult.text + textBetween + toResult.text;\n    } else {\n      result.text = toResult.text + textBetween + fromResult.text;\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["MergingRefiner","addDuration","AbstractMergeDateRangeRefiner","shouldMergeResults","textBetween","currentResult","nextResult","end","match","patternBetween","mergeResults","fromResult","toResult","start","isOnlyWeekdayComponent","getCertainComponents","forEach","key","isCertain","imply","get","date","fromDate","toDate","day","getDate","getMonth","getFullYear","isDateWithUnknownYear","year","result","clone","index","Math","min","text"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\common\\refiners\\AbstractMergeDateRangeRefiner.ts"],"sourcesContent":["/*\n  \n*/\n\nimport { ParsingResult } from \"../../results\";\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { addDuration } from \"../../calculation/duration\";\n\nexport default abstract class AbstractMergeDateRangeRefiner extends MergingRefiner {\n    abstract patternBetween(): RegExp;\n\n    shouldMergeResults(textBetween, currentResult, nextResult): boolean {\n        return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;\n    }\n\n    mergeResults(textBetween, fromResult, toResult): ParsingResult {\n        if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {\n            toResult.start.getCertainComponents().forEach((key) => {\n                if (!fromResult.start.isCertain(key)) {\n                    fromResult.start.imply(key, toResult.start.get(key));\n                }\n            });\n\n            fromResult.start.getCertainComponents().forEach((key) => {\n                if (!toResult.start.isCertain(key)) {\n                    toResult.start.imply(key, fromResult.start.get(key));\n                }\n            });\n        }\n        if (fromResult.start.date() > toResult.start.date()) {\n            let fromDate = fromResult.start.date();\n            let toDate = toResult.start.date();\n\n            if (toResult.start.isOnlyWeekdayComponent() && addDuration(toDate, { day: 7 }) > fromDate) {\n                toDate = addDuration(toDate, { day: 7 });\n                toResult.start.imply(\"day\", toDate.getDate());\n                toResult.start.imply(\"month\", toDate.getMonth() + 1);\n                toResult.start.imply(\"year\", toDate.getFullYear());\n            } else if (fromResult.start.isOnlyWeekdayComponent() && addDuration(fromDate, { day: -7 }) < toDate) {\n                fromDate = addDuration(fromDate, { day: -7 });\n                fromResult.start.imply(\"day\", fromDate.getDate());\n                fromResult.start.imply(\"month\", fromDate.getMonth() + 1);\n                fromResult.start.imply(\"year\", fromDate.getFullYear());\n            } else if (toResult.start.isDateWithUnknownYear() && addDuration(toDate, { year: 1 }) > fromDate) {\n                toDate = addDuration(toDate, { year: 1 });\n                toResult.start.imply(\"year\", toDate.getFullYear());\n            } else if (fromResult.start.isDateWithUnknownYear() && addDuration(fromDate, { year: -1 }) < toDate) {\n                fromDate = addDuration(fromDate, { year: -1 });\n                fromResult.start.imply(\"year\", fromDate.getFullYear());\n            } else {\n                [toResult, fromResult] = [fromResult, toResult];\n            }\n        }\n        const result = fromResult.clone();\n        result.start = fromResult.start;\n        result.end = toResult.start;\n        result.index = Math.min(fromResult.index, toResult.index);\n        if (fromResult.index < toResult.index) {\n            result.text = fromResult.text + textBetween + toResult.text;\n        } else {\n            result.text = toResult.text + textBetween + fromResult.text;\n        }\n        return result;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}