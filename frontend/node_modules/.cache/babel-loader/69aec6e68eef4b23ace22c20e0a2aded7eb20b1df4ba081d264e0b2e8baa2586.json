{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { addDuration } from \"../../../../calculation/duration.js\";\nimport { NUMBER, zhStringToNumber } from \"../constants.js\";\nconst PATTERN = new RegExp(\"(\\\\d+|[\" + Object.keys(NUMBER).join(\"\") + \"]+|半|幾)(?:\\\\s*)\" + \"(?:個)?\" + \"(秒(?:鐘)?|分鐘|小時|鐘|日|天|星期|禮拜|月|年)\" + \"(?:(?:之|過)?後|(?:之)?內)\", \"i\");\nconst NUMBER_GROUP = 1;\nconst UNIT_GROUP = 2;\nexport default class ZHHantDeadlineFormatParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const result = context.createParsingResult(match.index, match[0]);\n    let number = parseInt(match[NUMBER_GROUP]);\n    if (isNaN(number)) {\n      number = zhStringToNumber(match[NUMBER_GROUP]);\n    }\n    if (isNaN(number)) {\n      const string = match[NUMBER_GROUP];\n      if (string === \"幾\") {\n        number = 3;\n      } else if (string === \"半\") {\n        number = 0.5;\n      } else {\n        return null;\n      }\n    }\n    const duration = {};\n    const unit = match[UNIT_GROUP];\n    const unitAbbr = unit[0];\n    if (unitAbbr.match(/[日天星禮月年]/)) {\n      if (unitAbbr == \"日\" || unitAbbr == \"天\") {\n        duration.day = number;\n      } else if (unitAbbr == \"星\" || unitAbbr == \"禮\") {\n        duration.week = number;\n      } else if (unitAbbr == \"月\") {\n        duration.month = number;\n      } else if (unitAbbr == \"年\") {\n        duration.year = number;\n      }\n      const date = addDuration(context.refDate, duration);\n      result.start.assign(\"year\", date.getFullYear());\n      result.start.assign(\"month\", date.getMonth() + 1);\n      result.start.assign(\"day\", date.getDate());\n      return result;\n    }\n    if (unitAbbr == \"秒\") {\n      duration.second = number;\n    } else if (unitAbbr == \"分\") {\n      duration.minute = number;\n    } else if (unitAbbr == \"小\" || unitAbbr == \"鐘\") {\n      duration.hour = number;\n    }\n    const date = addDuration(context.refDate, duration);\n    result.start.imply(\"year\", date.getFullYear());\n    result.start.imply(\"month\", date.getMonth() + 1);\n    result.start.imply(\"day\", date.getDate());\n    result.start.assign(\"hour\", date.getHours());\n    result.start.assign(\"minute\", date.getMinutes());\n    result.start.assign(\"second\", date.getSeconds());\n    return result;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","addDuration","NUMBER","zhStringToNumber","PATTERN","RegExp","Object","keys","join","NUMBER_GROUP","UNIT_GROUP","ZHHantDeadlineFormatParser","innerPattern","innerExtract","context","match","result","createParsingResult","index","number","parseInt","isNaN","string","duration","unit","unitAbbr","day","week","month","year","date","refDate","start","assign","getFullYear","getMonth","getDate","second","minute","hour","imply","getHours","getMinutes","getSeconds"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\zh\\hant\\parsers\\ZHHantDeadlineFormatParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { addDuration, Duration } from \"../../../../calculation/duration\";\nimport { NUMBER, zhStringToNumber } from \"../constants\";\n\nconst PATTERN = new RegExp(\n    \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+|半|幾)(?:\\\\s*)\" +\n        \"(?:個)?\" +\n        \"(秒(?:鐘)?|分鐘|小時|鐘|日|天|星期|禮拜|月|年)\" +\n        \"(?:(?:之|過)?後|(?:之)?內)\",\n    \"i\"\n);\n\nconst NUMBER_GROUP = 1;\nconst UNIT_GROUP = 2;\n\nexport default class ZHHantDeadlineFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        let number = parseInt(match[NUMBER_GROUP]);\n        if (isNaN(number)) {\n            number = zhStringToNumber(match[NUMBER_GROUP]);\n        }\n\n        if (isNaN(number)) {\n            const string = match[NUMBER_GROUP];\n            if (string === \"幾\") {\n                number = 3;\n            } else if (string === \"半\") {\n                number = 0.5;\n            } else {\n                //just in case\n                return null;\n            }\n        }\n\n        const duration: Duration = {};\n        const unit = match[UNIT_GROUP];\n        const unitAbbr = unit[0];\n\n        if (unitAbbr.match(/[日天星禮月年]/)) {\n            if (unitAbbr == \"日\" || unitAbbr == \"天\") {\n                duration.day = number;\n            } else if (unitAbbr == \"星\" || unitAbbr == \"禮\") {\n                duration.week = number;\n            } else if (unitAbbr == \"月\") {\n                duration.month = number;\n            } else if (unitAbbr == \"年\") {\n                duration.year = number;\n            }\n\n            const date = addDuration(context.refDate, duration);\n            result.start.assign(\"year\", date.getFullYear());\n            result.start.assign(\"month\", date.getMonth() + 1);\n            result.start.assign(\"day\", date.getDate());\n            return result;\n        }\n\n        if (unitAbbr == \"秒\") {\n            duration.second = number;\n        } else if (unitAbbr == \"分\") {\n            duration.minute = number;\n        } else if (unitAbbr == \"小\" || unitAbbr == \"鐘\") {\n            duration.hour = number;\n        }\n\n        const date = addDuration(context.refDate, duration);\n        result.start.imply(\"year\", date.getFullYear());\n        result.start.imply(\"month\", date.getMonth() + 1);\n        result.start.imply(\"day\", date.getDate());\n        result.start.assign(\"hour\", date.getHours());\n        result.start.assign(\"minute\", date.getMinutes());\n        result.start.assign(\"second\", date.getSeconds());\n        return result;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}