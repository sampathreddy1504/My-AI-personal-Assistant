{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { NUMBER, zhStringToNumber, zhStringToYear } from \"../constants.js\";\nconst YEAR_GROUP = 1;\nconst MONTH_GROUP = 2;\nconst DAY_GROUP = 3;\nexport default class ZHHansDateParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return new RegExp(\"(\" + \"\\\\d{2,4}|\" + \"[\" + Object.keys(NUMBER).join(\"\") + \"]{4}|\" + \"[\" + Object.keys(NUMBER).join(\"\") + \"]{2}\" + \")?\" + \"(?:\\\\s*)\" + \"(?:年)?\" + \"(?:[\\\\s|,|，]*)\" + \"(\" + \"\\\\d{1,2}|\" + \"[\" + Object.keys(NUMBER).join(\"\") + \"]{1,3}\" + \")\" + \"(?:\\\\s*)\" + \"(?:月)\" + \"(?:\\\\s*)\" + \"(\" + \"\\\\d{1,2}|\" + \"[\" + Object.keys(NUMBER).join(\"\") + \"]{1,3}\" + \")?\" + \"(?:\\\\s*)\" + \"(?:日|号)?\");\n  }\n  innerExtract(context, match) {\n    const result = context.createParsingResult(match.index, match[0]);\n    let month = parseInt(match[MONTH_GROUP]);\n    if (isNaN(month)) month = zhStringToNumber(match[MONTH_GROUP]);\n    result.start.assign(\"month\", month);\n    if (match[DAY_GROUP]) {\n      let day = parseInt(match[DAY_GROUP]);\n      if (isNaN(day)) day = zhStringToNumber(match[DAY_GROUP]);\n      result.start.assign(\"day\", day);\n    } else {\n      result.start.imply(\"day\", context.refDate.getDate());\n    }\n    if (match[YEAR_GROUP]) {\n      let year = parseInt(match[YEAR_GROUP]);\n      if (isNaN(year)) year = zhStringToYear(match[YEAR_GROUP]);\n      result.start.assign(\"year\", year);\n    } else {\n      result.start.imply(\"year\", context.refDate.getFullYear());\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","NUMBER","zhStringToNumber","zhStringToYear","YEAR_GROUP","MONTH_GROUP","DAY_GROUP","ZHHansDateParser","innerPattern","RegExp","Object","keys","join","innerExtract","context","match","result","createParsingResult","index","month","parseInt","isNaN","start","assign","day","imply","refDate","getDate","year","getFullYear"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\zh\\hans\\parsers\\ZHHansDateParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { NUMBER, zhStringToNumber, zhStringToYear } from \"../constants\";\n\nconst YEAR_GROUP = 1;\nconst MONTH_GROUP = 2;\nconst DAY_GROUP = 3;\n\nexport default class ZHHansDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        // prettier-ignore\n        return new RegExp(\n            \"(\" +\n                \"\\\\d{2,4}|\" +\n                \"[\" +\n                Object.keys(NUMBER).join(\"\") +\n                \"]{4}|\" +\n                \"[\" +\n                Object.keys(NUMBER).join(\"\") +\n                \"]{2}\" +\n                \")?\" +\n                \"(?:\\\\s*)\" +\n                \"(?:年)?\" +\n                \"(?:[\\\\s|,|，]*)\" +\n                \"(\" +\n                \"\\\\d{1,2}|\" +\n                \"[\" +\n                Object.keys(NUMBER).join(\"\") +\n                \"]{1,3}\" +\n                \")\" +\n                \"(?:\\\\s*)\" +\n                \"(?:月)\" +\n                \"(?:\\\\s*)\" +\n                \"(\" +\n                \"\\\\d{1,2}|\" +\n                \"[\" +\n                Object.keys(NUMBER).join(\"\") +\n                \"]{1,3}\" +\n                \")?\" +\n                \"(?:\\\\s*)\" +\n                \"(?:日|号)?\"\n        );\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        //Month\n        let month = parseInt(match[MONTH_GROUP]);\n        if (isNaN(month)) month = zhStringToNumber(match[MONTH_GROUP]);\n        result.start.assign(\"month\", month);\n\n        //Day\n        if (match[DAY_GROUP]) {\n            let day = parseInt(match[DAY_GROUP]);\n            if (isNaN(day)) day = zhStringToNumber(match[DAY_GROUP]);\n            result.start.assign(\"day\", day);\n        } else {\n            result.start.imply(\"day\", context.refDate.getDate());\n        }\n\n        //Year\n        if (match[YEAR_GROUP]) {\n            let year = parseInt(match[YEAR_GROUP]);\n            if (isNaN(year)) year = zhStringToYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", year);\n        } else {\n            result.start.imply(\"year\", context.refDate.getFullYear());\n        }\n\n        return result;\n    }\n}\n"],"mappings":"AACA,SAASA,sCAAsC,QAAQ,8DAA4D;AACnH,SAASC,MAAM,EAAEC,gBAAgB,EAAEC,cAAc,QAAQ,iBAAe;AAExE,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,WAAW,GAAG,CAAC;AACrB,MAAMC,SAAS,GAAG,CAAC;AAEnB,eAAc,MAAOC,gBAAiB,SAAQP,sCAAsC;EAChFQ,YAAYA,CAAA;IAER,OAAO,IAAIC,MAAM,CACb,GAAG,GACC,WAAW,GACX,GAAG,GACHC,MAAM,CAACC,IAAI,CAACV,MAAM,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,GAC5B,OAAO,GACP,GAAG,GACHF,MAAM,CAACC,IAAI,CAACV,MAAM,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,GAC5B,MAAM,GACN,IAAI,GACJ,UAAU,GACV,QAAQ,GACR,gBAAgB,GAChB,GAAG,GACH,WAAW,GACX,GAAG,GACHF,MAAM,CAACC,IAAI,CAACV,MAAM,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,GAC5B,QAAQ,GACR,GAAG,GACH,UAAU,GACV,OAAO,GACP,UAAU,GACV,GAAG,GACH,WAAW,GACX,GAAG,GACHF,MAAM,CAACC,IAAI,CAACV,MAAM,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,GAC5B,QAAQ,GACR,IAAI,GACJ,UAAU,GACV,UAAU,CACjB;EACL;EAEAC,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,MAAM,GAAGF,OAAO,CAACG,mBAAmB,CAACF,KAAK,CAACG,KAAK,EAAEH,KAAK,CAAC,CAAC,CAAC,CAAC;IAGjE,IAAII,KAAK,GAAGC,QAAQ,CAACL,KAAK,CAACV,WAAW,CAAC,CAAC;IACxC,IAAIgB,KAAK,CAACF,KAAK,CAAC,EAAEA,KAAK,GAAGjB,gBAAgB,CAACa,KAAK,CAACV,WAAW,CAAC,CAAC;IAC9DW,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAAC;IAGnC,IAAIJ,KAAK,CAACT,SAAS,CAAC,EAAE;MAClB,IAAIkB,GAAG,GAAGJ,QAAQ,CAACL,KAAK,CAACT,SAAS,CAAC,CAAC;MACpC,IAAIe,KAAK,CAACG,GAAG,CAAC,EAAEA,GAAG,GAAGtB,gBAAgB,CAACa,KAAK,CAACT,SAAS,CAAC,CAAC;MACxDU,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC,KAAK,EAAEC,GAAG,CAAC;IACnC,CAAC,MAAM;MACHR,MAAM,CAACM,KAAK,CAACG,KAAK,CAAC,KAAK,EAAEX,OAAO,CAACY,OAAO,CAACC,OAAO,EAAE,CAAC;IACxD;IAGA,IAAIZ,KAAK,CAACX,UAAU,CAAC,EAAE;MACnB,IAAIwB,IAAI,GAAGR,QAAQ,CAACL,KAAK,CAACX,UAAU,CAAC,CAAC;MACtC,IAAIiB,KAAK,CAACO,IAAI,CAAC,EAAEA,IAAI,GAAGzB,cAAc,CAACY,KAAK,CAACX,UAAU,CAAC,CAAC;MACzDY,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC,MAAM,EAAEK,IAAI,CAAC;IACrC,CAAC,MAAM;MACHZ,MAAM,CAACM,KAAK,CAACG,KAAK,CAAC,MAAM,EAAEX,OAAO,CAACY,OAAO,CAACG,WAAW,EAAE,CAAC;IAC7D;IAEA,OAAOb,MAAM;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}