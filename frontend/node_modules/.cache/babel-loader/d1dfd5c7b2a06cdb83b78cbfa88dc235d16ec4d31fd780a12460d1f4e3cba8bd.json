{"ast":null,"code":"import { Meridiem } from \"../types.js\";\nexport function assignSimilarDate(component, target) {\n  component.assign(\"day\", target.getDate());\n  component.assign(\"month\", target.getMonth() + 1);\n  component.assign(\"year\", target.getFullYear());\n}\nexport function assignSimilarTime(component, target) {\n  component.assign(\"hour\", target.getHours());\n  component.assign(\"minute\", target.getMinutes());\n  component.assign(\"second\", target.getSeconds());\n  component.assign(\"millisecond\", target.getMilliseconds());\n  component.assign(\"meridiem\", target.getHours() < 12 ? Meridiem.AM : Meridiem.PM);\n}\nexport function implySimilarDate(component, target) {\n  component.imply(\"day\", target.getDate());\n  component.imply(\"month\", target.getMonth() + 1);\n  component.imply(\"year\", target.getFullYear());\n}\nexport function implySimilarTime(component, target) {\n  component.imply(\"hour\", target.getHours());\n  component.imply(\"minute\", target.getMinutes());\n  component.imply(\"second\", target.getSeconds());\n  component.imply(\"millisecond\", target.getMilliseconds());\n  component.imply(\"meridiem\", target.getHours() < 12 ? Meridiem.AM : Meridiem.PM);\n}","map":{"version":3,"names":["Meridiem","assignSimilarDate","component","target","assign","getDate","getMonth","getFullYear","assignSimilarTime","getHours","getMinutes","getSeconds","getMilliseconds","AM","PM","implySimilarDate","imply","implySimilarTime"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\utils\\dates.ts"],"sourcesContent":["import { ParsingComponents } from \"../results\";\nimport { Meridiem } from \"../types\";\n\n/**\n * Assign (force update) the parsing component to the same day as the `target`.\n * @param component the component to be updated.\n * @param target the target date with timezone adjusted.\n */\nexport function assignSimilarDate(component: ParsingComponents, target: Date) {\n    component.assign(\"day\", target.getDate());\n    component.assign(\"month\", target.getMonth() + 1);\n    component.assign(\"year\", target.getFullYear());\n}\n\n/**\n * Assign (force update) the parsing component to the same time as the `target`.\n * @param component the component to be updated.\n * @param target the target date with timezone adjusted.\n */\nexport function assignSimilarTime(component: ParsingComponents, target: Date) {\n    component.assign(\"hour\", target.getHours());\n    component.assign(\"minute\", target.getMinutes());\n    component.assign(\"second\", target.getSeconds());\n    component.assign(\"millisecond\", target.getMilliseconds());\n    component.assign(\"meridiem\", target.getHours() < 12 ? Meridiem.AM : Meridiem.PM);\n}\n\n/**\n * Imply (weakly update) the parsing component to the same day as the `target`.\n * @param component the component to be updated.\n * @param target the target date with timezone adjusted.\n */\nexport function implySimilarDate(component: ParsingComponents, target: Date) {\n    component.imply(\"day\", target.getDate());\n    component.imply(\"month\", target.getMonth() + 1);\n    component.imply(\"year\", target.getFullYear());\n}\n\n/**\n * Imply (weakly update) the parsing component to the same time as the `target`.\n * @param component the component to be updated.\n * @param target the target date with timezone adjusted.\n */\nexport function implySimilarTime(component: ParsingComponents, target: Date) {\n    component.imply(\"hour\", target.getHours());\n    component.imply(\"minute\", target.getMinutes());\n    component.imply(\"second\", target.getSeconds());\n    component.imply(\"millisecond\", target.getMilliseconds());\n    component.imply(\"meridiem\", target.getHours() < 12 ? Meridiem.AM : Meridiem.PM);\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,aAAW;AAOpC,OAAM,SAAUC,iBAAiBA,CAACC,SAA4B,EAAEC,MAAY;EACxED,SAAS,CAACE,MAAM,CAAC,KAAK,EAAED,MAAM,CAACE,OAAO,EAAE,CAAC;EACzCH,SAAS,CAACE,MAAM,CAAC,OAAO,EAAED,MAAM,CAACG,QAAQ,EAAE,GAAG,CAAC,CAAC;EAChDJ,SAAS,CAACE,MAAM,CAAC,MAAM,EAAED,MAAM,CAACI,WAAW,EAAE,CAAC;AAClD;AAOA,OAAM,SAAUC,iBAAiBA,CAACN,SAA4B,EAAEC,MAAY;EACxED,SAAS,CAACE,MAAM,CAAC,MAAM,EAAED,MAAM,CAACM,QAAQ,EAAE,CAAC;EAC3CP,SAAS,CAACE,MAAM,CAAC,QAAQ,EAAED,MAAM,CAACO,UAAU,EAAE,CAAC;EAC/CR,SAAS,CAACE,MAAM,CAAC,QAAQ,EAAED,MAAM,CAACQ,UAAU,EAAE,CAAC;EAC/CT,SAAS,CAACE,MAAM,CAAC,aAAa,EAAED,MAAM,CAACS,eAAe,EAAE,CAAC;EACzDV,SAAS,CAACE,MAAM,CAAC,UAAU,EAAED,MAAM,CAACM,QAAQ,EAAE,GAAG,EAAE,GAAGT,QAAQ,CAACa,EAAE,GAAGb,QAAQ,CAACc,EAAE,CAAC;AACpF;AAOA,OAAM,SAAUC,gBAAgBA,CAACb,SAA4B,EAAEC,MAAY;EACvED,SAAS,CAACc,KAAK,CAAC,KAAK,EAAEb,MAAM,CAACE,OAAO,EAAE,CAAC;EACxCH,SAAS,CAACc,KAAK,CAAC,OAAO,EAAEb,MAAM,CAACG,QAAQ,EAAE,GAAG,CAAC,CAAC;EAC/CJ,SAAS,CAACc,KAAK,CAAC,MAAM,EAAEb,MAAM,CAACI,WAAW,EAAE,CAAC;AACjD;AAOA,OAAM,SAAUU,gBAAgBA,CAACf,SAA4B,EAAEC,MAAY;EACvED,SAAS,CAACc,KAAK,CAAC,MAAM,EAAEb,MAAM,CAACM,QAAQ,EAAE,CAAC;EAC1CP,SAAS,CAACc,KAAK,CAAC,QAAQ,EAAEb,MAAM,CAACO,UAAU,EAAE,CAAC;EAC9CR,SAAS,CAACc,KAAK,CAAC,QAAQ,EAAEb,MAAM,CAACQ,UAAU,EAAE,CAAC;EAC9CT,SAAS,CAACc,KAAK,CAAC,aAAa,EAAEb,MAAM,CAACS,eAAe,EAAE,CAAC;EACxDV,SAAS,CAACc,KAAK,CAAC,UAAU,EAAEb,MAAM,CAACM,QAAQ,EAAE,GAAG,EAAE,GAAGT,QAAQ,CAACa,EAAE,GAAGb,QAAQ,CAACc,EAAE,CAAC;AACnF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}