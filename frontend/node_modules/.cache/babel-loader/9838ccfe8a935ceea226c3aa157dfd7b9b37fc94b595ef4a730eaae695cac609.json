{"ast":null,"code":"import { TIME_UNITS_PATTERN, parseDuration } from \"../constants.js\";\nimport { ParsingComponents } from \"../../../results.js\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { reverseDuration } from \"../../../calculation/duration.js\";\nconst PATTERN = new RegExp(`(questo|ultimo|passato|prossimo|dopo|questa|ultima|passata|prossima|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\nexport default class ENTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return PATTERN;\n  }\n  innerExtract(context, match) {\n    const prefix = match[1].toLowerCase();\n    let timeUnits = parseDuration(match[2]);\n    switch (prefix) {\n      case \"last\":\n      case \"past\":\n      case \"-\":\n        timeUnits = reverseDuration(timeUnits);\n        break;\n    }\n    return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n  }\n}","map":{"version":3,"names":["TIME_UNITS_PATTERN","parseDuration","ParsingComponents","AbstractParserWithWordBoundaryChecking","reverseDuration","PATTERN","RegExp","ENTimeUnitCasualRelativeFormatParser","innerPattern","innerExtract","context","match","prefix","toLowerCase","timeUnits","createRelativeFromReference","reference"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\it\\parsers\\ITTimeUnitCasualRelativeFormatParser.ts"],"sourcesContent":["import { TIME_UNITS_PATTERN, parseDuration } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseDuration } from \"../../../calculation/duration\";\n\nconst PATTERN = new RegExp(\n    `(questo|ultimo|passato|prossimo|dopo|questa|ultima|passata|prossima|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nexport default class ENTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const prefix = match[1].toLowerCase();\n        let timeUnits = parseDuration(match[2]);\n        switch (prefix) {\n            case \"last\":\n            case \"past\":\n            case \"-\":\n                timeUnits = reverseDuration(timeUnits);\n                break;\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,aAAa,QAAQ,iBAAe;AAEjE,SAASC,iBAAiB,QAAQ,qBAAmB;AACrD,SAASC,sCAAsC,QAAQ,2DAAyD;AAChH,SAASC,eAAe,QAAQ,kCAAgC;AAEhE,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,kFAAkFN,kBAAkB,YAAY,EAChH,GAAG,CACN;AAED,eAAc,MAAOO,oCAAqC,SAAQJ,sCAAsC;EACpGK,YAAYA,CAAA;IACR,OAAOH,OAAO;EAClB;EAEAI,YAAYA,CAACC,OAAuB,EAAEC,KAAuB;IACzD,MAAMC,MAAM,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE;IACrC,IAAIC,SAAS,GAAGb,aAAa,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC;IACvC,QAAQC,MAAM;MACV,KAAK,MAAM;MACX,KAAK,MAAM;MACX,KAAK,GAAG;QACJE,SAAS,GAAGV,eAAe,CAACU,SAAS,CAAC;QACtC;IACR;IAEA,OAAOZ,iBAAiB,CAACa,2BAA2B,CAACL,OAAO,CAACM,SAAS,EAAEF,SAAS,CAAC;EACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}