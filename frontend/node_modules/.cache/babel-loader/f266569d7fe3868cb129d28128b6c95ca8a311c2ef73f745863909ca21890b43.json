{"ast":null,"code":"import { addDuration } from \"./duration.js\";\nexport function findMostLikelyADYear(yearNumber) {\n  if (yearNumber < 100) {\n    if (yearNumber > 50) {\n      yearNumber = yearNumber + 1900;\n    } else {\n      yearNumber = yearNumber + 2000;\n    }\n  }\n  return yearNumber;\n}\nexport function findYearClosestToRef(refDate, day, month) {\n  let date = new Date(refDate);\n  date.setMonth(month - 1);\n  date.setDate(day);\n  const nextYear = addDuration(date, {\n    \"year\": 1\n  });\n  const lastYear = addDuration(date, {\n    \"year\": -1\n  });\n  if (Math.abs(nextYear.getTime() - refDate.getTime()) < Math.abs(date.getTime() - refDate.getTime())) {\n    date = nextYear;\n  } else if (Math.abs(lastYear.getTime() - refDate.getTime()) < Math.abs(date.getTime() - refDate.getTime())) {\n    date = lastYear;\n  }\n  return date.getFullYear();\n}","map":{"version":3,"names":["addDuration","findMostLikelyADYear","yearNumber","findYearClosestToRef","refDate","day","month","date","Date","setMonth","setDate","nextYear","lastYear","Math","abs","getTime","getFullYear"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\calculation\\years.ts"],"sourcesContent":["import { addDuration } from \"./duration\";\n\n/**\n * Find the most likely year, from a raw number. For example:\n * 1997 => 1997\n * 97 => 1997\n * 12 => 2012\n */\nexport function findMostLikelyADYear(yearNumber: number): number {\n    if (yearNumber < 100) {\n        if (yearNumber > 50) {\n            yearNumber = yearNumber + 1900;\n        } else {\n            yearNumber = yearNumber + 2000;\n        }\n    }\n\n    return yearNumber;\n}\n\nexport function findYearClosestToRef(refDate: Date, day: number, month: number): number {\n    let date = new Date(refDate);\n    date.setMonth(month - 1);\n    date.setDate(day);\n    const nextYear = addDuration(date, { \"year\": 1 });\n    const lastYear = addDuration(date, { \"year\": -1 });\n    if (Math.abs(nextYear.getTime() - refDate.getTime()) < Math.abs(date.getTime() - refDate.getTime())) {\n        date = nextYear;\n    } else if (Math.abs(lastYear.getTime() - refDate.getTime()) < Math.abs(date.getTime() - refDate.getTime())) {\n        date = lastYear;\n    }\n    return date.getFullYear();\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAa;AAQzC,OAAM,SAAUC,oBAAoBA,CAACC,UAAkB;EACnD,IAAIA,UAAU,GAAG,GAAG,EAAE;IAClB,IAAIA,UAAU,GAAG,EAAE,EAAE;MACjBA,UAAU,GAAGA,UAAU,GAAG,IAAI;IAClC,CAAC,MAAM;MACHA,UAAU,GAAGA,UAAU,GAAG,IAAI;IAClC;EACJ;EAEA,OAAOA,UAAU;AACrB;AAEA,OAAM,SAAUC,oBAAoBA,CAACC,OAAa,EAAEC,GAAW,EAAEC,KAAa;EAC1E,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAACJ,OAAO,CAAC;EAC5BG,IAAI,CAACE,QAAQ,CAACH,KAAK,GAAG,CAAC,CAAC;EACxBC,IAAI,CAACG,OAAO,CAACL,GAAG,CAAC;EACjB,MAAMM,QAAQ,GAAGX,WAAW,CAACO,IAAI,EAAE;IAAE,MAAM,EAAE;EAAC,CAAE,CAAC;EACjD,MAAMK,QAAQ,GAAGZ,WAAW,CAACO,IAAI,EAAE;IAAE,MAAM,EAAE,CAAC;EAAC,CAAE,CAAC;EAClD,IAAIM,IAAI,CAACC,GAAG,CAACH,QAAQ,CAACI,OAAO,EAAE,GAAGX,OAAO,CAACW,OAAO,EAAE,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACP,IAAI,CAACQ,OAAO,EAAE,GAAGX,OAAO,CAACW,OAAO,EAAE,CAAC,EAAE;IACjGR,IAAI,GAAGI,QAAQ;EACnB,CAAC,MAAM,IAAIE,IAAI,CAACC,GAAG,CAACF,QAAQ,CAACG,OAAO,EAAE,GAAGX,OAAO,CAACW,OAAO,EAAE,CAAC,GAAGF,IAAI,CAACC,GAAG,CAACP,IAAI,CAACQ,OAAO,EAAE,GAAGX,OAAO,CAACW,OAAO,EAAE,CAAC,EAAE;IACxGR,IAAI,GAAGK,QAAQ;EACnB;EACA,OAAOL,IAAI,CAACS,WAAW,EAAE;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}