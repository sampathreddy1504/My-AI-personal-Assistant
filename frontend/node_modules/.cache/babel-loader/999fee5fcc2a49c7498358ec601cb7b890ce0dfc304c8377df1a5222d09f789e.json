{"ast":null,"code":"import { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary.js\";\nimport { NUMBER, zhStringToNumber } from \"../constants.js\";\nconst FIRST_REG_PATTERN = new RegExp(\"(?:由|從|自)?\" + \"(?:\" + \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|\" + \"(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|\" + \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)\" + \"(?:[\\\\s,，]*)\" + \"(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?\" + \")?\" + \"(?:[\\\\s,，]*)\" + \"(?:(\\\\d+|[\" + Object.keys(NUMBER).join(\"\") + \"]+)(?:\\\\s*)(?:點|時|:|：)\" + \"(?:\\\\s*)\" + \"(\\\\d+|半|正|整|[\" + Object.keys(NUMBER).join(\"\") + \"]+)?(?:\\\\s*)(?:分|:|：)?\" + \"(?:\\\\s*)\" + \"(\\\\d+|[\" + Object.keys(NUMBER).join(\"\") + \"]+)?(?:\\\\s*)(?:秒)?)\" + \"(?:\\\\s*(A.M.|P.M.|AM?|PM?))?\", \"i\");\nconst SECOND_REG_PATTERN = new RegExp(\"(?:^\\\\s*(?:到|至|\\\\-|\\\\–|\\\\~|\\\\〜)\\\\s*)\" + \"(?:\" + \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|\" + \"(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|\" + \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)\" + \"(?:[\\\\s,，]*)\" + \"(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?\" + \")?\" + \"(?:[\\\\s,，]*)\" + \"(?:(\\\\d+|[\" + Object.keys(NUMBER).join(\"\") + \"]+)(?:\\\\s*)(?:點|時|:|：)\" + \"(?:\\\\s*)\" + \"(\\\\d+|半|正|整|[\" + Object.keys(NUMBER).join(\"\") + \"]+)?(?:\\\\s*)(?:分|:|：)?\" + \"(?:\\\\s*)\" + \"(\\\\d+|[\" + Object.keys(NUMBER).join(\"\") + \"]+)?(?:\\\\s*)(?:秒)?)\" + \"(?:\\\\s*(A.M.|P.M.|AM?|PM?))?\", \"i\");\nconst DAY_GROUP_1 = 1;\nconst ZH_AM_PM_HOUR_GROUP_1 = 2;\nconst ZH_AM_PM_HOUR_GROUP_2 = 3;\nconst DAY_GROUP_3 = 4;\nconst ZH_AM_PM_HOUR_GROUP_3 = 5;\nconst HOUR_GROUP = 6;\nconst MINUTE_GROUP = 7;\nconst SECOND_GROUP = 8;\nconst AM_PM_HOUR_GROUP = 9;\nexport default class ZHHantTimeExpressionParser extends AbstractParserWithWordBoundaryChecking {\n  innerPattern() {\n    return FIRST_REG_PATTERN;\n  }\n  innerExtract(context, match) {\n    if (match.index > 0 && context.text[match.index - 1].match(/\\w/)) {\n      return null;\n    }\n    const result = context.createParsingResult(match.index, match[0]);\n    const startMoment = new Date(context.refDate.getTime());\n    if (match[DAY_GROUP_1]) {\n      const day1 = match[DAY_GROUP_1];\n      if (day1 == \"明\" || day1 == \"聽\") {\n        if (context.refDate.getHours() > 1) {\n          startMoment.setDate(startMoment.getDate() + 1);\n        }\n      } else if (day1 == \"昨\" || day1 == \"尋\" || day1 == \"琴\") {\n        startMoment.setDate(startMoment.getDate() - 1);\n      } else if (day1 == \"前\") {\n        startMoment.setDate(startMoment.getDate() - 2);\n      } else if (day1 == \"大前\") {\n        startMoment.setDate(startMoment.getDate() - 3);\n      } else if (day1 == \"後\") {\n        startMoment.setDate(startMoment.getDate() + 2);\n      } else if (day1 == \"大後\") {\n        startMoment.setDate(startMoment.getDate() + 3);\n      }\n      result.start.assign(\"day\", startMoment.getDate());\n      result.start.assign(\"month\", startMoment.getMonth() + 1);\n      result.start.assign(\"year\", startMoment.getFullYear());\n    } else if (match[DAY_GROUP_3]) {\n      const day3 = match[DAY_GROUP_3];\n      if (day3 == \"明\" || day3 == \"聽\") {\n        startMoment.setDate(startMoment.getDate() + 1);\n      } else if (day3 == \"昨\" || day3 == \"尋\" || day3 == \"琴\") {\n        startMoment.setDate(startMoment.getDate() - 1);\n      } else if (day3 == \"前\") {\n        startMoment.setDate(startMoment.getDate() - 2);\n      } else if (day3 == \"大前\") {\n        startMoment.setDate(startMoment.getDate() - 3);\n      } else if (day3 == \"後\") {\n        startMoment.setDate(startMoment.getDate() + 2);\n      } else if (day3 == \"大後\") {\n        startMoment.setDate(startMoment.getDate() + 3);\n      }\n      result.start.assign(\"day\", startMoment.getDate());\n      result.start.assign(\"month\", startMoment.getMonth() + 1);\n      result.start.assign(\"year\", startMoment.getFullYear());\n    } else {\n      result.start.imply(\"day\", startMoment.getDate());\n      result.start.imply(\"month\", startMoment.getMonth() + 1);\n      result.start.imply(\"year\", startMoment.getFullYear());\n    }\n    let hour = 0;\n    let minute = 0;\n    let meridiem = -1;\n    if (match[SECOND_GROUP]) {\n      var second = parseInt(match[SECOND_GROUP]);\n      if (isNaN(second)) {\n        second = zhStringToNumber(match[SECOND_GROUP]);\n      }\n      if (second >= 60) return null;\n      result.start.assign(\"second\", second);\n    }\n    hour = parseInt(match[HOUR_GROUP]);\n    if (isNaN(hour)) {\n      hour = zhStringToNumber(match[HOUR_GROUP]);\n    }\n    if (match[MINUTE_GROUP]) {\n      if (match[MINUTE_GROUP] == \"半\") {\n        minute = 30;\n      } else if (match[MINUTE_GROUP] == \"正\" || match[MINUTE_GROUP] == \"整\") {\n        minute = 0;\n      } else {\n        minute = parseInt(match[MINUTE_GROUP]);\n        if (isNaN(minute)) {\n          minute = zhStringToNumber(match[MINUTE_GROUP]);\n        }\n      }\n    } else if (hour > 100) {\n      minute = hour % 100;\n      hour = Math.floor(hour / 100);\n    }\n    if (minute >= 60) {\n      return null;\n    }\n    if (hour > 24) {\n      return null;\n    }\n    if (hour >= 12) {\n      meridiem = 1;\n    }\n    if (match[AM_PM_HOUR_GROUP]) {\n      if (hour > 12) return null;\n      var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n      if (ampm == \"a\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      }\n      if (ampm == \"p\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {\n      var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];\n      var zhAMPM1 = zhAMPMString1[0];\n      if (zhAMPM1 == \"朝\" || zhAMPM1 == \"早\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM1 == \"晚\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {\n      var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];\n      var zhAMPM2 = zhAMPMString2[0];\n      if (zhAMPM2 == \"上\" || zhAMPM2 == \"朝\" || zhAMPM2 == \"早\" || zhAMPM2 == \"凌\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM2 == \"下\" || zhAMPM2 == \"晏\" || zhAMPM2 == \"晚\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {\n      var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];\n      var zhAMPM3 = zhAMPMString3[0];\n      if (zhAMPM3 == \"上\" || zhAMPM3 == \"朝\" || zhAMPM3 == \"早\" || zhAMPM3 == \"凌\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM3 == \"下\" || zhAMPM3 == \"晏\" || zhAMPM3 == \"晚\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    }\n    result.start.assign(\"hour\", hour);\n    result.start.assign(\"minute\", minute);\n    if (meridiem >= 0) {\n      result.start.assign(\"meridiem\", meridiem);\n    } else {\n      if (hour < 12) {\n        result.start.imply(\"meridiem\", 0);\n      } else {\n        result.start.imply(\"meridiem\", 1);\n      }\n    }\n    const secondMatch = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));\n    if (!secondMatch) {\n      if (result.text.match(/^\\d+$/)) {\n        return null;\n      }\n      return result;\n    }\n    const endMoment = new Date(startMoment.getTime());\n    result.end = context.createParsingComponents();\n    if (secondMatch[DAY_GROUP_1]) {\n      const day1 = secondMatch[DAY_GROUP_1];\n      if (day1 == \"明\" || day1 == \"聽\") {\n        if (context.refDate.getHours() > 1) {\n          endMoment.setDate(endMoment.getDate() + 1);\n        }\n      } else if (day1 == \"昨\" || day1 == \"尋\" || day1 == \"琴\") {\n        endMoment.setDate(endMoment.getDate() - 1);\n      } else if (day1 == \"前\") {\n        endMoment.setDate(endMoment.getDate() - 2);\n      } else if (day1 == \"大前\") {\n        endMoment.setDate(endMoment.getDate() - 3);\n      } else if (day1 == \"後\") {\n        endMoment.setDate(endMoment.getDate() + 2);\n      } else if (day1 == \"大後\") {\n        endMoment.setDate(endMoment.getDate() + 3);\n      }\n      result.end.assign(\"day\", endMoment.getDate());\n      result.end.assign(\"month\", endMoment.getMonth() + 1);\n      result.end.assign(\"year\", endMoment.getFullYear());\n    } else if (secondMatch[DAY_GROUP_3]) {\n      const day3 = secondMatch[DAY_GROUP_3];\n      if (day3 == \"明\" || day3 == \"聽\") {\n        endMoment.setDate(endMoment.getDate() + 1);\n      } else if (day3 == \"昨\" || day3 == \"尋\" || day3 == \"琴\") {\n        endMoment.setDate(endMoment.getDate() - 1);\n      } else if (day3 == \"前\") {\n        endMoment.setDate(endMoment.getDate() - 2);\n      } else if (day3 == \"大前\") {\n        endMoment.setDate(endMoment.getDate() - 3);\n      } else if (day3 == \"後\") {\n        endMoment.setDate(endMoment.getDate() + 2);\n      } else if (day3 == \"大後\") {\n        endMoment.setDate(endMoment.getDate() + 3);\n      }\n      result.end.assign(\"day\", endMoment.getDate());\n      result.end.assign(\"month\", endMoment.getMonth() + 1);\n      result.end.assign(\"year\", endMoment.getFullYear());\n    } else {\n      result.end.imply(\"day\", endMoment.getDate());\n      result.end.imply(\"month\", endMoment.getMonth() + 1);\n      result.end.imply(\"year\", endMoment.getFullYear());\n    }\n    hour = 0;\n    minute = 0;\n    meridiem = -1;\n    if (secondMatch[SECOND_GROUP]) {\n      let second = parseInt(secondMatch[SECOND_GROUP]);\n      if (isNaN(second)) {\n        second = zhStringToNumber(secondMatch[SECOND_GROUP]);\n      }\n      if (second >= 60) return null;\n      result.end.assign(\"second\", second);\n    }\n    hour = parseInt(secondMatch[HOUR_GROUP]);\n    if (isNaN(hour)) {\n      hour = zhStringToNumber(secondMatch[HOUR_GROUP]);\n    }\n    if (secondMatch[MINUTE_GROUP]) {\n      if (secondMatch[MINUTE_GROUP] == \"半\") {\n        minute = 30;\n      } else if (secondMatch[MINUTE_GROUP] == \"正\" || secondMatch[MINUTE_GROUP] == \"整\") {\n        minute = 0;\n      } else {\n        minute = parseInt(secondMatch[MINUTE_GROUP]);\n        if (isNaN(minute)) {\n          minute = zhStringToNumber(secondMatch[MINUTE_GROUP]);\n        }\n      }\n    } else if (hour > 100) {\n      minute = hour % 100;\n      hour = Math.floor(hour / 100);\n    }\n    if (minute >= 60) {\n      return null;\n    }\n    if (hour > 24) {\n      return null;\n    }\n    if (hour >= 12) {\n      meridiem = 1;\n    }\n    if (secondMatch[AM_PM_HOUR_GROUP]) {\n      if (hour > 12) return null;\n      var ampm = secondMatch[AM_PM_HOUR_GROUP][0].toLowerCase();\n      if (ampm == \"a\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      }\n      if (ampm == \"p\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n      if (!result.start.isCertain(\"meridiem\")) {\n        if (meridiem == 0) {\n          result.start.imply(\"meridiem\", 0);\n          if (result.start.get(\"hour\") == 12) {\n            result.start.assign(\"hour\", 0);\n          }\n        } else {\n          result.start.imply(\"meridiem\", 1);\n          if (result.start.get(\"hour\") != 12) {\n            result.start.assign(\"hour\", result.start.get(\"hour\") + 12);\n          }\n        }\n      }\n    } else if (secondMatch[ZH_AM_PM_HOUR_GROUP_1]) {\n      const zhAMPMString1 = secondMatch[ZH_AM_PM_HOUR_GROUP_1];\n      var zhAMPM1 = zhAMPMString1[0];\n      if (zhAMPM1 == \"朝\" || zhAMPM1 == \"早\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM1 == \"晚\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (secondMatch[ZH_AM_PM_HOUR_GROUP_2]) {\n      const zhAMPMString2 = secondMatch[ZH_AM_PM_HOUR_GROUP_2];\n      var zhAMPM2 = zhAMPMString2[0];\n      if (zhAMPM2 == \"上\" || zhAMPM2 == \"朝\" || zhAMPM2 == \"早\" || zhAMPM2 == \"凌\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM2 == \"下\" || zhAMPM2 == \"晏\" || zhAMPM2 == \"晚\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (secondMatch[ZH_AM_PM_HOUR_GROUP_3]) {\n      const zhAMPMString3 = secondMatch[ZH_AM_PM_HOUR_GROUP_3];\n      var zhAMPM3 = zhAMPMString3[0];\n      if (zhAMPM3 == \"上\" || zhAMPM3 == \"朝\" || zhAMPM3 == \"早\" || zhAMPM3 == \"凌\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM3 == \"下\" || zhAMPM3 == \"晏\" || zhAMPM3 == \"晚\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    }\n    result.text = result.text + secondMatch[0];\n    result.end.assign(\"hour\", hour);\n    result.end.assign(\"minute\", minute);\n    if (meridiem >= 0) {\n      result.end.assign(\"meridiem\", meridiem);\n    } else {\n      const startAtPM = result.start.isCertain(\"meridiem\") && result.start.get(\"meridiem\") == 1;\n      if (startAtPM && result.start.get(\"hour\") > hour) {\n        result.end.imply(\"meridiem\", 0);\n      } else if (hour > 12) {\n        result.end.imply(\"meridiem\", 1);\n      }\n    }\n    if (result.end.date().getTime() < result.start.date().getTime()) {\n      result.end.imply(\"day\", result.end.get(\"day\") + 1);\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["AbstractParserWithWordBoundaryChecking","NUMBER","zhStringToNumber","FIRST_REG_PATTERN","RegExp","Object","keys","join","SECOND_REG_PATTERN","DAY_GROUP_1","ZH_AM_PM_HOUR_GROUP_1","ZH_AM_PM_HOUR_GROUP_2","DAY_GROUP_3","ZH_AM_PM_HOUR_GROUP_3","HOUR_GROUP","MINUTE_GROUP","SECOND_GROUP","AM_PM_HOUR_GROUP","ZHHantTimeExpressionParser","innerPattern","innerExtract","context","match","index","text","result","createParsingResult","startMoment","Date","refDate","getTime","day1","getHours","setDate","getDate","start","assign","getMonth","getFullYear","day3","imply","hour","minute","meridiem","second","parseInt","isNaN","Math","floor","ampm","toLowerCase","zhAMPMString1","zhAMPM1","zhAMPMString2","zhAMPM2","zhAMPMString3","zhAMPM3","secondMatch","exec","substring","length","endMoment","end","createParsingComponents","isCertain","get","startAtPM","date"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\zh\\hant\\parsers\\ZHHantTimeExpressionParser.ts"],"sourcesContent":["import { ParsingContext } from \"../../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { NUMBER, zhStringToNumber } from \"../constants\";\n\nconst FIRST_REG_PATTERN = new RegExp(\n    \"(?:由|從|自)?\" +\n        \"(?:\" +\n        \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|\" +\n        \"(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|\" +\n        \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)\" +\n        \"(?:[\\\\s,，]*)\" +\n        \"(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?\" +\n        \")?\" +\n        \"(?:[\\\\s,，]*)\" +\n        \"(?:(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)(?:\\\\s*)(?:點|時|:|：)\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|半|正|整|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:分|:|：)?\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:秒)?)\" +\n        \"(?:\\\\s*(A.M.|P.M.|AM?|PM?))?\",\n    \"i\"\n);\n\nconst SECOND_REG_PATTERN = new RegExp(\n    \"(?:^\\\\s*(?:到|至|\\\\-|\\\\–|\\\\~|\\\\〜)\\\\s*)\" +\n        \"(?:\" +\n        \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|\" +\n        \"(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|\" +\n        \"(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)\" +\n        \"(?:[\\\\s,，]*)\" +\n        \"(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?\" +\n        \")?\" +\n        \"(?:[\\\\s,，]*)\" +\n        \"(?:(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)(?:\\\\s*)(?:點|時|:|：)\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|半|正|整|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:分|:|：)?\" +\n        \"(?:\\\\s*)\" +\n        \"(\\\\d+|[\" +\n        Object.keys(NUMBER).join(\"\") +\n        \"]+)?(?:\\\\s*)(?:秒)?)\" +\n        \"(?:\\\\s*(A.M.|P.M.|AM?|PM?))?\",\n    \"i\"\n);\n\nconst DAY_GROUP_1 = 1;\nconst ZH_AM_PM_HOUR_GROUP_1 = 2;\nconst ZH_AM_PM_HOUR_GROUP_2 = 3;\nconst DAY_GROUP_3 = 4;\nconst ZH_AM_PM_HOUR_GROUP_3 = 5;\nconst HOUR_GROUP = 6;\nconst MINUTE_GROUP = 7;\nconst SECOND_GROUP = 8;\nconst AM_PM_HOUR_GROUP = 9;\n\nexport default class ZHHantTimeExpressionParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return FIRST_REG_PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        // This pattern can be overlaped Ex. [12] AM, 1[2] AM\n        if (match.index > 0 && context.text[match.index - 1].match(/\\w/)) {\n            return null;\n        }\n\n        const result = context.createParsingResult(match.index, match[0]);\n        const startMoment = new Date(context.refDate.getTime());\n\n        // ----- Day\n        if (match[DAY_GROUP_1]) {\n            const day1 = match[DAY_GROUP_1];\n            if (day1 == \"明\" || day1 == \"聽\") {\n                // Check not \"Tomorrow\" on late night\n                if (context.refDate.getHours() > 1) {\n                    startMoment.setDate(startMoment.getDate() + 1);\n                }\n            } else if (day1 == \"昨\" || day1 == \"尋\" || day1 == \"琴\") {\n                startMoment.setDate(startMoment.getDate() - 1);\n            } else if (day1 == \"前\") {\n                startMoment.setDate(startMoment.getDate() - 2);\n            } else if (day1 == \"大前\") {\n                startMoment.setDate(startMoment.getDate() - 3);\n            } else if (day1 == \"後\") {\n                startMoment.setDate(startMoment.getDate() + 2);\n            } else if (day1 == \"大後\") {\n                startMoment.setDate(startMoment.getDate() + 3);\n            }\n            result.start.assign(\"day\", startMoment.getDate());\n            result.start.assign(\"month\", startMoment.getMonth() + 1);\n            result.start.assign(\"year\", startMoment.getFullYear());\n        } else if (match[DAY_GROUP_3]) {\n            const day3 = match[DAY_GROUP_3];\n            if (day3 == \"明\" || day3 == \"聽\") {\n                startMoment.setDate(startMoment.getDate() + 1);\n            } else if (day3 == \"昨\" || day3 == \"尋\" || day3 == \"琴\") {\n                startMoment.setDate(startMoment.getDate() - 1);\n            } else if (day3 == \"前\") {\n                startMoment.setDate(startMoment.getDate() - 2);\n            } else if (day3 == \"大前\") {\n                startMoment.setDate(startMoment.getDate() - 3);\n            } else if (day3 == \"後\") {\n                startMoment.setDate(startMoment.getDate() + 2);\n            } else if (day3 == \"大後\") {\n                startMoment.setDate(startMoment.getDate() + 3);\n            }\n            result.start.assign(\"day\", startMoment.getDate());\n            result.start.assign(\"month\", startMoment.getMonth() + 1);\n            result.start.assign(\"year\", startMoment.getFullYear());\n        } else {\n            result.start.imply(\"day\", startMoment.getDate());\n            result.start.imply(\"month\", startMoment.getMonth() + 1);\n            result.start.imply(\"year\", startMoment.getFullYear());\n        }\n\n        let hour = 0;\n        let minute = 0;\n        let meridiem = -1;\n\n        // ----- Second\n        if (match[SECOND_GROUP]) {\n            var second = parseInt(match[SECOND_GROUP]);\n            if (isNaN(second)) {\n                second = zhStringToNumber(match[SECOND_GROUP]);\n            }\n            if (second >= 60) return null;\n            result.start.assign(\"second\", second);\n        }\n\n        hour = parseInt(match[HOUR_GROUP]);\n        if (isNaN(hour)) {\n            hour = zhStringToNumber(match[HOUR_GROUP]);\n        }\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP]) {\n            if (match[MINUTE_GROUP] == \"半\") {\n                minute = 30;\n            } else if (match[MINUTE_GROUP] == \"正\" || match[MINUTE_GROUP] == \"整\") {\n                minute = 0;\n            } else {\n                minute = parseInt(match[MINUTE_GROUP]);\n                if (isNaN(minute)) {\n                    minute = zhStringToNumber(match[MINUTE_GROUP]);\n                }\n            }\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n        if (hour >= 12) {\n            meridiem = 1;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP]) {\n            if (hour > 12) return null;\n            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            }\n\n            if (ampm == \"p\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {\n            var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];\n            var zhAMPM1 = zhAMPMString1[0];\n            if (zhAMPM1 == \"朝\" || zhAMPM1 == \"早\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM1 == \"晚\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {\n            var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];\n            var zhAMPM2 = zhAMPMString2[0];\n            if (zhAMPM2 == \"上\" || zhAMPM2 == \"朝\" || zhAMPM2 == \"早\" || zhAMPM2 == \"凌\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM2 == \"下\" || zhAMPM2 == \"晏\" || zhAMPM2 == \"晚\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {\n            var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];\n            var zhAMPM3 = zhAMPMString3[0];\n            if (zhAMPM3 == \"上\" || zhAMPM3 == \"朝\" || zhAMPM3 == \"早\" || zhAMPM3 == \"凌\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM3 == \"下\" || zhAMPM3 == \"晏\" || zhAMPM3 == \"晚\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        }\n\n        result.start.assign(\"hour\", hour);\n        result.start.assign(\"minute\", minute);\n\n        if (meridiem >= 0) {\n            result.start.assign(\"meridiem\", meridiem);\n        } else {\n            if (hour < 12) {\n                result.start.imply(\"meridiem\", 0);\n            } else {\n                result.start.imply(\"meridiem\", 1);\n            }\n        }\n\n        // ==============================================================\n        //                  Extracting the 'to' chunk\n        // ==============================================================\n\n        const secondMatch = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));\n        if (!secondMatch) {\n            // Not accept number only result\n            if (result.text.match(/^\\d+$/)) {\n                return null;\n            }\n            return result;\n        }\n\n        const endMoment = new Date(startMoment.getTime());\n        result.end = context.createParsingComponents();\n\n        // ----- Day\n        if (secondMatch[DAY_GROUP_1]) {\n            const day1 = secondMatch[DAY_GROUP_1];\n            if (day1 == \"明\" || day1 == \"聽\") {\n                // Check not \"Tomorrow\" on late night\n                if (context.refDate.getHours() > 1) {\n                    endMoment.setDate(endMoment.getDate() + 1);\n                }\n            } else if (day1 == \"昨\" || day1 == \"尋\" || day1 == \"琴\") {\n                endMoment.setDate(endMoment.getDate() - 1);\n            } else if (day1 == \"前\") {\n                endMoment.setDate(endMoment.getDate() - 2);\n            } else if (day1 == \"大前\") {\n                endMoment.setDate(endMoment.getDate() - 3);\n            } else if (day1 == \"後\") {\n                endMoment.setDate(endMoment.getDate() + 2);\n            } else if (day1 == \"大後\") {\n                endMoment.setDate(endMoment.getDate() + 3);\n            }\n            result.end.assign(\"day\", endMoment.getDate());\n            result.end.assign(\"month\", endMoment.getMonth() + 1);\n            result.end.assign(\"year\", endMoment.getFullYear());\n        } else if (secondMatch[DAY_GROUP_3]) {\n            const day3 = secondMatch[DAY_GROUP_3];\n            if (day3 == \"明\" || day3 == \"聽\") {\n                endMoment.setDate(endMoment.getDate() + 1);\n            } else if (day3 == \"昨\" || day3 == \"尋\" || day3 == \"琴\") {\n                endMoment.setDate(endMoment.getDate() - 1);\n            } else if (day3 == \"前\") {\n                endMoment.setDate(endMoment.getDate() - 2);\n            } else if (day3 == \"大前\") {\n                endMoment.setDate(endMoment.getDate() - 3);\n            } else if (day3 == \"後\") {\n                endMoment.setDate(endMoment.getDate() + 2);\n            } else if (day3 == \"大後\") {\n                endMoment.setDate(endMoment.getDate() + 3);\n            }\n            result.end.assign(\"day\", endMoment.getDate());\n            result.end.assign(\"month\", endMoment.getMonth() + 1);\n            result.end.assign(\"year\", endMoment.getFullYear());\n        } else {\n            result.end.imply(\"day\", endMoment.getDate());\n            result.end.imply(\"month\", endMoment.getMonth() + 1);\n            result.end.imply(\"year\", endMoment.getFullYear());\n        }\n\n        hour = 0;\n        minute = 0;\n        meridiem = -1;\n\n        // ----- Second\n        if (secondMatch[SECOND_GROUP]) {\n            let second = parseInt(secondMatch[SECOND_GROUP]);\n            if (isNaN(second)) {\n                second = zhStringToNumber(secondMatch[SECOND_GROUP]);\n            }\n\n            if (second >= 60) return null;\n            result.end.assign(\"second\", second);\n        }\n\n        hour = parseInt(secondMatch[HOUR_GROUP]);\n        if (isNaN(hour)) {\n            hour = zhStringToNumber(secondMatch[HOUR_GROUP]);\n        }\n\n        // ----- Minutes\n        if (secondMatch[MINUTE_GROUP]) {\n            if (secondMatch[MINUTE_GROUP] == \"半\") {\n                minute = 30;\n            } else if (secondMatch[MINUTE_GROUP] == \"正\" || secondMatch[MINUTE_GROUP] == \"整\") {\n                minute = 0;\n            } else {\n                minute = parseInt(secondMatch[MINUTE_GROUP]);\n                if (isNaN(minute)) {\n                    minute = zhStringToNumber(secondMatch[MINUTE_GROUP]);\n                }\n            }\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n        if (hour >= 12) {\n            meridiem = 1;\n        }\n\n        // ----- AM & PM\n        if (secondMatch[AM_PM_HOUR_GROUP]) {\n            if (hour > 12) return null;\n            var ampm = secondMatch[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            }\n\n            if (ampm == \"p\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n\n            if (!result.start.isCertain(\"meridiem\")) {\n                if (meridiem == 0) {\n                    result.start.imply(\"meridiem\", 0);\n\n                    if (result.start.get(\"hour\") == 12) {\n                        result.start.assign(\"hour\", 0);\n                    }\n                } else {\n                    result.start.imply(\"meridiem\", 1);\n\n                    if (result.start.get(\"hour\") != 12) {\n                        result.start.assign(\"hour\", result.start.get(\"hour\") + 12);\n                    }\n                }\n            }\n        } else if (secondMatch[ZH_AM_PM_HOUR_GROUP_1]) {\n            const zhAMPMString1 = secondMatch[ZH_AM_PM_HOUR_GROUP_1];\n            var zhAMPM1 = zhAMPMString1[0];\n            if (zhAMPM1 == \"朝\" || zhAMPM1 == \"早\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM1 == \"晚\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (secondMatch[ZH_AM_PM_HOUR_GROUP_2]) {\n            const zhAMPMString2 = secondMatch[ZH_AM_PM_HOUR_GROUP_2];\n            var zhAMPM2 = zhAMPMString2[0];\n            if (zhAMPM2 == \"上\" || zhAMPM2 == \"朝\" || zhAMPM2 == \"早\" || zhAMPM2 == \"凌\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM2 == \"下\" || zhAMPM2 == \"晏\" || zhAMPM2 == \"晚\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        } else if (secondMatch[ZH_AM_PM_HOUR_GROUP_3]) {\n            const zhAMPMString3 = secondMatch[ZH_AM_PM_HOUR_GROUP_3];\n            var zhAMPM3 = zhAMPMString3[0];\n            if (zhAMPM3 == \"上\" || zhAMPM3 == \"朝\" || zhAMPM3 == \"早\" || zhAMPM3 == \"凌\") {\n                meridiem = 0;\n                if (hour == 12) hour = 0;\n            } else if (zhAMPM3 == \"下\" || zhAMPM3 == \"晏\" || zhAMPM3 == \"晚\") {\n                meridiem = 1;\n                if (hour != 12) hour += 12;\n            }\n        }\n\n        result.text = result.text + secondMatch[0];\n        result.end.assign(\"hour\", hour);\n        result.end.assign(\"minute\", minute);\n        if (meridiem >= 0) {\n            result.end.assign(\"meridiem\", meridiem);\n        } else {\n            const startAtPM = result.start.isCertain(\"meridiem\") && result.start.get(\"meridiem\") == 1;\n            if (startAtPM && result.start.get(\"hour\") > hour) {\n                // 10pm - 1 (am)\n                result.end.imply(\"meridiem\", 0);\n            } else if (hour > 12) {\n                result.end.imply(\"meridiem\", 1);\n            }\n        }\n\n        if (result.end.date().getTime() < result.start.date().getTime()) {\n            result.end.imply(\"day\", result.end.get(\"day\") + 1);\n        }\n\n        return result;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}