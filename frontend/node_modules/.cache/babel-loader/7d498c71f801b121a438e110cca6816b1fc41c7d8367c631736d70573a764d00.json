{"ast":null,"code":"import { WEEKDAY_OFFSET } from \"../constants.js\";\nimport { createParsingComponentsAtWeekday } from \"../../../calculation/weekdays.js\";\nconst PATTERN = new RegExp(\"((?<prefix>前の|次の|今週))?(?<weekday>\" + Object.keys(WEEKDAY_OFFSET).join(\"|\") + \")(?:曜日|曜)\", \"i\");\nexport default class JPWeekdayParser {\n  pattern() {\n    return PATTERN;\n  }\n  extract(context, match) {\n    const dayOfWeek = match.groups.weekday;\n    const offset = WEEKDAY_OFFSET[dayOfWeek];\n    if (offset === undefined) return null;\n    const prefix = match.groups.prefix || \"\";\n    let modifier = null;\n    if (prefix.match(/前の/)) {\n      modifier = \"last\";\n    } else if (prefix.match(/次の/)) {\n      modifier = \"next\";\n    } else if (prefix.match(/今週/)) {\n      modifier = \"this\";\n    }\n    return createParsingComponentsAtWeekday(context.reference, offset, modifier);\n  }\n}","map":{"version":3,"names":["WEEKDAY_OFFSET","createParsingComponentsAtWeekday","PATTERN","RegExp","Object","keys","join","JPWeekdayParser","pattern","extract","context","match","dayOfWeek","groups","weekday","offset","undefined","prefix","modifier","reference"],"sources":["C:\\Users\\sampa\\Downloads\\myapp\\myapp\\myapp\\frontend\\node_modules\\chrono-node\\src\\locales\\ja\\parsers\\JPWeekdayParser.ts"],"sourcesContent":["import { ParsingContext, Parser } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_OFFSET } from \"../constants\";\nimport { createParsingComponentsAtWeekday } from \"../../../calculation/weekdays\";\n\nconst PATTERN = new RegExp(\n    \"((?<prefix>前の|次の|今週))?(?<weekday>\" + Object.keys(WEEKDAY_OFFSET).join(\"|\") + \")(?:曜日|曜)\",\n    \"i\"\n);\n\nexport default class JPWeekdayParser implements Parser {\n    pattern(): RegExp {\n        return PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match.groups.weekday;\n        const offset = WEEKDAY_OFFSET[dayOfWeek];\n        if (offset === undefined) return null;\n\n        const prefix = match.groups.prefix || \"\";\n\n        let modifier = null;\n        if (prefix.match(/前の/)) {\n            modifier = \"last\";\n        } else if (prefix.match(/次の/)) {\n            modifier = \"next\";\n        } else if (prefix.match(/今週/)) {\n            modifier = \"this\";\n        }\n        // TODO: handle 先週, 来週. They are different from last and next.\n\n        return createParsingComponentsAtWeekday(context.reference, offset, modifier);\n    }\n}\n"],"mappings":"AAEA,SAASA,cAAc,QAAQ,iBAAe;AAC9C,SAASC,gCAAgC,QAAQ,kCAAgC;AAEjF,MAAMC,OAAO,GAAG,IAAIC,MAAM,CACtB,mCAAmC,GAAGC,MAAM,CAACC,IAAI,CAACL,cAAc,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC,GAAG,WAAW,EACzF,GAAG,CACN;AAED,eAAc,MAAOC,eAAe;EAChCC,OAAOA,CAAA;IACH,OAAON,OAAO;EAClB;EAEAO,OAAOA,CAACC,OAAuB,EAAEC,KAAuB;IACpD,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAACC,OAAO;IACtC,MAAMC,MAAM,GAAGf,cAAc,CAACY,SAAS,CAAC;IACxC,IAAIG,MAAM,KAAKC,SAAS,EAAE,OAAO,IAAI;IAErC,MAAMC,MAAM,GAAGN,KAAK,CAACE,MAAM,CAACI,MAAM,IAAI,EAAE;IAExC,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAID,MAAM,CAACN,KAAK,CAAC,IAAI,CAAC,EAAE;MACpBO,QAAQ,GAAG,MAAM;IACrB,CAAC,MAAM,IAAID,MAAM,CAACN,KAAK,CAAC,IAAI,CAAC,EAAE;MAC3BO,QAAQ,GAAG,MAAM;IACrB,CAAC,MAAM,IAAID,MAAM,CAACN,KAAK,CAAC,IAAI,CAAC,EAAE;MAC3BO,QAAQ,GAAG,MAAM;IACrB;IAGA,OAAOjB,gCAAgC,CAACS,OAAO,CAACS,SAAS,EAAEJ,MAAM,EAAEG,QAAQ,CAAC;EAChF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}